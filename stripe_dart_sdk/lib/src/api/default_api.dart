//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

import 'dart:async';

import 'package:built_value/json_object.dart';
import 'package:built_value/serializer.dart';
import 'package:dio/dio.dart';

import 'dart:typed_data';
import 'package:built_collection/built_collection.dart';
import 'package:stripe_dart_sdk/src/api_util.dart';
import 'package:stripe_dart_sdk/src/model/access1.dart';
import 'package:stripe_dart_sdk/src/model/access2.dart';
import 'package:stripe_dart_sdk/src/model/access3.dart';
import 'package:stripe_dart_sdk/src/model/account.dart';
import 'package:stripe_dart_sdk/src/model/account_groups_specs.dart';
import 'package:stripe_dart_sdk/src/model/account_link.dart';
import 'package:stripe_dart_sdk/src/model/account_list.dart';
import 'package:stripe_dart_sdk/src/model/account_session.dart';
import 'package:stripe_dart_sdk/src/model/account_session_create_components_param.dart';
import 'package:stripe_dart_sdk/src/model/accountholder_params.dart';
import 'package:stripe_dart_sdk/src/model/accountholder_params1.dart';
import 'package:stripe_dart_sdk/src/model/adaptive_pricing_params.dart';
import 'package:stripe_dart_sdk/src/model/add_invoice_item_entry.dart';
import 'package:stripe_dart_sdk/src/model/address_specs1.dart';
import 'package:stripe_dart_sdk/src/model/after_completion_params.dart';
import 'package:stripe_dart_sdk/src/model/after_expiration_params.dart';
import 'package:stripe_dart_sdk/src/model/aggregation_settings_param.dart';
import 'package:stripe_dart_sdk/src/model/all_people_relationship_specs.dart';
import 'package:stripe_dart_sdk/src/model/all_prices_recurring_params.dart';
import 'package:stripe_dart_sdk/src/model/amount_details_specs.dart';
import 'package:stripe_dart_sdk/src/model/amount_param.dart';
import 'package:stripe_dart_sdk/src/model/api_method_refund_list.dart';
import 'package:stripe_dart_sdk/src/model/apms_sources_source_list.dart';
import 'package:stripe_dart_sdk/src/model/apms_sources_source_transaction_list.dart';
import 'package:stripe_dart_sdk/src/model/apple_pay_domain.dart';
import 'package:stripe_dart_sdk/src/model/apple_pay_domain_list.dart';
import 'package:stripe_dart_sdk/src/model/applicability_config_param.dart';
import 'package:stripe_dart_sdk/src/model/application_fee.dart';
import 'package:stripe_dart_sdk/src/model/applies_to_params.dart';
import 'package:stripe_dart_sdk/src/model/apps_secret.dart';
import 'package:stripe_dart_sdk/src/model/authorization_controls_param.dart';
import 'package:stripe_dart_sdk/src/model/authorization_controls_param_v2.dart';
import 'package:stripe_dart_sdk/src/model/automatic_payment_methods_param.dart';
import 'package:stripe_dart_sdk/src/model/automatic_payment_methods_param1.dart';
import 'package:stripe_dart_sdk/src/model/automatic_tax_config.dart';
import 'package:stripe_dart_sdk/src/model/automatic_tax_config1.dart';
import 'package:stripe_dart_sdk/src/model/automatic_tax_filter_params.dart';
import 'package:stripe_dart_sdk/src/model/automatic_tax_param.dart';
import 'package:stripe_dart_sdk/src/model/automatic_tax_param1.dart';
import 'package:stripe_dart_sdk/src/model/automatic_tax_param2.dart';
import 'package:stripe_dart_sdk/src/model/automatic_tax_params.dart';
import 'package:stripe_dart_sdk/src/model/automatic_tax_params1.dart';
import 'package:stripe_dart_sdk/src/model/balance.dart';
import 'package:stripe_dart_sdk/src/model/balance_settings_param1.dart';
import 'package:stripe_dart_sdk/src/model/balance_summary_filter_param.dart';
import 'package:stripe_dart_sdk/src/model/balance_transaction.dart';
import 'package:stripe_dart_sdk/src/model/balance_transactions_list.dart';
import 'package:stripe_dart_sdk/src/model/bank_account.dart';
import 'package:stripe_dart_sdk/src/model/bank_account_list.dart';
import 'package:stripe_dart_sdk/src/model/bank_connections_resource_linked_account_list.dart';
import 'package:stripe_dart_sdk/src/model/bank_connections_resource_owner_list.dart';
import 'package:stripe_dart_sdk/src/model/bank_connections_resource_transaction_list.dart';
import 'package:stripe_dart_sdk/src/model/bank_transfer_params.dart';
import 'package:stripe_dart_sdk/src/model/bbpos_wise_pose.dart';
import 'package:stripe_dart_sdk/src/model/beneficiary_params.dart';
import 'package:stripe_dart_sdk/src/model/billing_alert.dart';
import 'package:stripe_dart_sdk/src/model/billing_clocks_resource_billing_clock_list.dart';
import 'package:stripe_dart_sdk/src/model/billing_credit_balance_summary.dart';
import 'package:stripe_dart_sdk/src/model/billing_credit_balance_transaction.dart';
import 'package:stripe_dart_sdk/src/model/billing_credit_grant.dart';
import 'package:stripe_dart_sdk/src/model/billing_credit_grants_resource_balance_transaction_list.dart';
import 'package:stripe_dart_sdk/src/model/billing_credit_grants_resource_credit_grant_list.dart';
import 'package:stripe_dart_sdk/src/model/billing_cycle_anchor_config_param.dart';
import 'package:stripe_dart_sdk/src/model/billing_details_inner_params1.dart';
import 'package:stripe_dart_sdk/src/model/billing_meter.dart';
import 'package:stripe_dart_sdk/src/model/billing_meter_event.dart';
import 'package:stripe_dart_sdk/src/model/billing_meter_event_adjustment.dart';
import 'package:stripe_dart_sdk/src/model/billing_meter_resource_billing_meter_event_summary_list.dart';
import 'package:stripe_dart_sdk/src/model/billing_meter_resource_billing_meter_list.dart';
import 'package:stripe_dart_sdk/src/model/billing_mode1.dart';
import 'package:stripe_dart_sdk/src/model/billing_mode_migrate.dart';
import 'package:stripe_dart_sdk/src/model/billing_portal_configuration.dart';
import 'package:stripe_dart_sdk/src/model/billing_portal_session.dart';
import 'package:stripe_dart_sdk/src/model/billing_specs.dart';
import 'package:stripe_dart_sdk/src/model/business_profile_create_param.dart';
import 'package:stripe_dart_sdk/src/model/business_profile_specs.dart';
import 'package:stripe_dart_sdk/src/model/business_profile_update_param.dart';
import 'package:stripe_dart_sdk/src/model/business_profile_update_specs.dart';
import 'package:stripe_dart_sdk/src/model/calculation_line_item.dart';
import 'package:stripe_dart_sdk/src/model/cancellation_details_param.dart';
import 'package:stripe_dart_sdk/src/model/capabilities_param.dart';
import 'package:stripe_dart_sdk/src/model/capability.dart';
import 'package:stripe_dart_sdk/src/model/card.dart';
import 'package:stripe_dart_sdk/src/model/card_list.dart';
import 'package:stripe_dart_sdk/src/model/card_present.dart';
import 'package:stripe_dart_sdk/src/model/carrier_text_param.dart';
import 'package:stripe_dart_sdk/src/model/cart.dart';
import 'package:stripe_dart_sdk/src/model/cash_balance.dart';
import 'package:stripe_dart_sdk/src/model/cash_balance_param.dart';
import 'package:stripe_dart_sdk/src/model/charge.dart';
import 'package:stripe_dart_sdk/src/model/charge_list.dart';
import 'package:stripe_dart_sdk/src/model/checkout_session.dart';
import 'package:stripe_dart_sdk/src/model/climate_order.dart';
import 'package:stripe_dart_sdk/src/model/climate_product.dart';
import 'package:stripe_dart_sdk/src/model/climate_removals_orders_list.dart';
import 'package:stripe_dart_sdk/src/model/climate_removals_products_list.dart';
import 'package:stripe_dart_sdk/src/model/climate_removals_suppliers_list.dart';
import 'package:stripe_dart_sdk/src/model/climate_supplier.dart';
import 'package:stripe_dart_sdk/src/model/collect_config.dart';
import 'package:stripe_dart_sdk/src/model/collected_information_params.dart';
import 'package:stripe_dart_sdk/src/model/collection_options_params.dart';
import 'package:stripe_dart_sdk/src/model/company_param.dart';
import 'package:stripe_dart_sdk/src/model/company_specs.dart';
import 'package:stripe_dart_sdk/src/model/company_update_specs.dart';
import 'package:stripe_dart_sdk/src/model/components.dart';
import 'package:stripe_dart_sdk/src/model/confirm_config.dart';
import 'package:stripe_dart_sdk/src/model/confirmation_token.dart';
import 'package:stripe_dart_sdk/src/model/connect_js_account_token_specs.dart';
import 'package:stripe_dart_sdk/src/model/consent_collection_params.dart';
import 'package:stripe_dart_sdk/src/model/consent_collection_params1.dart';
import 'package:stripe_dart_sdk/src/model/controller_specs.dart';
import 'package:stripe_dart_sdk/src/model/country_options.dart';
import 'package:stripe_dart_sdk/src/model/country_spec.dart';
import 'package:stripe_dart_sdk/src/model/country_spec_list.dart';
import 'package:stripe_dart_sdk/src/model/coupon.dart';
import 'package:stripe_dart_sdk/src/model/coupons_resource_coupon_list.dart';
import 'package:stripe_dart_sdk/src/model/create_location_address_param.dart';
import 'package:stripe_dart_sdk/src/model/created_param.dart';
import 'package:stripe_dart_sdk/src/model/credit_note.dart';
import 'package:stripe_dart_sdk/src/model/credit_note_line_item_params.dart';
import 'package:stripe_dart_sdk/src/model/credit_note_lines_list.dart';
import 'package:stripe_dart_sdk/src/model/credit_note_refund_params.dart';
import 'package:stripe_dart_sdk/src/model/credit_note_shipping_cost.dart';
import 'package:stripe_dart_sdk/src/model/credit_note_shipping_cost1.dart';
import 'package:stripe_dart_sdk/src/model/credit_notes_list.dart';
import 'package:stripe_dart_sdk/src/model/currency_option2.dart';
import 'package:stripe_dart_sdk/src/model/currency_option3.dart';
import 'package:stripe_dart_sdk/src/model/custom_field_param.dart';
import 'package:stripe_dart_sdk/src/model/custom_text_param.dart';
import 'package:stripe_dart_sdk/src/model/custom_unit_amount2.dart';
import 'package:stripe_dart_sdk/src/model/customer.dart';
import 'package:stripe_dart_sdk/src/model/customer_balance_transaction.dart';
import 'package:stripe_dart_sdk/src/model/customer_balance_transaction_list.dart';
import 'package:stripe_dart_sdk/src/model/customer_cash_balance_transaction.dart';
import 'package:stripe_dart_sdk/src/model/customer_cash_balance_transaction_list.dart';
import 'package:stripe_dart_sdk/src/model/customer_details.dart';
import 'package:stripe_dart_sdk/src/model/customer_details_param.dart';
import 'package:stripe_dart_sdk/src/model/customer_details_params.dart';
import 'package:stripe_dart_sdk/src/model/customer_mapping_param.dart';
import 'package:stripe_dart_sdk/src/model/customer_param.dart';
import 'package:stripe_dart_sdk/src/model/customer_payment_method_resource_list.dart';
import 'package:stripe_dart_sdk/src/model/customer_resource_customer_list.dart';
import 'package:stripe_dart_sdk/src/model/customer_session.dart';
import 'package:stripe_dart_sdk/src/model/customer_update_params.dart';
import 'package:stripe_dart_sdk/src/model/cvc_params.dart';
import 'package:stripe_dart_sdk/src/model/data_params.dart';
import 'package:stripe_dart_sdk/src/model/default_settings_params.dart';
import 'package:stripe_dart_sdk/src/model/defaults_param.dart';
import 'package:stripe_dart_sdk/src/model/delete_customers_customer_bank_accounts_id200_response.dart';
import 'package:stripe_dart_sdk/src/model/deleted_account.dart';
import 'package:stripe_dart_sdk/src/model/deleted_apple_pay_domain.dart';
import 'package:stripe_dart_sdk/src/model/deleted_coupon.dart';
import 'package:stripe_dart_sdk/src/model/deleted_customer.dart';
import 'package:stripe_dart_sdk/src/model/deleted_discount.dart';
import 'package:stripe_dart_sdk/src/model/deleted_external_account.dart';
import 'package:stripe_dart_sdk/src/model/deleted_invoice.dart';
import 'package:stripe_dart_sdk/src/model/deleted_invoiceitem.dart';
import 'package:stripe_dart_sdk/src/model/deleted_person.dart';
import 'package:stripe_dart_sdk/src/model/deleted_plan.dart';
import 'package:stripe_dart_sdk/src/model/deleted_product.dart';
import 'package:stripe_dart_sdk/src/model/deleted_product_feature.dart';
import 'package:stripe_dart_sdk/src/model/deleted_radar_value_list.dart';
import 'package:stripe_dart_sdk/src/model/deleted_radar_value_list_item.dart';
import 'package:stripe_dart_sdk/src/model/deleted_subscription_item.dart';
import 'package:stripe_dart_sdk/src/model/deleted_tax_id.dart';
import 'package:stripe_dart_sdk/src/model/deleted_terminal_configuration.dart';
import 'package:stripe_dart_sdk/src/model/deleted_terminal_location.dart';
import 'package:stripe_dart_sdk/src/model/deleted_terminal_reader.dart';
import 'package:stripe_dart_sdk/src/model/deleted_test_helpers_test_clock.dart';
import 'package:stripe_dart_sdk/src/model/deleted_webhook_endpoint.dart';
import 'package:stripe_dart_sdk/src/model/delivery_estimate1.dart';
import 'package:stripe_dart_sdk/src/model/discount.dart';
import 'package:stripe_dart_sdk/src/model/discount_params.dart';
import 'package:stripe_dart_sdk/src/model/dispute.dart';
import 'package:stripe_dart_sdk/src/model/dispute_evidence_params.dart';
import 'package:stripe_dart_sdk/src/model/dispute_list.dart';
import 'package:stripe_dart_sdk/src/model/documents_specs.dart';
import 'package:stripe_dart_sdk/src/model/encrypted_pin_param.dart';
import 'package:stripe_dart_sdk/src/model/encrypted_pin_param1.dart';
import 'package:stripe_dart_sdk/src/model/end_user_details_params.dart';
import 'package:stripe_dart_sdk/src/model/entitlements_active_entitlement.dart';
import 'package:stripe_dart_sdk/src/model/entitlements_feature.dart';
import 'package:stripe_dart_sdk/src/model/entitlements_resource_customer_entitlement_list.dart';
import 'package:stripe_dart_sdk/src/model/entitlements_resource_feature_list.dart';
import 'package:stripe_dart_sdk/src/model/entitlements_resource_product_feature_list.dart';
import 'package:stripe_dart_sdk/src/model/ephemeral_key.dart';
import 'package:stripe_dart_sdk/src/model/error.dart';
import 'package:stripe_dart_sdk/src/model/event.dart';
import 'package:stripe_dart_sdk/src/model/event_adjustment_cancel_settings_param.dart';
import 'package:stripe_dart_sdk/src/model/evidence_param.dart';
import 'package:stripe_dart_sdk/src/model/exchange_rate.dart';
import 'package:stripe_dart_sdk/src/model/exchange_rate_list.dart';
import 'package:stripe_dart_sdk/src/model/external_account.dart';
import 'package:stripe_dart_sdk/src/model/external_account_documents_param1.dart';
import 'package:stripe_dart_sdk/src/model/external_account_list.dart';
import 'package:stripe_dart_sdk/src/model/failure_details_param.dart';
import 'package:stripe_dart_sdk/src/model/feature_access.dart';
import 'package:stripe_dart_sdk/src/model/feature_access1.dart';
import 'package:stripe_dart_sdk/src/model/features.dart';
import 'package:stripe_dart_sdk/src/model/features_creation_param.dart';
import 'package:stripe_dart_sdk/src/model/features_updating_param.dart';
import 'package:stripe_dart_sdk/src/model/fee_refund.dart';
import 'package:stripe_dart_sdk/src/model/fee_refund_list.dart';
import 'package:stripe_dart_sdk/src/model/file_link.dart';
import 'package:stripe_dart_sdk/src/model/file_link_creation_params.dart';
import 'package:stripe_dart_sdk/src/model/file_resource_file_link_list.dart';
import 'package:stripe_dart_sdk/src/model/file_resource_file_list.dart';
import 'package:stripe_dart_sdk/src/model/filters_params.dart';
import 'package:stripe_dart_sdk/src/model/financial_addresses1.dart';
import 'package:stripe_dart_sdk/src/model/financial_connections_account.dart';
import 'package:stripe_dart_sdk/src/model/financial_connections_session.dart';
import 'package:stripe_dart_sdk/src/model/financial_connections_transaction.dart';
import 'package:stripe_dart_sdk/src/model/financial_reporting_finance_report_run_list.dart';
import 'package:stripe_dart_sdk/src/model/financial_reporting_finance_report_type_list.dart';
import 'package:stripe_dart_sdk/src/model/fixed_amount1.dart';
import 'package:stripe_dart_sdk/src/model/fixed_amount_update.dart';
import 'package:stripe_dart_sdk/src/model/fleet_specs1.dart';
import 'package:stripe_dart_sdk/src/model/fleet_testmode_authorization_specs.dart';
import 'package:stripe_dart_sdk/src/model/flow_data_param.dart';
import 'package:stripe_dart_sdk/src/model/forwarding_request.dart';
import 'package:stripe_dart_sdk/src/model/forwarding_request_list.dart';
import 'package:stripe_dart_sdk/src/model/forwarding_settings.dart';
import 'package:stripe_dart_sdk/src/model/fraud_details.dart';
import 'package:stripe_dart_sdk/src/model/from_invoice.dart';
import 'package:stripe_dart_sdk/src/model/from_quote_params.dart';
import 'package:stripe_dart_sdk/src/model/fuel_specs.dart';
import 'package:stripe_dart_sdk/src/model/funding_instructions.dart';
import 'package:stripe_dart_sdk/src/model/gelato_verification_report_list.dart';
import 'package:stripe_dart_sdk/src/model/gelato_verification_session_list.dart';
import 'package:stripe_dart_sdk/src/model/get_accounts_created_parameter.dart';
import 'package:stripe_dart_sdk/src/model/get_customers_customer200_response.dart';
import 'package:stripe_dart_sdk/src/model/get_payment_method_configurations_application_parameter.dart';
import 'package:stripe_dart_sdk/src/model/get_terminal_configurations_configuration200_response.dart';
import 'package:stripe_dart_sdk/src/model/get_terminal_locations_location200_response.dart';
import 'package:stripe_dart_sdk/src/model/get_terminal_readers_reader200_response.dart';
import 'package:stripe_dart_sdk/src/model/head_office_param.dart';
import 'package:stripe_dart_sdk/src/model/identity_verification_report.dart';
import 'package:stripe_dart_sdk/src/model/identity_verification_session.dart';
import 'package:stripe_dart_sdk/src/model/inbound_transfers2.dart';
import 'package:stripe_dart_sdk/src/model/individual_param.dart';
import 'package:stripe_dart_sdk/src/model/individual_specs.dart';
import 'package:stripe_dart_sdk/src/model/individual_specs_metadata.dart';
import 'package:stripe_dart_sdk/src/model/individual_update_specs.dart';
import 'package:stripe_dart_sdk/src/model/inline_product_params1.dart';
import 'package:stripe_dart_sdk/src/model/input_params.dart';
import 'package:stripe_dart_sdk/src/model/interac_present.dart';
import 'package:stripe_dart_sdk/src/model/invoice.dart';
import 'package:stripe_dart_sdk/src/model/invoice_creation_create_params.dart';
import 'package:stripe_dart_sdk/src/model/invoice_creation_params.dart';
import 'package:stripe_dart_sdk/src/model/invoice_creation_update_params.dart';
import 'package:stripe_dart_sdk/src/model/invoice_item_preview_params.dart';
import 'package:stripe_dart_sdk/src/model/invoice_lines_list.dart';
import 'package:stripe_dart_sdk/src/model/invoice_payment.dart';
import 'package:stripe_dart_sdk/src/model/invoice_rendering_template.dart';
import 'package:stripe_dart_sdk/src/model/invoice_rendering_templates_list.dart';
import 'package:stripe_dart_sdk/src/model/invoice_settings_param.dart';
import 'package:stripe_dart_sdk/src/model/invoiceitem.dart';
import 'package:stripe_dart_sdk/src/model/invoices_items_list.dart';
import 'package:stripe_dart_sdk/src/model/invoices_payments_list_invoice_payments.dart';
import 'package:stripe_dart_sdk/src/model/invoices_resource_list.dart';
import 'package:stripe_dart_sdk/src/model/issuing_authorization.dart';
import 'package:stripe_dart_sdk/src/model/issuing_authorization_list.dart';
import 'package:stripe_dart_sdk/src/model/issuing_card.dart';
import 'package:stripe_dart_sdk/src/model/issuing_card_list.dart';
import 'package:stripe_dart_sdk/src/model/issuing_cardholder.dart';
import 'package:stripe_dart_sdk/src/model/issuing_cardholder_list.dart';
import 'package:stripe_dart_sdk/src/model/issuing_dispute.dart';
import 'package:stripe_dart_sdk/src/model/issuing_dispute_list.dart';
import 'package:stripe_dart_sdk/src/model/issuing_network_token_list.dart';
import 'package:stripe_dart_sdk/src/model/issuing_personalization_design.dart';
import 'package:stripe_dart_sdk/src/model/issuing_personalization_design_list.dart';
import 'package:stripe_dart_sdk/src/model/issuing_physical_bundle.dart';
import 'package:stripe_dart_sdk/src/model/issuing_physical_bundle_list.dart';
import 'package:stripe_dart_sdk/src/model/issuing_settlement.dart';
import 'package:stripe_dart_sdk/src/model/issuing_token.dart';
import 'package:stripe_dart_sdk/src/model/issuing_transaction.dart';
import 'package:stripe_dart_sdk/src/model/issuing_transaction_list.dart';
import 'package:stripe_dart_sdk/src/model/japan_address_kana_specs1.dart';
import 'package:stripe_dart_sdk/src/model/japan_address_kanji_specs1.dart';
import 'package:stripe_dart_sdk/src/model/legal_entity_and_kyc_address_specs1.dart';
import 'package:stripe_dart_sdk/src/model/line_item.dart';
import 'package:stripe_dart_sdk/src/model/line_item_create_params.dart';
import 'package:stripe_dart_sdk/src/model/line_item_params.dart';
import 'package:stripe_dart_sdk/src/model/line_item_update_params.dart';
import 'package:stripe_dart_sdk/src/model/line_items_create_params.dart';
import 'package:stripe_dart_sdk/src/model/line_items_update_params.dart';
import 'package:stripe_dart_sdk/src/model/lines_data_param.dart';
import 'package:stripe_dart_sdk/src/model/lines_data_param1.dart';
import 'package:stripe_dart_sdk/src/model/lines_data_param2.dart';
import 'package:stripe_dart_sdk/src/model/linked_flows_param.dart';
import 'package:stripe_dart_sdk/src/model/list_account_capability.dart';
import 'package:stripe_dart_sdk/src/model/login_link.dart';
import 'package:stripe_dart_sdk/src/model/login_page_create_param.dart';
import 'package:stripe_dart_sdk/src/model/login_page_update_param.dart';
import 'package:stripe_dart_sdk/src/model/mandate.dart';
import 'package:stripe_dart_sdk/src/model/mandate_params.dart';
import 'package:stripe_dart_sdk/src/model/merchant_data_specs.dart';
import 'package:stripe_dart_sdk/src/model/meter_value_settings_param.dart';
import 'package:stripe_dart_sdk/src/model/model_source.dart';
import 'package:stripe_dart_sdk/src/model/network_data_specs.dart';
import 'package:stripe_dart_sdk/src/model/notification_event_list.dart';
import 'package:stripe_dart_sdk/src/model/notification_webhook_endpoint_list.dart';
import 'package:stripe_dart_sdk/src/model/one_time_price_data.dart';
import 'package:stripe_dart_sdk/src/model/one_time_price_data_with_product_data1.dart';
import 'package:stripe_dart_sdk/src/model/optional_fields_address1.dart';
import 'package:stripe_dart_sdk/src/model/optional_fields_shipping.dart';
import 'package:stripe_dart_sdk/src/model/optional_fields_shipping1.dart';
import 'package:stripe_dart_sdk/src/model/optional_item_params.dart';
import 'package:stripe_dart_sdk/src/model/order_params.dart';
import 'package:stripe_dart_sdk/src/model/outbound_payments1.dart';
import 'package:stripe_dart_sdk/src/model/outbound_transfers1.dart';
import 'package:stripe_dart_sdk/src/model/owner.dart';
import 'package:stripe_dart_sdk/src/model/owner1.dart';
import 'package:stripe_dart_sdk/src/model/owner_params.dart';
import 'package:stripe_dart_sdk/src/model/owner_params1.dart';
import 'package:stripe_dart_sdk/src/model/package_dimensions_specs.dart';
import 'package:stripe_dart_sdk/src/model/param1.dart';
import 'package:stripe_dart_sdk/src/model/param14.dart';
import 'package:stripe_dart_sdk/src/model/param15.dart';
import 'package:stripe_dart_sdk/src/model/param16.dart';
import 'package:stripe_dart_sdk/src/model/param17.dart';
import 'package:stripe_dart_sdk/src/model/param18.dart';
import 'package:stripe_dart_sdk/src/model/param19.dart';
import 'package:stripe_dart_sdk/src/model/param20.dart';
import 'package:stripe_dart_sdk/src/model/param21.dart';
import 'package:stripe_dart_sdk/src/model/param22.dart';
import 'package:stripe_dart_sdk/src/model/param23.dart';
import 'package:stripe_dart_sdk/src/model/param24.dart';
import 'package:stripe_dart_sdk/src/model/param25.dart';
import 'package:stripe_dart_sdk/src/model/payment_flows_payment_intent_list.dart';
import 'package:stripe_dart_sdk/src/model/payment_flows_payment_method_list.dart';
import 'package:stripe_dart_sdk/src/model/payment_flows_setup_intent_list.dart';
import 'package:stripe_dart_sdk/src/model/payment_flows_setup_intent_setup_attempt_list.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_data_params.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_data_params1.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_data_update_params.dart';
import 'package:stripe_dart_sdk/src/model/payment_link.dart';
import 'package:stripe_dart_sdk/src/model/payment_links_resource_list_line_items.dart';
import 'package:stripe_dart_sdk/src/model/payment_links_resource_payment_link_list.dart';
import 'package:stripe_dart_sdk/src/model/payment_method.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_config_resource_payment_method_configurations_list.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_configuration.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_data.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_data1.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_data_param.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_data_params.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_data_params1.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_data_params2.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_domain.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_domain_resource_payment_method_domain_list.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_options2.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_options3.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_options_param.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_options_param19.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_options_param35.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_options_param36.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param10.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param11.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param12.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param13.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param14.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param15.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param16.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param17.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param18.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param19.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param2.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param20.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param21.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param22.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param23.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param24.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param25.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param26.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param27.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param28.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param29.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param3.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param30.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param31.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param32.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param33.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param34.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param35.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param36.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param37.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param38.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param39.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param4.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param40.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param41.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param42.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param43.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param44.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param45.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param46.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param47.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param48.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param49.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param5.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param50.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param51.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param52.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param53.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param54.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param55.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param6.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param7.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param8.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_param9.dart';
import 'package:stripe_dart_sdk/src/model/payment_pages_checkout_session_list.dart';
import 'package:stripe_dart_sdk/src/model/payment_pages_checkout_session_list_line_items.dart';
import 'package:stripe_dart_sdk/src/model/payment_param.dart';
import 'package:stripe_dart_sdk/src/model/payment_settings.dart';
import 'package:stripe_dart_sdk/src/model/payment_settings1.dart';
import 'package:stripe_dart_sdk/src/model/payment_source.dart';
import 'package:stripe_dart_sdk/src/model/payout.dart';
import 'package:stripe_dart_sdk/src/model/payout_list.dart';
import 'package:stripe_dart_sdk/src/model/period.dart';
import 'package:stripe_dart_sdk/src/model/permissions_param.dart';
import 'package:stripe_dart_sdk/src/model/person.dart';
import 'package:stripe_dart_sdk/src/model/person_additional_tos_acceptances_specs.dart';
import 'package:stripe_dart_sdk/src/model/person_documents_specs.dart';
import 'package:stripe_dart_sdk/src/model/person_list.dart';
import 'package:stripe_dart_sdk/src/model/person_token_specs.dart';
import 'package:stripe_dart_sdk/src/model/person_verification_specs1.dart';
import 'package:stripe_dart_sdk/src/model/phase_configuration_params.dart';
import 'package:stripe_dart_sdk/src/model/phase_configuration_params1.dart';
import 'package:stripe_dart_sdk/src/model/phone_number_collection_params.dart';
import 'package:stripe_dart_sdk/src/model/phone_number_collection_params1.dart';
import 'package:stripe_dart_sdk/src/model/pii_token_specs.dart';
import 'package:stripe_dart_sdk/src/model/plan.dart';
import 'package:stripe_dart_sdk/src/model/plan_list.dart';
import 'package:stripe_dart_sdk/src/model/platform_earning_list.dart';
import 'package:stripe_dart_sdk/src/model/platform_restrictions.dart';
import 'package:stripe_dart_sdk/src/model/portal_public_resource_configuration_list.dart';
import 'package:stripe_dart_sdk/src/model/post_accounts_account_people_request_dob.dart';
import 'package:stripe_dart_sdk/src/model/post_accounts_account_people_request_full_name_aliases.dart';
import 'package:stripe_dart_sdk/src/model/post_accounts_request_bank_account.dart';
import 'package:stripe_dart_sdk/src/model/post_accounts_request_metadata.dart';
import 'package:stripe_dart_sdk/src/model/post_billing_credit_grants_id_request_expires_at.dart';
import 'package:stripe_dart_sdk/src/model/post_billing_portal_configurations_request_default_return_url.dart';
import 'package:stripe_dart_sdk/src/model/post_charges_request_card.dart';
import 'package:stripe_dart_sdk/src/model/post_charges_request_destination.dart';
import 'package:stripe_dart_sdk/src/model/post_checkout_sessions_session_request_shipping_options.dart';
import 'package:stripe_dart_sdk/src/model/post_climate_orders_order_request_beneficiary.dart';
import 'package:stripe_dart_sdk/src/model/post_customers_customer_bank_accounts_id200_response.dart';
import 'package:stripe_dart_sdk/src/model/post_customers_customer_request_bank_account.dart';
import 'package:stripe_dart_sdk/src/model/post_customers_customer_subscriptions_request_application_fee_percent.dart';
import 'package:stripe_dart_sdk/src/model/post_customers_customer_subscriptions_request_billing_thresholds.dart';
import 'package:stripe_dart_sdk/src/model/post_customers_customer_subscriptions_request_cancel_at.dart';
import 'package:stripe_dart_sdk/src/model/post_customers_customer_subscriptions_request_default_tax_rates.dart';
import 'package:stripe_dart_sdk/src/model/post_customers_customer_subscriptions_request_discounts.dart';
import 'package:stripe_dart_sdk/src/model/post_customers_customer_subscriptions_request_pending_invoice_item_interval.dart';
import 'package:stripe_dart_sdk/src/model/post_customers_customer_subscriptions_request_trial_end.dart';
import 'package:stripe_dart_sdk/src/model/post_customers_customer_subscriptions_subscription_exposed_id_request_cancel_at.dart';
import 'package:stripe_dart_sdk/src/model/post_customers_customer_subscriptions_subscription_exposed_id_request_default_source.dart';
import 'package:stripe_dart_sdk/src/model/post_customers_customer_subscriptions_subscription_exposed_id_request_default_tax_rates.dart';
import 'package:stripe_dart_sdk/src/model/post_customers_customer_subscriptions_subscription_exposed_id_request_pause_collection.dart';
import 'package:stripe_dart_sdk/src/model/post_customers_customer_subscriptions_subscription_exposed_id_request_transfer_data.dart';
import 'package:stripe_dart_sdk/src/model/post_customers_customer_subscriptions_subscription_exposed_id_request_trial_end.dart';
import 'package:stripe_dart_sdk/src/model/post_customers_request_address.dart';
import 'package:stripe_dart_sdk/src/model/post_customers_request_shipping.dart';
import 'package:stripe_dart_sdk/src/model/post_entitlements_features_id_request_metadata.dart';
import 'package:stripe_dart_sdk/src/model/post_file_links_link_request_expires_at.dart';
import 'package:stripe_dart_sdk/src/model/post_invoiceitems_invoiceitem_request_discounts.dart';
import 'package:stripe_dart_sdk/src/model/post_invoiceitems_invoiceitem_request_tax_rates.dart';
import 'package:stripe_dart_sdk/src/model/post_invoiceitems_request_discounts.dart';
import 'package:stripe_dart_sdk/src/model/post_invoiceitems_request_tax_code.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_create_preview_request_discounts.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_create_preview_request_on_behalf_of.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_invoice_lines_line_item_id_request_discounts.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_invoice_lines_line_item_id_request_metadata.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_invoice_lines_line_item_id_request_tax_amounts.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_invoice_lines_line_item_id_request_tax_rates.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_invoice_pay_request_mandate.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_invoice_request_custom_fields.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_invoice_request_default_source.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_invoice_request_default_tax_rates.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_invoice_request_discounts.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_invoice_request_effective_at.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_invoice_request_number.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_invoice_request_shipping_cost.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_invoice_request_shipping_details.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_invoice_request_transfer_data.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_request_account_tax_ids.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_request_custom_fields.dart';
import 'package:stripe_dart_sdk/src/model/post_invoices_request_discounts.dart';
import 'package:stripe_dart_sdk/src/model/post_issuing_cards_request_second_line.dart';
import 'package:stripe_dart_sdk/src/model/post_issuing_personalization_designs_personalization_design_request_card_logo.dart';
import 'package:stripe_dart_sdk/src/model/post_issuing_personalization_designs_personalization_design_request_carrier_text.dart';
import 'package:stripe_dart_sdk/src/model/post_issuing_personalization_designs_personalization_design_request_lookup_key.dart';
import 'package:stripe_dart_sdk/src/model/post_issuing_personalization_designs_personalization_design_request_name.dart';
import 'package:stripe_dart_sdk/src/model/post_payment_intents_intent_confirm_request_mandate_data.dart';
import 'package:stripe_dart_sdk/src/model/post_payment_intents_intent_confirm_request_off_session.dart';
import 'package:stripe_dart_sdk/src/model/post_payment_intents_intent_request_application_fee_amount.dart';
import 'package:stripe_dart_sdk/src/model/post_payment_intents_intent_request_receipt_email.dart';
import 'package:stripe_dart_sdk/src/model/post_payment_intents_intent_request_shipping.dart';
import 'package:stripe_dart_sdk/src/model/post_payment_intents_request_mandate_data.dart';
import 'package:stripe_dart_sdk/src/model/post_payment_intents_request_off_session.dart';
import 'package:stripe_dart_sdk/src/model/post_payment_links_payment_link_request_custom_fields.dart';
import 'package:stripe_dart_sdk/src/model/post_payment_links_payment_link_request_inactive_message.dart';
import 'package:stripe_dart_sdk/src/model/post_payment_links_payment_link_request_payment_method_types.dart';
import 'package:stripe_dart_sdk/src/model/post_payment_links_payment_link_request_restrictions.dart';
import 'package:stripe_dart_sdk/src/model/post_payment_links_payment_link_request_shipping_address_collection.dart';
import 'package:stripe_dart_sdk/src/model/post_payment_methods_request_card.dart';
import 'package:stripe_dart_sdk/src/model/post_plans_request_product.dart';
import 'package:stripe_dart_sdk/src/model/post_prices_price_request_currency_options.dart';
import 'package:stripe_dart_sdk/src/model/post_products_id_request_description.dart';
import 'package:stripe_dart_sdk/src/model/post_products_id_request_images.dart';
import 'package:stripe_dart_sdk/src/model/post_products_id_request_marketing_features.dart';
import 'package:stripe_dart_sdk/src/model/post_products_id_request_package_dimensions.dart';
import 'package:stripe_dart_sdk/src/model/post_products_id_request_unit_label.dart';
import 'package:stripe_dart_sdk/src/model/post_products_id_request_url.dart';
import 'package:stripe_dart_sdk/src/model/post_quotes_quote_request_description.dart';
import 'package:stripe_dart_sdk/src/model/post_quotes_quote_request_footer.dart';
import 'package:stripe_dart_sdk/src/model/post_quotes_quote_request_header.dart';
import 'package:stripe_dart_sdk/src/model/post_quotes_request_application_fee_amount.dart';
import 'package:stripe_dart_sdk/src/model/post_quotes_request_application_fee_percent.dart';
import 'package:stripe_dart_sdk/src/model/post_quotes_request_default_tax_rates.dart';
import 'package:stripe_dart_sdk/src/model/post_quotes_request_description.dart';
import 'package:stripe_dart_sdk/src/model/post_quotes_request_discounts.dart';
import 'package:stripe_dart_sdk/src/model/post_quotes_request_footer.dart';
import 'package:stripe_dart_sdk/src/model/post_quotes_request_header.dart';
import 'package:stripe_dart_sdk/src/model/post_quotes_request_on_behalf_of.dart';
import 'package:stripe_dart_sdk/src/model/post_quotes_request_transfer_data.dart';
import 'package:stripe_dart_sdk/src/model/post_setup_intents_request_mandate_data.dart';
import 'package:stripe_dart_sdk/src/model/post_subscription_items_request_billing_thresholds.dart';
import 'package:stripe_dart_sdk/src/model/post_subscription_items_request_discounts.dart';
import 'package:stripe_dart_sdk/src/model/post_subscription_items_request_tax_rates.dart';
import 'package:stripe_dart_sdk/src/model/post_subscription_schedules_request_start_date.dart';
import 'package:stripe_dart_sdk/src/model/post_subscriptions_request_on_behalf_of.dart';
import 'package:stripe_dart_sdk/src/model/post_subscriptions_subscription_exposed_id_request_description.dart';
import 'package:stripe_dart_sdk/src/model/post_subscriptions_subscription_exposed_id_request_trial_end.dart';
import 'package:stripe_dart_sdk/src/model/post_tax_registrations_id_request_active_from.dart';
import 'package:stripe_dart_sdk/src/model/post_tax_registrations_id_request_expires_at.dart';
import 'package:stripe_dart_sdk/src/model/post_tax_registrations_request_active_from.dart';
import 'package:stripe_dart_sdk/src/model/post_terminal_configurations_configuration_request_bbpos_wisepos_e.dart';
import 'package:stripe_dart_sdk/src/model/post_terminal_configurations_configuration_request_reboot_window.dart';
import 'package:stripe_dart_sdk/src/model/post_terminal_configurations_configuration_request_stripe_s700.dart';
import 'package:stripe_dart_sdk/src/model/post_terminal_configurations_configuration_request_verifone_p400.dart';
import 'package:stripe_dart_sdk/src/model/post_terminal_configurations_request_offline.dart';
import 'package:stripe_dart_sdk/src/model/post_terminal_configurations_request_tipping.dart';
import 'package:stripe_dart_sdk/src/model/post_terminal_configurations_request_wifi.dart';
import 'package:stripe_dart_sdk/src/model/post_terminal_locations_location_request_configuration_overrides.dart';
import 'package:stripe_dart_sdk/src/model/post_terminal_locations_location_request_display_name.dart';
import 'package:stripe_dart_sdk/src/model/post_terminal_readers_reader_request_label.dart';
import 'package:stripe_dart_sdk/src/model/post_tokens_request_card.dart';
import 'package:stripe_dart_sdk/src/model/post_treasury_financial_accounts_request_nickname.dart';
import 'package:stripe_dart_sdk/src/model/post_webhook_endpoints_request_description.dart';
import 'package:stripe_dart_sdk/src/model/preferences_list_param.dart';
import 'package:stripe_dart_sdk/src/model/preferences_param.dart';
import 'package:stripe_dart_sdk/src/model/price.dart';
import 'package:stripe_dart_sdk/src/model/price_data_without_product_with_metadata.dart';
import 'package:stripe_dart_sdk/src/model/price_list.dart';
import 'package:stripe_dart_sdk/src/model/pricing_param.dart';
import 'package:stripe_dart_sdk/src/model/process_config.dart';
import 'package:stripe_dart_sdk/src/model/process_setup_config.dart';
import 'package:stripe_dart_sdk/src/model/product.dart';
import 'package:stripe_dart_sdk/src/model/product_feature.dart';
import 'package:stripe_dart_sdk/src/model/product_list.dart';
import 'package:stripe_dart_sdk/src/model/promotion_code.dart';
import 'package:stripe_dart_sdk/src/model/promotion_codes_resource_promotion_code_list.dart';
import 'package:stripe_dart_sdk/src/model/provided_details_param.dart';
import 'package:stripe_dart_sdk/src/model/purchase_details_specs.dart';
import 'package:stripe_dart_sdk/src/model/quote.dart';
import 'package:stripe_dart_sdk/src/model/quote_param.dart';
import 'package:stripe_dart_sdk/src/model/quotes_resource_list_line_items.dart';
import 'package:stripe_dart_sdk/src/model/quotes_resource_quote_list.dart';
import 'package:stripe_dart_sdk/src/model/radar_early_fraud_warning.dart';
import 'package:stripe_dart_sdk/src/model/radar_early_fraud_warning_list.dart';
import 'package:stripe_dart_sdk/src/model/radar_list_list_item_list.dart';
import 'package:stripe_dart_sdk/src/model/radar_list_list_list.dart';
import 'package:stripe_dart_sdk/src/model/radar_options_with_hidden_options.dart';
import 'package:stripe_dart_sdk/src/model/radar_options_with_hidden_options2.dart';
import 'package:stripe_dart_sdk/src/model/radar_review_list.dart';
import 'package:stripe_dart_sdk/src/model/radar_value_list.dart';
import 'package:stripe_dart_sdk/src/model/radar_value_list_item.dart';
import 'package:stripe_dart_sdk/src/model/reboot_window.dart';
import 'package:stripe_dart_sdk/src/model/receiver_params.dart';
import 'package:stripe_dart_sdk/src/model/recipient_shipping_with_optional_fields_address.dart';
import 'package:stripe_dart_sdk/src/model/recipient_shipping_with_optional_fields_address2.dart';
import 'package:stripe_dart_sdk/src/model/recurring1.dart';
import 'package:stripe_dart_sdk/src/model/recurring_price_data1.dart';
import 'package:stripe_dart_sdk/src/model/recurring_price_data2.dart';
import 'package:stripe_dart_sdk/src/model/redirect_params.dart';
import 'package:stripe_dart_sdk/src/model/refund.dart';
import 'package:stripe_dart_sdk/src/model/refund_list.dart';
import 'package:stripe_dart_sdk/src/model/refund_payment_config.dart';
import 'package:stripe_dart_sdk/src/model/rejection_reasons_param.dart';
import 'package:stripe_dart_sdk/src/model/related_person_param.dart';
import 'package:stripe_dart_sdk/src/model/relationship_specs.dart';
import 'package:stripe_dart_sdk/src/model/rendering_param.dart';
import 'package:stripe_dart_sdk/src/model/reporting_report_run.dart';
import 'package:stripe_dart_sdk/src/model/reporting_report_type.dart';
import 'package:stripe_dart_sdk/src/model/request_param.dart';
import 'package:stripe_dart_sdk/src/model/restrictions_params.dart';
import 'package:stripe_dart_sdk/src/model/restrictions_params2.dart';
import 'package:stripe_dart_sdk/src/model/restrictions_params3.dart';
import 'package:stripe_dart_sdk/src/model/returned_details_params.dart';
import 'package:stripe_dart_sdk/src/model/returned_details_params1.dart';
import 'package:stripe_dart_sdk/src/model/review.dart';
import 'package:stripe_dart_sdk/src/model/run_parameter_specs.dart';
import 'package:stripe_dart_sdk/src/model/saved_payment_method_options_param.dart';
import 'package:stripe_dart_sdk/src/model/schedule_details_params.dart';
import 'package:stripe_dart_sdk/src/model/scheduled_query_run.dart';
import 'package:stripe_dart_sdk/src/model/scope_param.dart';
import 'package:stripe_dart_sdk/src/model/scope_param1.dart';
import 'package:stripe_dart_sdk/src/model/search_result.dart';
import 'package:stripe_dart_sdk/src/model/search_result1.dart';
import 'package:stripe_dart_sdk/src/model/search_result2.dart';
import 'package:stripe_dart_sdk/src/model/search_result3.dart';
import 'package:stripe_dart_sdk/src/model/search_result4.dart';
import 'package:stripe_dart_sdk/src/model/search_result5.dart';
import 'package:stripe_dart_sdk/src/model/search_result6.dart';
import 'package:stripe_dart_sdk/src/model/secret_service_resource_secret_list.dart';
import 'package:stripe_dart_sdk/src/model/session_options_param.dart';
import 'package:stripe_dart_sdk/src/model/settings_specs.dart';
import 'package:stripe_dart_sdk/src/model/settings_specs_update.dart';
import 'package:stripe_dart_sdk/src/model/setup_intent.dart';
import 'package:stripe_dart_sdk/src/model/setup_intent_data_param.dart';
import 'package:stripe_dart_sdk/src/model/setup_intent_single_use_params.dart';
import 'package:stripe_dart_sdk/src/model/shallow_order_specs.dart';
import 'package:stripe_dart_sdk/src/model/shared_tax_create_param.dart';
import 'package:stripe_dart_sdk/src/model/shared_tax_update_param.dart';
import 'package:stripe_dart_sdk/src/model/ship_from_details.dart';
import 'package:stripe_dart_sdk/src/model/shipping_address_collection_params.dart';
import 'package:stripe_dart_sdk/src/model/shipping_address_collection_params1.dart';
import 'package:stripe_dart_sdk/src/model/shipping_cost.dart';
import 'package:stripe_dart_sdk/src/model/shipping_cost2.dart';
import 'package:stripe_dart_sdk/src/model/shipping_option_params.dart';
import 'package:stripe_dart_sdk/src/model/shipping_option_params1.dart';
import 'package:stripe_dart_sdk/src/model/shipping_rate.dart';
import 'package:stripe_dart_sdk/src/model/shipping_resources_shipping_rate_list.dart';
import 'package:stripe_dart_sdk/src/model/shipping_specs.dart';
import 'package:stripe_dart_sdk/src/model/shipping_specs1.dart';
import 'package:stripe_dart_sdk/src/model/sigma_scheduled_query_run_list.dart';
import 'package:stripe_dart_sdk/src/model/sigma_sigma_api_query.dart';
import 'package:stripe_dart_sdk/src/model/source_mandate_notification.dart';
import 'package:stripe_dart_sdk/src/model/source_params.dart';
import 'package:stripe_dart_sdk/src/model/source_transaction.dart';
import 'package:stripe_dart_sdk/src/model/status_transition_timestamp_specs.dart';
import 'package:stripe_dart_sdk/src/model/stripe_s700.dart';
import 'package:stripe_dart_sdk/src/model/subscription.dart';
import 'package:stripe_dart_sdk/src/model/subscription_data_create_params.dart';
import 'package:stripe_dart_sdk/src/model/subscription_data_params.dart';
import 'package:stripe_dart_sdk/src/model/subscription_data_params1.dart';
import 'package:stripe_dart_sdk/src/model/subscription_data_update_params.dart';
import 'package:stripe_dart_sdk/src/model/subscription_data_update_params1.dart';
import 'package:stripe_dart_sdk/src/model/subscription_details_params.dart';
import 'package:stripe_dart_sdk/src/model/subscription_item.dart';
import 'package:stripe_dart_sdk/src/model/subscription_item_create_params.dart';
import 'package:stripe_dart_sdk/src/model/subscription_item_update_params.dart';
import 'package:stripe_dart_sdk/src/model/subscription_list.dart';
import 'package:stripe_dart_sdk/src/model/subscription_schedule.dart';
import 'package:stripe_dart_sdk/src/model/subscription_schedules_resource_schedule_list.dart';
import 'package:stripe_dart_sdk/src/model/subscriptions_items_subscription_item_list.dart';
import 'package:stripe_dart_sdk/src/model/subscriptions_subscription_list.dart';
import 'package:stripe_dart_sdk/src/model/tax_calculation.dart';
import 'package:stripe_dart_sdk/src/model/tax_code.dart';
import 'package:stripe_dart_sdk/src/model/tax_id.dart';
import 'package:stripe_dart_sdk/src/model/tax_id_collection_params.dart';
import 'package:stripe_dart_sdk/src/model/tax_ids_list.dart';
import 'package:stripe_dart_sdk/src/model/tax_product_registrations_resource_tax_registration_list.dart';
import 'package:stripe_dart_sdk/src/model/tax_product_resource_tax_calculation_line_item_list.dart';
import 'package:stripe_dart_sdk/src/model/tax_product_resource_tax_code_list.dart';
import 'package:stripe_dart_sdk/src/model/tax_product_resource_tax_transaction_line_item_list.dart';
import 'package:stripe_dart_sdk/src/model/tax_rate.dart';
import 'package:stripe_dart_sdk/src/model/tax_rates_list.dart';
import 'package:stripe_dart_sdk/src/model/tax_registration.dart';
import 'package:stripe_dart_sdk/src/model/tax_settings.dart';
import 'package:stripe_dart_sdk/src/model/tax_transaction.dart';
import 'package:stripe_dart_sdk/src/model/terminal_configuration.dart';
import 'package:stripe_dart_sdk/src/model/terminal_configuration_configuration_list.dart';
import 'package:stripe_dart_sdk/src/model/terminal_connection_token.dart';
import 'package:stripe_dart_sdk/src/model/terminal_location.dart';
import 'package:stripe_dart_sdk/src/model/terminal_location_location_list.dart';
import 'package:stripe_dart_sdk/src/model/terminal_reader.dart';
import 'package:stripe_dart_sdk/src/model/terminal_reader_retrieve_reader.dart';
import 'package:stripe_dart_sdk/src/model/test_helpers_test_clock.dart';
import 'package:stripe_dart_sdk/src/model/test_payment_method_options_param.dart';
import 'package:stripe_dart_sdk/src/model/thresholds_resource_alert_list.dart';
import 'package:stripe_dart_sdk/src/model/tier.dart';
import 'package:stripe_dart_sdk/src/model/token.dart';
import 'package:stripe_dart_sdk/src/model/token_create_bank_account.dart';
import 'package:stripe_dart_sdk/src/model/topup.dart';
import 'package:stripe_dart_sdk/src/model/topup_list.dart';
import 'package:stripe_dart_sdk/src/model/tos_acceptance_specs.dart';
import 'package:stripe_dart_sdk/src/model/tracking_details_params.dart';
import 'package:stripe_dart_sdk/src/model/transaction_line_item_reversal.dart';
import 'package:stripe_dart_sdk/src/model/transaction_refresh_params.dart';
import 'package:stripe_dart_sdk/src/model/transaction_shipping_cost_reversal.dart';
import 'package:stripe_dart_sdk/src/model/transfer.dart';
import 'package:stripe_dart_sdk/src/model/transfer_data_capture_params.dart';
import 'package:stripe_dart_sdk/src/model/transfer_data_creation_params.dart';
import 'package:stripe_dart_sdk/src/model/transfer_data_params1.dart';
import 'package:stripe_dart_sdk/src/model/transfer_data_specs.dart';
import 'package:stripe_dart_sdk/src/model/transfer_data_specs1.dart';
import 'package:stripe_dart_sdk/src/model/transfer_data_specs3.dart';
import 'package:stripe_dart_sdk/src/model/transfer_data_specs4.dart';
import 'package:stripe_dart_sdk/src/model/transfer_data_update_params.dart';
import 'package:stripe_dart_sdk/src/model/transfer_data_update_params1.dart';
import 'package:stripe_dart_sdk/src/model/transfer_list.dart';
import 'package:stripe_dart_sdk/src/model/transfer_reversal.dart';
import 'package:stripe_dart_sdk/src/model/transfer_reversal_list.dart';
import 'package:stripe_dart_sdk/src/model/transform_usage_param.dart';
import 'package:stripe_dart_sdk/src/model/treasury_credit_reversal.dart';
import 'package:stripe_dart_sdk/src/model/treasury_debit_reversal.dart';
import 'package:stripe_dart_sdk/src/model/treasury_financial_account.dart';
import 'package:stripe_dart_sdk/src/model/treasury_financial_account_features.dart';
import 'package:stripe_dart_sdk/src/model/treasury_financial_accounts_resource_financial_account_list.dart';
import 'package:stripe_dart_sdk/src/model/treasury_inbound_transfer.dart';
import 'package:stripe_dart_sdk/src/model/treasury_inbound_transfers_resource_inbound_transfer_list.dart';
import 'package:stripe_dart_sdk/src/model/treasury_outbound_payment.dart';
import 'package:stripe_dart_sdk/src/model/treasury_outbound_payments_resource_outbound_payment_list.dart';
import 'package:stripe_dart_sdk/src/model/treasury_outbound_transfer.dart';
import 'package:stripe_dart_sdk/src/model/treasury_outbound_transfers_resource_outbound_transfer_list.dart';
import 'package:stripe_dart_sdk/src/model/treasury_param.dart';
import 'package:stripe_dart_sdk/src/model/treasury_received_credit.dart';
import 'package:stripe_dart_sdk/src/model/treasury_received_credits_resource_credit_reversal_list.dart';
import 'package:stripe_dart_sdk/src/model/treasury_received_credits_resource_received_credit_list.dart';
import 'package:stripe_dart_sdk/src/model/treasury_received_debit.dart';
import 'package:stripe_dart_sdk/src/model/treasury_received_debits_resource_debit_reversal_list.dart';
import 'package:stripe_dart_sdk/src/model/treasury_received_debits_resource_received_debit_list.dart';
import 'package:stripe_dart_sdk/src/model/treasury_transaction.dart';
import 'package:stripe_dart_sdk/src/model/treasury_transaction_entry.dart';
import 'package:stripe_dart_sdk/src/model/treasury_transactions_resource_transaction_entry_list.dart';
import 'package:stripe_dart_sdk/src/model/treasury_transactions_resource_transaction_list.dart';
import 'package:stripe_dart_sdk/src/model/trial_settings_config1.dart';
import 'package:stripe_dart_sdk/src/model/update_api_param.dart';
import 'package:stripe_dart_sdk/src/model/update_param.dart';
import 'package:stripe_dart_sdk/src/model/us_cfpb_data_specs.dart';
import 'package:stripe_dart_sdk/src/model/usage_threshold_config.dart';
import 'package:stripe_dart_sdk/src/model/verification_data_specs.dart';
import 'package:stripe_dart_sdk/src/model/verifone_p400.dart';
import 'package:stripe_dart_sdk/src/model/wallet_options_param.dart';
import 'package:stripe_dart_sdk/src/model/webhook_endpoint.dart';

class DefaultApi {

  final Dio _dio;

  final Serializers _serializers;

  const DefaultApi(this._dio, this._serializers);

  /// Delete an account
  /// &lt;p&gt;With &lt;a href&#x3D;\&quot;/connect\&quot;&gt;Connect&lt;/a&gt;, you can delete accounts you manage.&lt;/p&gt;  &lt;p&gt;Test-mode accounts can be deleted at any time.&lt;/p&gt;  &lt;p&gt;Live-mode accounts that have access to the standard dashboard and Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. All other Live-mode accounts, can be deleted when all &lt;a href&#x3D;\&quot;/api/balance/balance_object\&quot;&gt;balances&lt;/a&gt; are zero.&lt;/p&gt;  &lt;p&gt;If you want to delete your own account, use the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/settings/account\&quot;&gt;account information tab in your account settings&lt;/a&gt; instead.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedAccount>> deleteAccountsAccount({ 
    required String account,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedAccount),
      ) as DeletedAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete an external account
  /// &lt;p&gt;Delete a specified external account for a given account.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [id] - Unique identifier for the external account to be deleted.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedExternalAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedExternalAccount>> deleteAccountsAccountBankAccountsId({ 
    required String account,
    required String id,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/bank_accounts/{id}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedExternalAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedExternalAccount),
      ) as DeletedExternalAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedExternalAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete an external account
  /// &lt;p&gt;Delete a specified external account for a given account.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [id] - Unique identifier for the external account to be deleted.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedExternalAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedExternalAccount>> deleteAccountsAccountExternalAccountsId({ 
    required String account,
    required String id,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/external_accounts/{id}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedExternalAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedExternalAccount),
      ) as DeletedExternalAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedExternalAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a person
  /// &lt;p&gt;Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the &lt;code&gt;account_opener&lt;/code&gt;. If your integration is using the &lt;code&gt;executive&lt;/code&gt; parameter, you cannot delete the only verified &lt;code&gt;executive&lt;/code&gt; on file.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [person] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedPerson] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedPerson>> deleteAccountsAccountPeoplePerson({ 
    required String account,
    required String person,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/people/{person}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString()).replaceAll('{' r'person' '}', encodeQueryParameter(_serializers, person, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedPerson? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedPerson),
      ) as DeletedPerson;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedPerson>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a person
  /// &lt;p&gt;Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the &lt;code&gt;account_opener&lt;/code&gt;. If your integration is using the &lt;code&gt;executive&lt;/code&gt; parameter, you cannot delete the only verified &lt;code&gt;executive&lt;/code&gt; on file.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [person] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedPerson] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedPerson>> deleteAccountsAccountPersonsPerson({ 
    required String account,
    required String person,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/persons/{person}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString()).replaceAll('{' r'person' '}', encodeQueryParameter(_serializers, person, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedPerson? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedPerson),
      ) as DeletedPerson;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedPerson>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// deleteApplePayDomainsDomain
  /// &lt;p&gt;Delete an apple pay domain.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [domain] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedApplePayDomain] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedApplePayDomain>> deleteApplePayDomainsDomain({ 
    required String domain,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/apple_pay/domains/{domain}'.replaceAll('{' r'domain' '}', encodeQueryParameter(_serializers, domain, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedApplePayDomain? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedApplePayDomain),
      ) as DeletedApplePayDomain;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedApplePayDomain>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a coupon
  /// &lt;p&gt;You can delete coupons via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/coupons\&quot;&gt;coupon management&lt;/a&gt; page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [coupon] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedCoupon] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedCoupon>> deleteCouponsCoupon({ 
    required String coupon,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/coupons/{coupon}'.replaceAll('{' r'coupon' '}', encodeQueryParameter(_serializers, coupon, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedCoupon? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedCoupon),
      ) as DeletedCoupon;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedCoupon>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a customer
  /// &lt;p&gt;Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedCustomer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedCustomer>> deleteCustomersCustomer({ 
    required String customer,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedCustomer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedCustomer),
      ) as DeletedCustomer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedCustomer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a customer source
  /// &lt;p&gt;Delete a specified source for a given customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeleteCustomersCustomerBankAccountsId200Response] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeleteCustomersCustomerBankAccountsId200Response>> deleteCustomersCustomerBankAccountsId({ 
    required String customer,
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/bank_accounts/{id}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeleteCustomersCustomerBankAccountsId200Response? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeleteCustomersCustomerBankAccountsId200Response),
      ) as DeleteCustomersCustomerBankAccountsId200Response;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeleteCustomersCustomerBankAccountsId200Response>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a customer source
  /// &lt;p&gt;Delete a specified source for a given customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeleteCustomersCustomerBankAccountsId200Response] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeleteCustomersCustomerBankAccountsId200Response>> deleteCustomersCustomerCardsId({ 
    required String customer,
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/cards/{id}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeleteCustomersCustomerBankAccountsId200Response? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeleteCustomersCustomerBankAccountsId200Response),
      ) as DeleteCustomersCustomerBankAccountsId200Response;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeleteCustomersCustomerBankAccountsId200Response>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a customer discount
  /// &lt;p&gt;Removes the currently applied discount on a customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedDiscount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedDiscount>> deleteCustomersCustomerDiscount({ 
    required String customer,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/discount'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedDiscount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedDiscount),
      ) as DeletedDiscount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedDiscount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a customer source
  /// &lt;p&gt;Delete a specified source for a given customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeleteCustomersCustomerBankAccountsId200Response] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeleteCustomersCustomerBankAccountsId200Response>> deleteCustomersCustomerSourcesId({ 
    required String customer,
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/sources/{id}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeleteCustomersCustomerBankAccountsId200Response? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeleteCustomersCustomerBankAccountsId200Response),
      ) as DeleteCustomersCustomerBankAccountsId200Response;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeleteCustomersCustomerBankAccountsId200Response>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Cancel a subscription
  /// &lt;p&gt;Cancels a customer’s subscription. If you set the &lt;code&gt;at_period_end&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt;, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default &lt;code&gt;false&lt;/code&gt; value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.&lt;/p&gt;  &lt;p&gt;Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually &lt;a href&#x3D;\&quot;#delete_invoiceitem\&quot;&gt;deleted&lt;/a&gt;. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.&lt;/p&gt;  &lt;p&gt;By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [subscriptionExposedId] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [invoiceNow] - Can be set to `true` if `at_period_end` is not set to `true`. Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items.
  /// * [prorate] - Can be set to `true` if `at_period_end` is not set to `true`. Will generate a proration invoice item that credits remaining unused time until the subscription period end.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Subscription] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Subscription>> deleteCustomersCustomerSubscriptionsSubscriptionExposedId({ 
    required String customer,
    required String subscriptionExposedId,
    BuiltList<String>? expand,
    bool? invoiceNow,
    bool? prorate,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/subscriptions/{subscription_exposed_id}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'subscription_exposed_id' '}', encodeQueryParameter(_serializers, subscriptionExposedId, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (invoiceNow != null) r'invoice_now': encodeQueryParameter(_serializers, invoiceNow, const FullType(bool)),
        if (prorate != null) r'prorate': encodeQueryParameter(_serializers, prorate, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Subscription? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Subscription),
      ) as Subscription;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Subscription>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a customer discount
  /// &lt;p&gt;Removes the currently applied discount on a customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [subscriptionExposedId] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedDiscount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedDiscount>> deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount({ 
    required String customer,
    required String subscriptionExposedId,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'subscription_exposed_id' '}', encodeQueryParameter(_serializers, subscriptionExposedId, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedDiscount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedDiscount),
      ) as DeletedDiscount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedDiscount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a Customer tax ID
  /// &lt;p&gt;Deletes an existing &lt;code&gt;tax_id&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [id] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedTaxId] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedTaxId>> deleteCustomersCustomerTaxIdsId({ 
    required String customer,
    required String id,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/tax_ids/{id}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedTaxId? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedTaxId),
      ) as DeletedTaxId;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedTaxId>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Immediately invalidate an ephemeral key
  /// &lt;p&gt;Invalidates a short-lived API key for a given resource.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [key] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [EphemeralKey] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<EphemeralKey>> deleteEphemeralKeysKey({ 
    required String key,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/ephemeral_keys/{key}'.replaceAll('{' r'key' '}', encodeQueryParameter(_serializers, key, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    EphemeralKey? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(EphemeralKey),
      ) as EphemeralKey;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<EphemeralKey>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete an invoice item
  /// &lt;p&gt;Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoiceitem] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedInvoiceitem] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedInvoiceitem>> deleteInvoiceitemsInvoiceitem({ 
    required String invoiceitem,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoiceitems/{invoiceitem}'.replaceAll('{' r'invoiceitem' '}', encodeQueryParameter(_serializers, invoiceitem, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedInvoiceitem? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedInvoiceitem),
      ) as DeletedInvoiceitem;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedInvoiceitem>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a draft invoice
  /// &lt;p&gt;Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be &lt;a href&#x3D;\&quot;#void_invoice\&quot;&gt;voided&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoice] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedInvoice] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedInvoice>> deleteInvoicesInvoice({ 
    required String invoice,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices/{invoice}'.replaceAll('{' r'invoice' '}', encodeQueryParameter(_serializers, invoice, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedInvoice? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedInvoice),
      ) as DeletedInvoice;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedInvoice>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a plan
  /// &lt;p&gt;Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [plan] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedPlan] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedPlan>> deletePlansPlan({ 
    required String plan,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/plans/{plan}'.replaceAll('{' r'plan' '}', encodeQueryParameter(_serializers, plan, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedPlan? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedPlan),
      ) as DeletedPlan;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedPlan>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a product
  /// &lt;p&gt;Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with &lt;code&gt;type&#x3D;good&lt;/code&gt; is only possible if it has no SKUs associated with it.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedProduct] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedProduct>> deleteProductsId({ 
    required String id,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/products/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedProduct? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedProduct),
      ) as DeletedProduct;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedProduct>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Remove a feature from a product
  /// &lt;p&gt;Deletes the feature attachment to a product&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [product] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedProductFeature] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedProductFeature>> deleteProductsProductFeaturesId({ 
    required String id,
    required String product,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/products/{product}/features/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString()).replaceAll('{' r'product' '}', encodeQueryParameter(_serializers, product, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedProductFeature? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedProductFeature),
      ) as DeletedProductFeature;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedProductFeature>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a value list item
  /// &lt;p&gt;Deletes a &lt;code&gt;ValueListItem&lt;/code&gt; object, removing it from its parent value list.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [item] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedRadarValueListItem] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedRadarValueListItem>> deleteRadarValueListItemsItem({ 
    required String item,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/radar/value_list_items/{item}'.replaceAll('{' r'item' '}', encodeQueryParameter(_serializers, item, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedRadarValueListItem? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedRadarValueListItem),
      ) as DeletedRadarValueListItem;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedRadarValueListItem>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a value list
  /// &lt;p&gt;Deletes a &lt;code&gt;ValueList&lt;/code&gt; object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [valueList] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedRadarValueList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedRadarValueList>> deleteRadarValueListsValueList({ 
    required String valueList,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/radar/value_lists/{value_list}'.replaceAll('{' r'value_list' '}', encodeQueryParameter(_serializers, valueList, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedRadarValueList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedRadarValueList),
      ) as DeletedRadarValueList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedRadarValueList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a subscription item
  /// &lt;p&gt;Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [item] 
  /// * [clearUsage] - Delete all usage for the given subscription item. Allowed only when the current plan's `usage_type` is `metered`.
  /// * [prorationBehavior] - Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`.
  /// * [prorationDate] - If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedSubscriptionItem] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedSubscriptionItem>> deleteSubscriptionItemsItem({ 
    required String item,
    bool? clearUsage,
    String? prorationBehavior,
    int? prorationDate,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscription_items/{item}'.replaceAll('{' r'item' '}', encodeQueryParameter(_serializers, item, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (clearUsage != null) r'clear_usage': encodeQueryParameter(_serializers, clearUsage, const FullType(bool)),
        if (prorationBehavior != null) r'proration_behavior': encodeQueryParameter(_serializers, prorationBehavior, const FullType(String)),
        if (prorationDate != null) r'proration_date': encodeQueryParameter(_serializers, prorationDate, const FullType(int)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedSubscriptionItem? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedSubscriptionItem),
      ) as DeletedSubscriptionItem;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedSubscriptionItem>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Cancel a subscription
  /// &lt;p&gt;Cancels a customer’s subscription immediately. The customer won’t be charged again for the subscription. After it’s canceled, you can no longer update the subscription or its &lt;a href&#x3D;\&quot;/metadata\&quot;&gt;metadata&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Any pending invoice items that you’ve created are still charged at the end of the period, unless manually &lt;a href&#x3D;\&quot;#delete_invoiceitem\&quot;&gt;deleted&lt;/a&gt;. If you’ve set the subscription to cancel at the end of the period, any pending prorations are also left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations are removed if &lt;code&gt;invoice_now&lt;/code&gt; and &lt;code&gt;prorate&lt;/code&gt; are both set to true.&lt;/p&gt;  &lt;p&gt;By default, upon subscription cancellation, Stripe stops automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [subscriptionExposedId] 
  /// * [cancellationDetails] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [invoiceNow] - Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items. Defaults to `false`.
  /// * [prorate] - Will generate a proration invoice item that credits remaining unused time until the subscription period end. Defaults to `false`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Subscription] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Subscription>> deleteSubscriptionsSubscriptionExposedId({ 
    required String subscriptionExposedId,
    CancellationDetailsParam? cancellationDetails,
    BuiltList<String>? expand,
    bool? invoiceNow,
    bool? prorate,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscriptions/{subscription_exposed_id}'.replaceAll('{' r'subscription_exposed_id' '}', encodeQueryParameter(_serializers, subscriptionExposedId, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (cancellationDetails != null) r'cancellation_details': encodeQueryParameter(_serializers, cancellationDetails, const FullType(CancellationDetailsParam)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (invoiceNow != null) r'invoice_now': encodeQueryParameter(_serializers, invoiceNow, const FullType(bool)),
        if (prorate != null) r'prorate': encodeQueryParameter(_serializers, prorate, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Subscription? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Subscription),
      ) as Subscription;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Subscription>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a subscription discount
  /// &lt;p&gt;Removes the currently applied discount on a subscription.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [subscriptionExposedId] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedDiscount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedDiscount>> deleteSubscriptionsSubscriptionExposedIdDiscount({ 
    required String subscriptionExposedId,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscriptions/{subscription_exposed_id}/discount'.replaceAll('{' r'subscription_exposed_id' '}', encodeQueryParameter(_serializers, subscriptionExposedId, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedDiscount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedDiscount),
      ) as DeletedDiscount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedDiscount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a tax ID
  /// &lt;p&gt;Deletes an existing account or customer &lt;code&gt;tax_id&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedTaxId] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedTaxId>> deleteTaxIdsId({ 
    required String id,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax_ids/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedTaxId? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedTaxId),
      ) as DeletedTaxId;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedTaxId>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a Configuration
  /// &lt;p&gt;Deletes a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [configuration] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedTerminalConfiguration] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedTerminalConfiguration>> deleteTerminalConfigurationsConfiguration({ 
    required String configuration,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/configurations/{configuration}'.replaceAll('{' r'configuration' '}', encodeQueryParameter(_serializers, configuration, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedTerminalConfiguration? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedTerminalConfiguration),
      ) as DeletedTerminalConfiguration;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedTerminalConfiguration>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a Location
  /// &lt;p&gt;Deletes a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [location] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedTerminalLocation] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedTerminalLocation>> deleteTerminalLocationsLocation({ 
    required String location,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/locations/{location}'.replaceAll('{' r'location' '}', encodeQueryParameter(_serializers, location, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedTerminalLocation? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedTerminalLocation),
      ) as DeletedTerminalLocation;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedTerminalLocation>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a Reader
  /// &lt;p&gt;Deletes a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [reader] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedTerminalReader] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedTerminalReader>> deleteTerminalReadersReader({ 
    required String reader,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/readers/{reader}'.replaceAll('{' r'reader' '}', encodeQueryParameter(_serializers, reader, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedTerminalReader? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedTerminalReader),
      ) as DeletedTerminalReader;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedTerminalReader>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a test clock
  /// &lt;p&gt;Deletes a test clock.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [testClock] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedTestHelpersTestClock] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedTestHelpersTestClock>> deleteTestHelpersTestClocksTestClock({ 
    required String testClock,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/test_clocks/{test_clock}'.replaceAll('{' r'test_clock' '}', encodeQueryParameter(_serializers, testClock, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedTestHelpersTestClock? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedTestHelpersTestClock),
      ) as DeletedTestHelpersTestClock;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedTestHelpersTestClock>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a webhook endpoint
  /// &lt;p&gt;You can also delete webhook endpoints via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/webhooks\&quot;&gt;webhook endpoint management&lt;/a&gt; page of the Stripe dashboard.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [webhookEndpoint] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DeletedWebhookEndpoint] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DeletedWebhookEndpoint>> deleteWebhookEndpointsWebhookEndpoint({ 
    required String webhookEndpoint,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/webhook_endpoints/{webhook_endpoint}'.replaceAll('{' r'webhook_endpoint' '}', encodeQueryParameter(_serializers, webhookEndpoint, const FullType(String)).toString());
    final _options = Options(
      method: r'DELETE',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DeletedWebhookEndpoint? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DeletedWebhookEndpoint),
      ) as DeletedWebhookEndpoint;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DeletedWebhookEndpoint>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve account
  /// &lt;p&gt;Retrieves the details of an account.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Account] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Account>> getAccount({ 
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/account';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Account? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Account),
      ) as Account;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Account>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all connected accounts
  /// &lt;p&gt;Returns a list of accounts connected to your platform via &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;. If you’re not a platform, the list is empty.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Only return connected accounts that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [AccountList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<AccountList>> getAccounts({ 
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    AccountList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(AccountList),
      ) as AccountList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<AccountList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve account
  /// &lt;p&gt;Retrieves the details of an account.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Account] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Account>> getAccountsAccount({ 
    required String account,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Account? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Account),
      ) as Account;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Account>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an external account
  /// &lt;p&gt;Retrieve a specified external account for a given account.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [id] - Unique identifier for the external account to be retrieved.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ExternalAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ExternalAccount>> getAccountsAccountBankAccountsId({ 
    required String account,
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/bank_accounts/{id}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ExternalAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ExternalAccount),
      ) as ExternalAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ExternalAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all account capabilities
  /// &lt;p&gt;Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ListAccountCapability] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ListAccountCapability>> getAccountsAccountCapabilities({ 
    required String account,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/capabilities'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ListAccountCapability? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ListAccountCapability),
      ) as ListAccountCapability;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ListAccountCapability>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an Account Capability
  /// &lt;p&gt;Retrieves information about the specified Account Capability.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [capability] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Capability] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Capability>> getAccountsAccountCapabilitiesCapability({ 
    required String account,
    required String capability,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/capabilities/{capability}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString()).replaceAll('{' r'capability' '}', encodeQueryParameter(_serializers, capability, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Capability? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Capability),
      ) as Capability;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Capability>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all external accounts
  /// &lt;p&gt;List external accounts for an account.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [object] - Filter external accounts according to a particular object type.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ExternalAccountList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ExternalAccountList>> getAccountsAccountExternalAccounts({ 
    required String account,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? object,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/external_accounts'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (object != null) r'object': encodeQueryParameter(_serializers, object, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ExternalAccountList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ExternalAccountList),
      ) as ExternalAccountList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ExternalAccountList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an external account
  /// &lt;p&gt;Retrieve a specified external account for a given account.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [id] - Unique identifier for the external account to be retrieved.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ExternalAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ExternalAccount>> getAccountsAccountExternalAccountsId({ 
    required String account,
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/external_accounts/{id}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ExternalAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ExternalAccount),
      ) as ExternalAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ExternalAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all persons
  /// &lt;p&gt;Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [relationship] - Filters on the list of people returned based on the person's relationship to the account's company.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PersonList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PersonList>> getAccountsAccountPeople({ 
    required String account,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    AllPeopleRelationshipSpecs? relationship,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/people'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (relationship != null) r'relationship': encodeQueryParameter(_serializers, relationship, const FullType(AllPeopleRelationshipSpecs)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PersonList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PersonList),
      ) as PersonList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PersonList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a person
  /// &lt;p&gt;Retrieves an existing person.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [person] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Person] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Person>> getAccountsAccountPeoplePerson({ 
    required String account,
    required String person,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/people/{person}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString()).replaceAll('{' r'person' '}', encodeQueryParameter(_serializers, person, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Person? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Person),
      ) as Person;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Person>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all persons
  /// &lt;p&gt;Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [relationship] - Filters on the list of people returned based on the person's relationship to the account's company.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PersonList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PersonList>> getAccountsAccountPersons({ 
    required String account,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    AllPeopleRelationshipSpecs? relationship,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/persons'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (relationship != null) r'relationship': encodeQueryParameter(_serializers, relationship, const FullType(AllPeopleRelationshipSpecs)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PersonList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PersonList),
      ) as PersonList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PersonList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a person
  /// &lt;p&gt;Retrieves an existing person.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [person] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Person] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Person>> getAccountsAccountPersonsPerson({ 
    required String account,
    required String person,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/persons/{person}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString()).replaceAll('{' r'person' '}', encodeQueryParameter(_serializers, person, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Person? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Person),
      ) as Person;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Person>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// getApplePayDomains
  /// &lt;p&gt;List apple pay domains.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [domainName] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ApplePayDomainList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ApplePayDomainList>> getApplePayDomains({ 
    String? domainName,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/apple_pay/domains';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (domainName != null) r'domain_name': encodeQueryParameter(_serializers, domainName, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ApplePayDomainList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ApplePayDomainList),
      ) as ApplePayDomainList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ApplePayDomainList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// getApplePayDomainsDomain
  /// &lt;p&gt;Retrieve an apple pay domain.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [domain] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ApplePayDomain] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ApplePayDomain>> getApplePayDomainsDomain({ 
    required String domain,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/apple_pay/domains/{domain}'.replaceAll('{' r'domain' '}', encodeQueryParameter(_serializers, domain, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ApplePayDomain? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ApplePayDomain),
      ) as ApplePayDomain;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ApplePayDomain>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all application fees
  /// &lt;p&gt;Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [charge] - Only return application fees for the charge specified by this charge ID.
  /// * [created] - Only return applications fees that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PlatformEarningList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PlatformEarningList>> getApplicationFees({ 
    String? charge,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/application_fees';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (charge != null) r'charge': encodeQueryParameter(_serializers, charge, const FullType(String)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PlatformEarningList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PlatformEarningList),
      ) as PlatformEarningList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PlatformEarningList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an application fee refund
  /// &lt;p&gt;By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [fee] 
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FeeRefund] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FeeRefund>> getApplicationFeesFeeRefundsId({ 
    required String fee,
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/application_fees/{fee}/refunds/{id}'.replaceAll('{' r'fee' '}', encodeQueryParameter(_serializers, fee, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FeeRefund? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FeeRefund),
      ) as FeeRefund;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FeeRefund>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an application fee
  /// &lt;p&gt;Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ApplicationFee] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ApplicationFee>> getApplicationFeesId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/application_fees/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ApplicationFee? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ApplicationFee),
      ) as ApplicationFee;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ApplicationFee>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all application fee refunds
  /// &lt;p&gt;You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional refunds.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FeeRefundList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FeeRefundList>> getApplicationFeesIdRefunds({ 
    required String id,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/application_fees/{id}/refunds'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FeeRefundList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FeeRefundList),
      ) as FeeRefundList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FeeRefundList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List secrets
  /// &lt;p&gt;List all secrets stored on the given scope.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [scope] - Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SecretServiceResourceSecretList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SecretServiceResourceSecretList>> getAppsSecrets({ 
    required ScopeParam scope,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/apps/secrets';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      r'scope': encodeQueryParameter(_serializers, scope, const FullType(ScopeParam)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SecretServiceResourceSecretList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SecretServiceResourceSecretList),
      ) as SecretServiceResourceSecretList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SecretServiceResourceSecretList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Find a Secret
  /// &lt;p&gt;Finds a secret in the secret store by name and scope.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [name] - A name for the secret that's unique within the scope.
  /// * [scope] - Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [AppsSecret] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<AppsSecret>> getAppsSecretsFind({ 
    required String name,
    required ScopeParam scope,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/apps/secrets/find';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
      r'scope': encodeQueryParameter(_serializers, scope, const FullType(ScopeParam)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    AppsSecret? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(AppsSecret),
      ) as AppsSecret;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<AppsSecret>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve balance
  /// &lt;p&gt;Retrieves the current account balance, based on the authentication that was used to make the request.  For a sample request, see &lt;a href&#x3D;\&quot;/docs/connect/account-balances#accounting-for-negative-balances\&quot;&gt;Accounting for negative balances&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Balance] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Balance>> getBalance({ 
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/balance';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Balance? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Balance),
      ) as Balance;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Balance>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all balance transactions
  /// &lt;p&gt;Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.&lt;/p&gt;  &lt;p&gt;Note that this endpoint was previously called “Balance history” and used the path &lt;code&gt;/v1/balance/history&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Only return transactions that were created during the given date interval.
  /// * [currency] - Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [payout] - For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID.
  /// * [source_] - Only returns the original transaction.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [type] - Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `payout_minimum_balance_hold`, `payout_minimum_balance_release`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `stripe_balance_payment_debit`, `stripe_balance_payment_debit_reversal`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BalanceTransactionsList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BalanceTransactionsList>> getBalanceHistory({ 
    GetAccountsCreatedParameter? created,
    String? currency,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? payout,
    String? source_,
    String? startingAfter,
    String? type,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/balance/history';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (payout != null) r'payout': encodeQueryParameter(_serializers, payout, const FullType(String)),
      if (source_ != null) r'source': encodeQueryParameter(_serializers, source_, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BalanceTransactionsList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BalanceTransactionsList),
      ) as BalanceTransactionsList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BalanceTransactionsList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a balance transaction
  /// &lt;p&gt;Retrieves the balance transaction with the given ID.&lt;/p&gt;  &lt;p&gt;Note that this endpoint previously used the path &lt;code&gt;/v1/balance/history/:id&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BalanceTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BalanceTransaction>> getBalanceHistoryId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/balance/history/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BalanceTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BalanceTransaction),
      ) as BalanceTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BalanceTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all balance transactions
  /// &lt;p&gt;Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.&lt;/p&gt;  &lt;p&gt;Note that this endpoint was previously called “Balance history” and used the path &lt;code&gt;/v1/balance/history&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Only return transactions that were created during the given date interval.
  /// * [currency] - Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [payout] - For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID.
  /// * [source_] - Only returns the original transaction.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [type] - Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `payout_minimum_balance_hold`, `payout_minimum_balance_release`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `stripe_balance_payment_debit`, `stripe_balance_payment_debit_reversal`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BalanceTransactionsList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BalanceTransactionsList>> getBalanceTransactions({ 
    GetAccountsCreatedParameter? created,
    String? currency,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? payout,
    String? source_,
    String? startingAfter,
    String? type,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/balance_transactions';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (payout != null) r'payout': encodeQueryParameter(_serializers, payout, const FullType(String)),
      if (source_ != null) r'source': encodeQueryParameter(_serializers, source_, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BalanceTransactionsList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BalanceTransactionsList),
      ) as BalanceTransactionsList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BalanceTransactionsList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a balance transaction
  /// &lt;p&gt;Retrieves the balance transaction with the given ID.&lt;/p&gt;  &lt;p&gt;Note that this endpoint previously used the path &lt;code&gt;/v1/balance/history/:id&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BalanceTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BalanceTransaction>> getBalanceTransactionsId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/balance_transactions/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BalanceTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BalanceTransaction),
      ) as BalanceTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BalanceTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List billing alerts
  /// &lt;p&gt;Lists billing active and inactive alerts&lt;/p&gt;
  ///
  /// Parameters:
  /// * [alertType] - Filter results to only include this type of alert.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [meter] - Filter results to only include alerts with the given meter.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ThresholdsResourceAlertList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ThresholdsResourceAlertList>> getBillingAlerts({ 
    String? alertType,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? meter,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/alerts';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (alertType != null) r'alert_type': encodeQueryParameter(_serializers, alertType, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (meter != null) r'meter': encodeQueryParameter(_serializers, meter, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ThresholdsResourceAlertList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ThresholdsResourceAlertList),
      ) as ThresholdsResourceAlertList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ThresholdsResourceAlertList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a billing alert
  /// &lt;p&gt;Retrieves a billing alert given an ID&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingAlert] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingAlert>> getBillingAlertsId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/alerts/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingAlert? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingAlert),
      ) as BillingAlert;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingAlert>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve the credit balance summary for a customer
  /// &lt;p&gt;Retrieves the credit balance summary for a customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] - The customer for which to fetch credit balance summary.
  /// * [filter] - The filter criteria for the credit balance summary.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingCreditBalanceSummary] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingCreditBalanceSummary>> getBillingCreditBalanceSummary({ 
    required String customer,
    required BalanceSummaryFilterParam filter,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/credit_balance_summary';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      r'filter': encodeQueryParameter(_serializers, filter, const FullType(BalanceSummaryFilterParam)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingCreditBalanceSummary? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingCreditBalanceSummary),
      ) as BillingCreditBalanceSummary;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingCreditBalanceSummary>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List credit balance transactions
  /// &lt;p&gt;Retrieve a list of credit balance transactions.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] - The customer for which to fetch credit balance transactions.
  /// * [creditGrant] - The credit grant for which to fetch credit balance transactions.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingCreditGrantsResourceBalanceTransactionList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingCreditGrantsResourceBalanceTransactionList>> getBillingCreditBalanceTransactions({ 
    required String customer,
    String? creditGrant,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/credit_balance_transactions';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (creditGrant != null) r'credit_grant': encodeQueryParameter(_serializers, creditGrant, const FullType(String)),
      r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingCreditGrantsResourceBalanceTransactionList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingCreditGrantsResourceBalanceTransactionList),
      ) as BillingCreditGrantsResourceBalanceTransactionList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingCreditGrantsResourceBalanceTransactionList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a credit balance transaction
  /// &lt;p&gt;Retrieves a credit balance transaction.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] - Unique identifier for the object.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingCreditBalanceTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingCreditBalanceTransaction>> getBillingCreditBalanceTransactionsId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/credit_balance_transactions/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingCreditBalanceTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingCreditBalanceTransaction),
      ) as BillingCreditBalanceTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingCreditBalanceTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List credit grants
  /// &lt;p&gt;Retrieve a list of credit grants.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] - Only return credit grants for this customer.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingCreditGrantsResourceCreditGrantList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingCreditGrantsResourceCreditGrantList>> getBillingCreditGrants({ 
    String? customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/credit_grants';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingCreditGrantsResourceCreditGrantList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingCreditGrantsResourceCreditGrantList),
      ) as BillingCreditGrantsResourceCreditGrantList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingCreditGrantsResourceCreditGrantList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a credit grant
  /// &lt;p&gt;Retrieves a credit grant.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] - Unique identifier for the object.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingCreditGrant] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingCreditGrant>> getBillingCreditGrantsId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/credit_grants/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingCreditGrant? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingCreditGrant),
      ) as BillingCreditGrant;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingCreditGrant>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List billing meters
  /// &lt;p&gt;Retrieve a list of billing meters.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Filter results to only include meters with the given status.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingMeterResourceBillingMeterList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingMeterResourceBillingMeterList>> getBillingMeters({ 
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/meters';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingMeterResourceBillingMeterList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingMeterResourceBillingMeterList),
      ) as BillingMeterResourceBillingMeterList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingMeterResourceBillingMeterList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a billing meter
  /// &lt;p&gt;Retrieves a billing meter given an ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] - Unique identifier for the object.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingMeter] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingMeter>> getBillingMetersId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/meters/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingMeter? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingMeter),
      ) as BillingMeter;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingMeter>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List billing meter event summaries
  /// &lt;p&gt;Retrieve a list of billing meter event summaries.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] - The customer for which to fetch event summaries.
  /// * [endTime] - The timestamp from when to stop aggregating meter events (exclusive). Must be aligned with minute boundaries.
  /// * [id] - Unique identifier for the object.
  /// * [startTime] - The timestamp from when to start aggregating meter events (inclusive). Must be aligned with minute boundaries.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [valueGroupingWindow] - Specifies what granularity to use when generating event summaries. If not specified, a single event summary would be returned for the specified time range. For hourly granularity, start and end times must align with hour boundaries (e.g., 00:00, 01:00, ..., 23:00). For daily granularity, start and end times must align with UTC day boundaries (00:00 UTC).
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingMeterResourceBillingMeterEventSummaryList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingMeterResourceBillingMeterEventSummaryList>> getBillingMetersIdEventSummaries({ 
    required String customer,
    required int endTime,
    required String id,
    required int startTime,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? valueGroupingWindow,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/meters/{id}/event_summaries'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      r'end_time': encodeQueryParameter(_serializers, endTime, const FullType(int)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      r'start_time': encodeQueryParameter(_serializers, startTime, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (valueGroupingWindow != null) r'value_grouping_window': encodeQueryParameter(_serializers, valueGroupingWindow, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingMeterResourceBillingMeterEventSummaryList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingMeterResourceBillingMeterEventSummaryList),
      ) as BillingMeterResourceBillingMeterEventSummaryList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingMeterResourceBillingMeterEventSummaryList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List portal configurations
  /// &lt;p&gt;Returns a list of configurations that describe the functionality of the customer portal.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [active] - Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations).
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [isDefault] - Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration).
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PortalPublicResourceConfigurationList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PortalPublicResourceConfigurationList>> getBillingPortalConfigurations({ 
    bool? active,
    String? endingBefore,
    BuiltList<String>? expand,
    bool? isDefault,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing_portal/configurations';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (isDefault != null) r'is_default': encodeQueryParameter(_serializers, isDefault, const FullType(bool)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PortalPublicResourceConfigurationList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PortalPublicResourceConfigurationList),
      ) as PortalPublicResourceConfigurationList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PortalPublicResourceConfigurationList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a portal configuration
  /// &lt;p&gt;Retrieves a configuration that describes the functionality of the customer portal.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [configuration] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingPortalConfiguration] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingPortalConfiguration>> getBillingPortalConfigurationsConfiguration({ 
    required String configuration,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing_portal/configurations/{configuration}'.replaceAll('{' r'configuration' '}', encodeQueryParameter(_serializers, configuration, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingPortalConfiguration? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingPortalConfiguration),
      ) as BillingPortalConfiguration;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingPortalConfiguration>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all charges
  /// &lt;p&gt;Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Only return charges that were created during the given date interval.
  /// * [customer] - Only return charges for the customer specified by this customer ID.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [paymentIntent] - Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [transferGroup] - Only return charges for this transfer group, limited to 100.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ChargeList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ChargeList>> getCharges({ 
    GetAccountsCreatedParameter? created,
    String? customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? paymentIntent,
    String? startingAfter,
    String? transferGroup,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/charges';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (paymentIntent != null) r'payment_intent': encodeQueryParameter(_serializers, paymentIntent, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (transferGroup != null) r'transfer_group': encodeQueryParameter(_serializers, transferGroup, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ChargeList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ChargeList),
      ) as ChargeList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ChargeList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a charge
  /// &lt;p&gt;Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [charge] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Charge] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Charge>> getChargesCharge({ 
    required String charge,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/charges/{charge}'.replaceAll('{' r'charge' '}', encodeQueryParameter(_serializers, charge, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Charge? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Charge),
      ) as Charge;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Charge>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// getChargesChargeDispute
  /// &lt;p&gt;Retrieve a dispute for a specified charge.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [charge] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Dispute] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Dispute>> getChargesChargeDispute({ 
    required String charge,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/charges/{charge}/dispute'.replaceAll('{' r'charge' '}', encodeQueryParameter(_serializers, charge, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Dispute? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Dispute),
      ) as Dispute;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Dispute>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all refunds
  /// &lt;p&gt;You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional refunds.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [charge] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [RefundList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<RefundList>> getChargesChargeRefunds({ 
    required String charge,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/charges/{charge}/refunds'.replaceAll('{' r'charge' '}', encodeQueryParameter(_serializers, charge, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    RefundList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(RefundList),
      ) as RefundList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<RefundList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// getChargesChargeRefundsRefund
  /// &lt;p&gt;Retrieves the details of an existing refund.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [charge] 
  /// * [refund] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Refund] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Refund>> getChargesChargeRefundsRefund({ 
    required String charge,
    required String refund,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/charges/{charge}/refunds/{refund}'.replaceAll('{' r'charge' '}', encodeQueryParameter(_serializers, charge, const FullType(String)).toString()).replaceAll('{' r'refund' '}', encodeQueryParameter(_serializers, refund, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Refund? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Refund),
      ) as Refund;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Refund>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Search charges
  /// &lt;p&gt;Search for charges you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [query] - The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for charges](https://stripe.com/docs/search#query-fields-for-charges).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [page] - A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SearchResult] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SearchResult>> getChargesSearch({ 
    required String query,
    BuiltList<String>? expand,
    int? limit,
    String? page,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/charges/search';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (page != null) r'page': encodeQueryParameter(_serializers, page, const FullType(String)),
      r'query': encodeQueryParameter(_serializers, query, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SearchResult? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SearchResult),
      ) as SearchResult;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SearchResult>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all Checkout Sessions
  /// &lt;p&gt;Returns a list of Checkout Sessions.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Only return Checkout Sessions that were created during the given date interval.
  /// * [customer] - Only return the Checkout Sessions for the Customer specified.
  /// * [customerDetails] - Only return the Checkout Sessions for the Customer details specified.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [paymentIntent] - Only return the Checkout Session for the PaymentIntent specified.
  /// * [paymentLink] - Only return the Checkout Sessions for the Payment Link specified.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Only return the Checkout Sessions matching the given status.
  /// * [subscription] - Only return the Checkout Session for the subscription specified.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentPagesCheckoutSessionList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentPagesCheckoutSessionList>> getCheckoutSessions({ 
    GetAccountsCreatedParameter? created,
    String? customer,
    CustomerDetailsParams? customerDetails,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? paymentIntent,
    String? paymentLink,
    String? startingAfter,
    String? status,
    String? subscription,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/checkout/sessions';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      if (customerDetails != null) r'customer_details': encodeQueryParameter(_serializers, customerDetails, const FullType(CustomerDetailsParams)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (paymentIntent != null) r'payment_intent': encodeQueryParameter(_serializers, paymentIntent, const FullType(String)),
      if (paymentLink != null) r'payment_link': encodeQueryParameter(_serializers, paymentLink, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
      if (subscription != null) r'subscription': encodeQueryParameter(_serializers, subscription, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentPagesCheckoutSessionList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentPagesCheckoutSessionList),
      ) as PaymentPagesCheckoutSessionList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentPagesCheckoutSessionList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a Checkout Session
  /// &lt;p&gt;Retrieves a Checkout Session object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [session] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CheckoutSession] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CheckoutSession>> getCheckoutSessionsSession({ 
    required String session,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/checkout/sessions/{session}'.replaceAll('{' r'session' '}', encodeQueryParameter(_serializers, session, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CheckoutSession? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CheckoutSession),
      ) as CheckoutSession;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CheckoutSession>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a Checkout Session&#39;s line items
  /// &lt;p&gt;When retrieving a Checkout Session, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [session] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentPagesCheckoutSessionListLineItems] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentPagesCheckoutSessionListLineItems>> getCheckoutSessionsSessionLineItems({ 
    required String session,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/checkout/sessions/{session}/line_items'.replaceAll('{' r'session' '}', encodeQueryParameter(_serializers, session, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentPagesCheckoutSessionListLineItems? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentPagesCheckoutSessionListLineItems),
      ) as PaymentPagesCheckoutSessionListLineItems;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentPagesCheckoutSessionListLineItems>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List orders
  /// &lt;p&gt;Lists all Climate order objects. The orders are returned sorted by creation date, with the most recently created orders appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ClimateRemovalsOrdersList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ClimateRemovalsOrdersList>> getClimateOrders({ 
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/climate/orders';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ClimateRemovalsOrdersList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ClimateRemovalsOrdersList),
      ) as ClimateRemovalsOrdersList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ClimateRemovalsOrdersList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an order
  /// &lt;p&gt;Retrieves the details of a Climate order object with the given ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [order] - Unique identifier of the order.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ClimateOrder] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ClimateOrder>> getClimateOrdersOrder({ 
    required String order,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/climate/orders/{order}'.replaceAll('{' r'order' '}', encodeQueryParameter(_serializers, order, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ClimateOrder? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ClimateOrder),
      ) as ClimateOrder;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ClimateOrder>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List products
  /// &lt;p&gt;Lists all available Climate product objects.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ClimateRemovalsProductsList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ClimateRemovalsProductsList>> getClimateProducts({ 
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/climate/products';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ClimateRemovalsProductsList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ClimateRemovalsProductsList),
      ) as ClimateRemovalsProductsList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ClimateRemovalsProductsList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a product
  /// &lt;p&gt;Retrieves the details of a Climate product with the given ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [product] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ClimateProduct] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ClimateProduct>> getClimateProductsProduct({ 
    required String product,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/climate/products/{product}'.replaceAll('{' r'product' '}', encodeQueryParameter(_serializers, product, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ClimateProduct? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ClimateProduct),
      ) as ClimateProduct;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ClimateProduct>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List suppliers
  /// &lt;p&gt;Lists all available Climate supplier objects.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ClimateRemovalsSuppliersList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ClimateRemovalsSuppliersList>> getClimateSuppliers({ 
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/climate/suppliers';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ClimateRemovalsSuppliersList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ClimateRemovalsSuppliersList),
      ) as ClimateRemovalsSuppliersList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ClimateRemovalsSuppliersList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a supplier
  /// &lt;p&gt;Retrieves a Climate supplier object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [supplier] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ClimateSupplier] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ClimateSupplier>> getClimateSuppliersSupplier({ 
    required String supplier,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/climate/suppliers/{supplier}'.replaceAll('{' r'supplier' '}', encodeQueryParameter(_serializers, supplier, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ClimateSupplier? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ClimateSupplier),
      ) as ClimateSupplier;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ClimateSupplier>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a ConfirmationToken
  /// &lt;p&gt;Retrieves an existing ConfirmationToken object&lt;/p&gt;
  ///
  /// Parameters:
  /// * [confirmationToken] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ConfirmationToken] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ConfirmationToken>> getConfirmationTokensConfirmationToken({ 
    required String confirmationToken,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/confirmation_tokens/{confirmation_token}'.replaceAll('{' r'confirmation_token' '}', encodeQueryParameter(_serializers, confirmationToken, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ConfirmationToken? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ConfirmationToken),
      ) as ConfirmationToken;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ConfirmationToken>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List Country Specs
  /// &lt;p&gt;Lists all Country Spec objects available in the API.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CountrySpecList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CountrySpecList>> getCountrySpecs({ 
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/country_specs';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CountrySpecList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CountrySpecList),
      ) as CountrySpecList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CountrySpecList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a Country Spec
  /// &lt;p&gt;Returns a Country Spec for a given Country code.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [country] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CountrySpec] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CountrySpec>> getCountrySpecsCountry({ 
    required String country,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/country_specs/{country}'.replaceAll('{' r'country' '}', encodeQueryParameter(_serializers, country, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CountrySpec? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CountrySpec),
      ) as CountrySpec;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CountrySpec>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all coupons
  /// &lt;p&gt;Returns a list of your coupons.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CouponsResourceCouponList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CouponsResourceCouponList>> getCoupons({ 
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/coupons';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CouponsResourceCouponList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CouponsResourceCouponList),
      ) as CouponsResourceCouponList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CouponsResourceCouponList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a coupon
  /// &lt;p&gt;Retrieves the coupon with the given ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [coupon] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Coupon] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Coupon>> getCouponsCoupon({ 
    required String coupon,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/coupons/{coupon}'.replaceAll('{' r'coupon' '}', encodeQueryParameter(_serializers, coupon, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Coupon? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Coupon),
      ) as Coupon;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Coupon>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all credit notes
  /// &lt;p&gt;Returns a list of credit notes.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Only return credit notes that were created during the given date interval.
  /// * [customer] - Only return credit notes for the customer specified by this customer ID.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [invoice] - Only return credit notes for the invoice specified by this invoice ID.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CreditNotesList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CreditNotesList>> getCreditNotes({ 
    GetAccountsCreatedParameter? created,
    String? customer,
    String? endingBefore,
    BuiltList<String>? expand,
    String? invoice,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/credit_notes';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (invoice != null) r'invoice': encodeQueryParameter(_serializers, invoice, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CreditNotesList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CreditNotesList),
      ) as CreditNotesList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CreditNotesList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a credit note&#39;s line items
  /// &lt;p&gt;When retrieving a credit note, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [creditNote] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CreditNoteLinesList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CreditNoteLinesList>> getCreditNotesCreditNoteLines({ 
    required String creditNote,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/credit_notes/{credit_note}/lines'.replaceAll('{' r'credit_note' '}', encodeQueryParameter(_serializers, creditNote, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CreditNoteLinesList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CreditNoteLinesList),
      ) as CreditNoteLinesList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CreditNoteLinesList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a credit note
  /// &lt;p&gt;Retrieves the credit note object with the given identifier.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CreditNote] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CreditNote>> getCreditNotesId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/credit_notes/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CreditNote? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CreditNote),
      ) as CreditNote;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CreditNote>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Preview a credit note
  /// &lt;p&gt;Get a preview of a credit note without creating it.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoice] - ID of the invoice.
  /// * [amount] - The integer amount in cents (or local equivalent) representing the total amount of the credit note. One of `amount`, `lines`, or `shipping_cost` must be provided.
  /// * [creditAmount] - The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice.
  /// * [effectiveAt] - The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF.
  /// * [emailType] - Type of email to send to the customer, one of `credit_note` or `none` and the default is `credit_note`.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [lines] - Line items that make up the credit note. One of `amount`, `lines`, or `shipping_cost` must be provided.
  /// * [memo] - The credit note's memo appears on the credit note PDF.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [outOfBandAmount] - The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.
  /// * [reason] - Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
  /// * [refundAmount] - The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.
  /// * [refunds] - Refunds to link to this credit note.
  /// * [shippingCost] - When shipping_cost contains the shipping_rate from the invoice, the shipping_cost is included in the credit note. One of `amount`, `lines`, or `shipping_cost` must be provided.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CreditNote] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CreditNote>> getCreditNotesPreview({ 
    required String invoice,
    int? amount,
    int? creditAmount,
    int? effectiveAt,
    String? emailType,
    BuiltList<String>? expand,
    BuiltList<CreditNoteLineItemParams>? lines,
    String? memo,
    BuiltMap<String, String>? metadata,
    int? outOfBandAmount,
    String? reason,
    int? refundAmount,
    BuiltList<CreditNoteRefundParams>? refunds,
    CreditNoteShippingCost1? shippingCost,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/credit_notes/preview';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
      if (creditAmount != null) r'credit_amount': encodeQueryParameter(_serializers, creditAmount, const FullType(int)),
      if (effectiveAt != null) r'effective_at': encodeQueryParameter(_serializers, effectiveAt, const FullType(int)),
      if (emailType != null) r'email_type': encodeQueryParameter(_serializers, emailType, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      r'invoice': encodeQueryParameter(_serializers, invoice, const FullType(String)),
      if (lines != null) r'lines': encodeCollectionQueryParameter<CreditNoteLineItemParams>(_serializers, lines, const FullType(BuiltList, [FullType(CreditNoteLineItemParams)]), format: ListFormat.csv,),
      if (memo != null) r'memo': encodeQueryParameter(_serializers, memo, const FullType(String)),
      if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(String)]), ),
      if (outOfBandAmount != null) r'out_of_band_amount': encodeQueryParameter(_serializers, outOfBandAmount, const FullType(int)),
      if (reason != null) r'reason': encodeQueryParameter(_serializers, reason, const FullType(String)),
      if (refundAmount != null) r'refund_amount': encodeQueryParameter(_serializers, refundAmount, const FullType(int)),
      if (refunds != null) r'refunds': encodeCollectionQueryParameter<CreditNoteRefundParams>(_serializers, refunds, const FullType(BuiltList, [FullType(CreditNoteRefundParams)]), format: ListFormat.csv,),
      if (shippingCost != null) r'shipping_cost': encodeQueryParameter(_serializers, shippingCost, const FullType(CreditNoteShippingCost1)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CreditNote? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CreditNote),
      ) as CreditNote;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CreditNote>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a credit note preview&#39;s line items
  /// &lt;p&gt;When retrieving a credit note preview, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoice] - ID of the invoice.
  /// * [amount] - The integer amount in cents (or local equivalent) representing the total amount of the credit note. One of `amount`, `lines`, or `shipping_cost` must be provided.
  /// * [creditAmount] - The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice.
  /// * [effectiveAt] - The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF.
  /// * [emailType] - Type of email to send to the customer, one of `credit_note` or `none` and the default is `credit_note`.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [lines] - Line items that make up the credit note. One of `amount`, `lines`, or `shipping_cost` must be provided.
  /// * [memo] - The credit note's memo appears on the credit note PDF.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [outOfBandAmount] - The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.
  /// * [reason] - Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
  /// * [refundAmount] - The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.
  /// * [refunds] - Refunds to link to this credit note.
  /// * [shippingCost] - When shipping_cost contains the shipping_rate from the invoice, the shipping_cost is included in the credit note. One of `amount`, `lines`, or `shipping_cost` must be provided.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CreditNoteLinesList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CreditNoteLinesList>> getCreditNotesPreviewLines({ 
    required String invoice,
    int? amount,
    int? creditAmount,
    int? effectiveAt,
    String? emailType,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    BuiltList<CreditNoteLineItemParams>? lines,
    String? memo,
    BuiltMap<String, String>? metadata,
    int? outOfBandAmount,
    String? reason,
    int? refundAmount,
    BuiltList<CreditNoteRefundParams>? refunds,
    CreditNoteShippingCost1? shippingCost,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/credit_notes/preview/lines';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
      if (creditAmount != null) r'credit_amount': encodeQueryParameter(_serializers, creditAmount, const FullType(int)),
      if (effectiveAt != null) r'effective_at': encodeQueryParameter(_serializers, effectiveAt, const FullType(int)),
      if (emailType != null) r'email_type': encodeQueryParameter(_serializers, emailType, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      r'invoice': encodeQueryParameter(_serializers, invoice, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (lines != null) r'lines': encodeCollectionQueryParameter<CreditNoteLineItemParams>(_serializers, lines, const FullType(BuiltList, [FullType(CreditNoteLineItemParams)]), format: ListFormat.csv,),
      if (memo != null) r'memo': encodeQueryParameter(_serializers, memo, const FullType(String)),
      if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(String)]), ),
      if (outOfBandAmount != null) r'out_of_band_amount': encodeQueryParameter(_serializers, outOfBandAmount, const FullType(int)),
      if (reason != null) r'reason': encodeQueryParameter(_serializers, reason, const FullType(String)),
      if (refundAmount != null) r'refund_amount': encodeQueryParameter(_serializers, refundAmount, const FullType(int)),
      if (refunds != null) r'refunds': encodeCollectionQueryParameter<CreditNoteRefundParams>(_serializers, refunds, const FullType(BuiltList, [FullType(CreditNoteRefundParams)]), format: ListFormat.csv,),
      if (shippingCost != null) r'shipping_cost': encodeQueryParameter(_serializers, shippingCost, const FullType(CreditNoteShippingCost1)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CreditNoteLinesList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CreditNoteLinesList),
      ) as CreditNoteLinesList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CreditNoteLinesList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all customers
  /// &lt;p&gt;Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Only return customers that were created during the given date interval.
  /// * [email] - A case-sensitive filter on the list based on the customer's `email` field. The value must be a string.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [testClock] - Provides a list of customers that are associated with the specified test clock. The response will not include customers with test clocks if this parameter is not set.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CustomerResourceCustomerList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CustomerResourceCustomerList>> getCustomers({ 
    GetAccountsCreatedParameter? created,
    String? email,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? testClock,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (email != null) r'email': encodeQueryParameter(_serializers, email, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (testClock != null) r'test_clock': encodeQueryParameter(_serializers, testClock, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CustomerResourceCustomerList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CustomerResourceCustomerList),
      ) as CustomerResourceCustomerList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CustomerResourceCustomerList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a customer
  /// &lt;p&gt;Retrieves a Customer object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [GetCustomersCustomer200Response] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<GetCustomersCustomer200Response>> getCustomersCustomer({ 
    required String customer,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    GetCustomersCustomer200Response? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(GetCustomersCustomer200Response),
      ) as GetCustomersCustomer200Response;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<GetCustomersCustomer200Response>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List customer balance transactions
  /// &lt;p&gt;Returns a list of transactions that updated the customer’s &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balances&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CustomerBalanceTransactionList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CustomerBalanceTransactionList>> getCustomersCustomerBalanceTransactions({ 
    required String customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/balance_transactions'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CustomerBalanceTransactionList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CustomerBalanceTransactionList),
      ) as CustomerBalanceTransactionList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CustomerBalanceTransactionList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a customer balance transaction
  /// &lt;p&gt;Retrieves a specific customer balance transaction that updated the customer’s &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balances&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [transaction] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CustomerBalanceTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CustomerBalanceTransaction>> getCustomersCustomerBalanceTransactionsTransaction({ 
    required String customer,
    required String transaction,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/balance_transactions/{transaction}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'transaction' '}', encodeQueryParameter(_serializers, transaction, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CustomerBalanceTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CustomerBalanceTransaction),
      ) as CustomerBalanceTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CustomerBalanceTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all bank accounts
  /// &lt;p&gt;You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional bank accounts.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BankAccountList] as data
  /// Throws [DioException] if API call or serialization fails
  @Deprecated('This operation has been deprecated')
  Future<Response<BankAccountList>> getCustomersCustomerBankAccounts({ 
    required String customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/bank_accounts'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BankAccountList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BankAccountList),
      ) as BankAccountList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BankAccountList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a bank account
  /// &lt;p&gt;By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BankAccount] as data
  /// Throws [DioException] if API call or serialization fails
  @Deprecated('This operation has been deprecated')
  Future<Response<BankAccount>> getCustomersCustomerBankAccountsId({ 
    required String customer,
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/bank_accounts/{id}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BankAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BankAccount),
      ) as BankAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BankAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all cards
  /// &lt;p&gt;You can see a list of the cards belonging to a customer. Note that the 10 most recent sources are always available on the &lt;code&gt;Customer&lt;/code&gt; object. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional cards.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CardList] as data
  /// Throws [DioException] if API call or serialization fails
  @Deprecated('This operation has been deprecated')
  Future<Response<CardList>> getCustomersCustomerCards({ 
    required String customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/cards'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CardList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CardList),
      ) as CardList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CardList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a card
  /// &lt;p&gt;You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Card] as data
  /// Throws [DioException] if API call or serialization fails
  @Deprecated('This operation has been deprecated')
  Future<Response<Card>> getCustomersCustomerCardsId({ 
    required String customer,
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/cards/{id}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Card? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Card),
      ) as Card;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Card>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a cash balance
  /// &lt;p&gt;Retrieves a customer’s cash balance.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CashBalance] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CashBalance>> getCustomersCustomerCashBalance({ 
    required String customer,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/cash_balance'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CashBalance? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CashBalance),
      ) as CashBalance;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CashBalance>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List cash balance transactions
  /// &lt;p&gt;Returns a list of transactions that modified the customer’s &lt;a href&#x3D;\&quot;/docs/payments/customer-balance\&quot;&gt;cash balance&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CustomerCashBalanceTransactionList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CustomerCashBalanceTransactionList>> getCustomersCustomerCashBalanceTransactions({ 
    required String customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/cash_balance_transactions'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CustomerCashBalanceTransactionList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CustomerCashBalanceTransactionList),
      ) as CustomerCashBalanceTransactionList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CustomerCashBalanceTransactionList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a cash balance transaction
  /// &lt;p&gt;Retrieves a specific cash balance transaction, which updated the customer’s &lt;a href&#x3D;\&quot;/docs/payments/customer-balance\&quot;&gt;cash balance&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [transaction] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CustomerCashBalanceTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CustomerCashBalanceTransaction>> getCustomersCustomerCashBalanceTransactionsTransaction({ 
    required String customer,
    required String transaction,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/cash_balance_transactions/{transaction}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'transaction' '}', encodeQueryParameter(_serializers, transaction, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CustomerCashBalanceTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CustomerCashBalanceTransaction),
      ) as CustomerCashBalanceTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CustomerCashBalanceTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// getCustomersCustomerDiscount
  /// 
  ///
  /// Parameters:
  /// * [customer] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Discount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Discount>> getCustomersCustomerDiscount({ 
    required String customer,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/discount'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Discount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Discount),
      ) as Discount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Discount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List a Customer&#39;s PaymentMethods
  /// &lt;p&gt;Returns a list of PaymentMethods for a given Customer&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [allowRedisplay] - This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [type] - An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CustomerPaymentMethodResourceList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CustomerPaymentMethodResourceList>> getCustomersCustomerPaymentMethods({ 
    required String customer,
    String? allowRedisplay,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? type,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/payment_methods'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (allowRedisplay != null) r'allow_redisplay': encodeQueryParameter(_serializers, allowRedisplay, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CustomerPaymentMethodResourceList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CustomerPaymentMethodResourceList),
      ) as CustomerPaymentMethodResourceList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CustomerPaymentMethodResourceList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a Customer&#39;s PaymentMethod
  /// &lt;p&gt;Retrieves a PaymentMethod object for a given Customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [paymentMethod] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentMethod] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentMethod>> getCustomersCustomerPaymentMethodsPaymentMethod({ 
    required String customer,
    required String paymentMethod,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/payment_methods/{payment_method}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'payment_method' '}', encodeQueryParameter(_serializers, paymentMethod, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentMethod? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentMethod),
      ) as PaymentMethod;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentMethod>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// getCustomersCustomerSources
  /// &lt;p&gt;List sources for a specified customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [object] - Filter sources according to a particular object type.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ApmsSourcesSourceList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ApmsSourcesSourceList>> getCustomersCustomerSources({ 
    required String customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? object,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/sources'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (object != null) r'object': encodeQueryParameter(_serializers, object, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ApmsSourcesSourceList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ApmsSourcesSourceList),
      ) as ApmsSourcesSourceList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ApmsSourcesSourceList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// getCustomersCustomerSourcesId
  /// &lt;p&gt;Retrieve a specified source for a given customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentSource] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentSource>> getCustomersCustomerSourcesId({ 
    required String customer,
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/sources/{id}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentSource? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentSource),
      ) as PaymentSource;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentSource>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List active subscriptions
  /// &lt;p&gt;You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SubscriptionList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SubscriptionList>> getCustomersCustomerSubscriptions({ 
    required String customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/subscriptions'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SubscriptionList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SubscriptionList),
      ) as SubscriptionList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SubscriptionList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a subscription
  /// &lt;p&gt;Retrieves the subscription with the given ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [subscriptionExposedId] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Subscription] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Subscription>> getCustomersCustomerSubscriptionsSubscriptionExposedId({ 
    required String customer,
    required String subscriptionExposedId,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/subscriptions/{subscription_exposed_id}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'subscription_exposed_id' '}', encodeQueryParameter(_serializers, subscriptionExposedId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Subscription? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Subscription),
      ) as Subscription;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Subscription>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount
  /// 
  ///
  /// Parameters:
  /// * [customer] 
  /// * [subscriptionExposedId] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Discount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Discount>> getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount({ 
    required String customer,
    required String subscriptionExposedId,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'subscription_exposed_id' '}', encodeQueryParameter(_serializers, subscriptionExposedId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Discount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Discount),
      ) as Discount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Discount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all Customer tax IDs
  /// &lt;p&gt;Returns a list of tax IDs for a customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxIDsList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxIDsList>> getCustomersCustomerTaxIds({ 
    required String customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/tax_ids'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxIDsList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxIDsList),
      ) as TaxIDsList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxIDsList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a Customer tax ID
  /// &lt;p&gt;Retrieves the &lt;code&gt;tax_id&lt;/code&gt; object with the given identifier.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxId] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxId>> getCustomersCustomerTaxIdsId({ 
    required String customer,
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/tax_ids/{id}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxId? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxId),
      ) as TaxId;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxId>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Search customers
  /// &lt;p&gt;Search for customers you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [query] - The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for customers](https://stripe.com/docs/search#query-fields-for-customers).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [page] - A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SearchResult1] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SearchResult1>> getCustomersSearch({ 
    required String query,
    BuiltList<String>? expand,
    int? limit,
    String? page,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/search';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (page != null) r'page': encodeQueryParameter(_serializers, page, const FullType(String)),
      r'query': encodeQueryParameter(_serializers, query, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SearchResult1? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SearchResult1),
      ) as SearchResult1;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SearchResult1>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all disputes
  /// &lt;p&gt;Returns a list of your disputes.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [charge] - Only return disputes associated to the charge specified by this charge ID.
  /// * [created] - Only return disputes that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [paymentIntent] - Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [DisputeList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<DisputeList>> getDisputes({ 
    String? charge,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? paymentIntent,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/disputes';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (charge != null) r'charge': encodeQueryParameter(_serializers, charge, const FullType(String)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (paymentIntent != null) r'payment_intent': encodeQueryParameter(_serializers, paymentIntent, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    DisputeList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(DisputeList),
      ) as DisputeList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<DisputeList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a dispute
  /// &lt;p&gt;Retrieves the dispute with the given ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [dispute] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Dispute] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Dispute>> getDisputesDispute({ 
    required String dispute,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/disputes/{dispute}'.replaceAll('{' r'dispute' '}', encodeQueryParameter(_serializers, dispute, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Dispute? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Dispute),
      ) as Dispute;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Dispute>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all active entitlements
  /// &lt;p&gt;Retrieve a list of active entitlements for a customer&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] - The ID of the customer.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [EntitlementsResourceCustomerEntitlementList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<EntitlementsResourceCustomerEntitlementList>> getEntitlementsActiveEntitlements({ 
    required String customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/entitlements/active_entitlements';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    EntitlementsResourceCustomerEntitlementList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(EntitlementsResourceCustomerEntitlementList),
      ) as EntitlementsResourceCustomerEntitlementList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<EntitlementsResourceCustomerEntitlementList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an active entitlement
  /// &lt;p&gt;Retrieve an active entitlement&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] - The ID of the entitlement.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [EntitlementsActiveEntitlement] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<EntitlementsActiveEntitlement>> getEntitlementsActiveEntitlementsId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/entitlements/active_entitlements/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    EntitlementsActiveEntitlement? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(EntitlementsActiveEntitlement),
      ) as EntitlementsActiveEntitlement;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<EntitlementsActiveEntitlement>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all features
  /// &lt;p&gt;Retrieve a list of features&lt;/p&gt;
  ///
  /// Parameters:
  /// * [archived] - If set, filter results to only include features with the given archive status.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [lookupKey] - If set, filter results to only include features with the given lookup_key.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [EntitlementsResourceFeatureList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<EntitlementsResourceFeatureList>> getEntitlementsFeatures({ 
    bool? archived,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? lookupKey,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/entitlements/features';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (archived != null) r'archived': encodeQueryParameter(_serializers, archived, const FullType(bool)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (lookupKey != null) r'lookup_key': encodeQueryParameter(_serializers, lookupKey, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    EntitlementsResourceFeatureList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(EntitlementsResourceFeatureList),
      ) as EntitlementsResourceFeatureList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<EntitlementsResourceFeatureList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a feature
  /// &lt;p&gt;Retrieves a feature&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] - The ID of the feature.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [EntitlementsFeature] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<EntitlementsFeature>> getEntitlementsFeaturesId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/entitlements/features/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    EntitlementsFeature? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(EntitlementsFeature),
      ) as EntitlementsFeature;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<EntitlementsFeature>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all events
  /// &lt;p&gt;List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in &lt;a href&#x3D;\&quot;https://docs.stripe.com/api/events/object\&quot;&gt;event object&lt;/a&gt; &lt;code&gt;api_version&lt;/code&gt; attribute (not according to your current Stripe API version or &lt;code&gt;Stripe-Version&lt;/code&gt; header).&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Only return events that were created during the given date interval.
  /// * [deliverySuccess] - Filter events by whether all webhooks were successfully delivered. If false, events which are still pending or have failed all delivery attempts to a webhook endpoint will be returned.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [type] - A string containing a specific event name, or group of events using * as a wildcard. The list will be filtered to include only events with a matching event property.
  /// * [types] - An array of up to 20 strings containing specific event names. The list will be filtered to include only events with a matching event property. You may pass either `type` or `types`, but not both.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [NotificationEventList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<NotificationEventList>> getEvents({ 
    GetAccountsCreatedParameter? created,
    bool? deliverySuccess,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? type,
    BuiltList<String>? types,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/events';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (deliverySuccess != null) r'delivery_success': encodeQueryParameter(_serializers, deliverySuccess, const FullType(bool)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
      if (types != null) r'types': encodeCollectionQueryParameter<String>(_serializers, types, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    NotificationEventList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(NotificationEventList),
      ) as NotificationEventList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<NotificationEventList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an event
  /// &lt;p&gt;Retrieves the details of an event if it was created in the last 30 days. Supply the unique identifier of the event, which you might have received in a webhook.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Event] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Event>> getEventsId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/events/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Event? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Event),
      ) as Event;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Event>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all exchange rates
  /// &lt;p&gt;Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with the exchange rate for currency X your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and total number of supported payout currencies, and the default is the max.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with the exchange rate for currency X, your subsequent call can include `starting_after=X` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ExchangeRateList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ExchangeRateList>> getExchangeRates({ 
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/exchange_rates';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ExchangeRateList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ExchangeRateList),
      ) as ExchangeRateList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ExchangeRateList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an exchange rate
  /// &lt;p&gt;Retrieves the exchange rates from the given currency to every supported currency.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [rateId] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ExchangeRate] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ExchangeRate>> getExchangeRatesRateId({ 
    required String rateId,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/exchange_rates/{rate_id}'.replaceAll('{' r'rate_id' '}', encodeQueryParameter(_serializers, rateId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ExchangeRate? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ExchangeRate),
      ) as ExchangeRate;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ExchangeRate>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all file links
  /// &lt;p&gt;Returns a list of file links.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Only return links that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [expired] - Filter links by their expiration status. By default, Stripe returns all links.
  /// * [file] - Only return links for the given file.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FileResourceFileLinkList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FileResourceFileLinkList>> getFileLinks({ 
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    bool? expired,
    String? file,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/file_links';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (expired != null) r'expired': encodeQueryParameter(_serializers, expired, const FullType(bool)),
      if (file != null) r'file': encodeQueryParameter(_serializers, file, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FileResourceFileLinkList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FileResourceFileLinkList),
      ) as FileResourceFileLinkList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FileResourceFileLinkList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a file link
  /// &lt;p&gt;Retrieves the file link with the given ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [link] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FileLink] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FileLink>> getFileLinksLink({ 
    required String link,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/file_links/{link}'.replaceAll('{' r'link' '}', encodeQueryParameter(_serializers, link, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FileLink? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FileLink),
      ) as FileLink;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FileLink>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all files
  /// &lt;p&gt;Returns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently created files at the top.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Only return files that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [purpose] - Filter queries by the file purpose. If you don't provide a purpose, the queries return unfiltered files.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FileResourceFileList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FileResourceFileList>> getFiles({ 
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? purpose,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/files';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (purpose != null) r'purpose': encodeQueryParameter(_serializers, purpose, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FileResourceFileList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FileResourceFileList),
      ) as FileResourceFileList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FileResourceFileList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a file
  /// &lt;p&gt;Retrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding file object. Learn how to &lt;a href&#x3D;\&quot;/docs/file-upload#download-file-contents\&quot;&gt;access file contents&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [file] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Uint8List] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Uint8List>> getFilesFile({ 
    required String file,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/files/{file}'.replaceAll('{' r'file' '}', encodeQueryParameter(_serializers, file, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Uint8List? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Uint8List),
      ) as Uint8List;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Uint8List>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List Accounts
  /// &lt;p&gt;Returns a list of Financial Connections &lt;code&gt;Account&lt;/code&gt; objects.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [accountHolder] - If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [session] - If present, only return accounts that were collected as part of the given session.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BankConnectionsResourceLinkedAccountList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BankConnectionsResourceLinkedAccountList>> getFinancialConnectionsAccounts({ 
    AccountholderParams? accountHolder,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? session,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/financial_connections/accounts';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (accountHolder != null) r'account_holder': encodeQueryParameter(_serializers, accountHolder, const FullType(AccountholderParams)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (session != null) r'session': encodeQueryParameter(_serializers, session, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BankConnectionsResourceLinkedAccountList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BankConnectionsResourceLinkedAccountList),
      ) as BankConnectionsResourceLinkedAccountList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BankConnectionsResourceLinkedAccountList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an Account
  /// &lt;p&gt;Retrieves the details of an Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FinancialConnectionsAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FinancialConnectionsAccount>> getFinancialConnectionsAccountsAccount({ 
    required String account,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/financial_connections/accounts/{account}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FinancialConnectionsAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FinancialConnectionsAccount),
      ) as FinancialConnectionsAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FinancialConnectionsAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List Account Owners
  /// &lt;p&gt;Lists all owners for a given &lt;code&gt;Account&lt;/code&gt;&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [ownership] - The ID of the ownership object to fetch owners from.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BankConnectionsResourceOwnerList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BankConnectionsResourceOwnerList>> getFinancialConnectionsAccountsAccountOwners({ 
    required String account,
    required String ownership,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/financial_connections/accounts/{account}/owners'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      r'ownership': encodeQueryParameter(_serializers, ownership, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BankConnectionsResourceOwnerList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BankConnectionsResourceOwnerList),
      ) as BankConnectionsResourceOwnerList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BankConnectionsResourceOwnerList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a Session
  /// &lt;p&gt;Retrieves the details of a Financial Connections &lt;code&gt;Session&lt;/code&gt;&lt;/p&gt;
  ///
  /// Parameters:
  /// * [session] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FinancialConnectionsSession] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FinancialConnectionsSession>> getFinancialConnectionsSessionsSession({ 
    required String session,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/financial_connections/sessions/{session}'.replaceAll('{' r'session' '}', encodeQueryParameter(_serializers, session, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FinancialConnectionsSession? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FinancialConnectionsSession),
      ) as FinancialConnectionsSession;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FinancialConnectionsSession>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List Transactions
  /// &lt;p&gt;Returns a list of Financial Connections &lt;code&gt;Transaction&lt;/code&gt; objects.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] - The ID of the Financial Connections Account whose transactions will be retrieved.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [transactedAt] - A filter on the list based on the object `transacted_at` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:
  /// * [transactionRefresh] - A filter on the list based on the object `transaction_refresh` field. The value can be a dictionary with the following options:
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BankConnectionsResourceTransactionList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BankConnectionsResourceTransactionList>> getFinancialConnectionsTransactions({ 
    required String account,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    GetAccountsCreatedParameter? transactedAt,
    TransactionRefreshParams? transactionRefresh,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/financial_connections/transactions';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      r'account': encodeQueryParameter(_serializers, account, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (transactedAt != null) r'transacted_at': encodeQueryParameter(_serializers, transactedAt, const FullType(GetAccountsCreatedParameter)),
      if (transactionRefresh != null) r'transaction_refresh': encodeQueryParameter(_serializers, transactionRefresh, const FullType(TransactionRefreshParams)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BankConnectionsResourceTransactionList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BankConnectionsResourceTransactionList),
      ) as BankConnectionsResourceTransactionList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BankConnectionsResourceTransactionList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a Transaction
  /// &lt;p&gt;Retrieves the details of a Financial Connections &lt;code&gt;Transaction&lt;/code&gt;&lt;/p&gt;
  ///
  /// Parameters:
  /// * [transaction] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FinancialConnectionsTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FinancialConnectionsTransaction>> getFinancialConnectionsTransactionsTransaction({ 
    required String transaction,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/financial_connections/transactions/{transaction}'.replaceAll('{' r'transaction' '}', encodeQueryParameter(_serializers, transaction, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FinancialConnectionsTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FinancialConnectionsTransaction),
      ) as FinancialConnectionsTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FinancialConnectionsTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all ForwardingRequests
  /// &lt;p&gt;Lists all ForwardingRequest objects.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Similar to other List endpoints, filters results based on created timestamp. You can pass gt, gte, lt, and lte timestamp values.
  /// * [endingBefore] - A pagination cursor to fetch the previous page of the list. The value must be a ForwardingRequest ID.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A pagination cursor to fetch the next page of the list. The value must be a ForwardingRequest ID.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ForwardingRequestList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ForwardingRequestList>> getForwardingRequests({ 
    CreatedParam? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/forwarding/requests';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(CreatedParam)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ForwardingRequestList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ForwardingRequestList),
      ) as ForwardingRequestList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ForwardingRequestList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a ForwardingRequest
  /// &lt;p&gt;Retrieves a ForwardingRequest object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ForwardingRequest] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ForwardingRequest>> getForwardingRequestsId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/forwarding/requests/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ForwardingRequest? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ForwardingRequest),
      ) as ForwardingRequest;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ForwardingRequest>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List VerificationReports
  /// &lt;p&gt;List all verification reports.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [clientReferenceId] - A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
  /// * [created] - Only return VerificationReports that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [type] - Only return VerificationReports of this type
  /// * [verificationSession] - Only return VerificationReports created by this VerificationSession ID. It is allowed to provide a VerificationIntent ID.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [GelatoVerificationReportList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<GelatoVerificationReportList>> getIdentityVerificationReports({ 
    String? clientReferenceId,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? type,
    String? verificationSession,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/identity/verification_reports';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (clientReferenceId != null) r'client_reference_id': encodeQueryParameter(_serializers, clientReferenceId, const FullType(String)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
      if (verificationSession != null) r'verification_session': encodeQueryParameter(_serializers, verificationSession, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    GelatoVerificationReportList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(GelatoVerificationReportList),
      ) as GelatoVerificationReportList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<GelatoVerificationReportList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a VerificationReport
  /// &lt;p&gt;Retrieves an existing VerificationReport&lt;/p&gt;
  ///
  /// Parameters:
  /// * [report] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IdentityVerificationReport] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IdentityVerificationReport>> getIdentityVerificationReportsReport({ 
    required String report,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/identity/verification_reports/{report}'.replaceAll('{' r'report' '}', encodeQueryParameter(_serializers, report, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IdentityVerificationReport? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IdentityVerificationReport),
      ) as IdentityVerificationReport;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IdentityVerificationReport>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List VerificationSessions
  /// &lt;p&gt;Returns a list of VerificationSessions&lt;/p&gt;
  ///
  /// Parameters:
  /// * [clientReferenceId] - A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
  /// * [created] - Only return VerificationSessions that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [relatedCustomer] 
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [GelatoVerificationSessionList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<GelatoVerificationSessionList>> getIdentityVerificationSessions({ 
    String? clientReferenceId,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? relatedCustomer,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/identity/verification_sessions';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (clientReferenceId != null) r'client_reference_id': encodeQueryParameter(_serializers, clientReferenceId, const FullType(String)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (relatedCustomer != null) r'related_customer': encodeQueryParameter(_serializers, relatedCustomer, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    GelatoVerificationSessionList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(GelatoVerificationSessionList),
      ) as GelatoVerificationSessionList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<GelatoVerificationSessionList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a VerificationSession
  /// &lt;p&gt;Retrieves the details of a VerificationSession that was previously created.&lt;/p&gt;  &lt;p&gt;When the session status is &lt;code&gt;requires_input&lt;/code&gt;, you can use this method to retrieve a valid &lt;code&gt;client_secret&lt;/code&gt; or &lt;code&gt;url&lt;/code&gt; to allow re-submission.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [session] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IdentityVerificationSession] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IdentityVerificationSession>> getIdentityVerificationSessionsSession({ 
    required String session,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/identity/verification_sessions/{session}'.replaceAll('{' r'session' '}', encodeQueryParameter(_serializers, session, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IdentityVerificationSession? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IdentityVerificationSession),
      ) as IdentityVerificationSession;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IdentityVerificationSession>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all payments for an invoice
  /// &lt;p&gt;When retrieving an invoice, there is an includable payments property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of payments.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [invoice] - The identifier of the invoice whose payments to return.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [payment] - The payment details of the invoice payments to return.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - The status of the invoice payments to return.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [InvoicesPaymentsListInvoicePayments] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<InvoicesPaymentsListInvoicePayments>> getInvoicePayments({ 
    String? endingBefore,
    BuiltList<String>? expand,
    String? invoice,
    int? limit,
    PaymentParam? payment,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoice_payments';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (invoice != null) r'invoice': encodeQueryParameter(_serializers, invoice, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (payment != null) r'payment': encodeQueryParameter(_serializers, payment, const FullType(PaymentParam)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    InvoicesPaymentsListInvoicePayments? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(InvoicesPaymentsListInvoicePayments),
      ) as InvoicesPaymentsListInvoicePayments;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<InvoicesPaymentsListInvoicePayments>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an InvoicePayment
  /// &lt;p&gt;Retrieves the invoice payment with the given ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoicePayment] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [InvoicePayment] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<InvoicePayment>> getInvoicePaymentsInvoicePayment({ 
    required String invoicePayment,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoice_payments/{invoice_payment}'.replaceAll('{' r'invoice_payment' '}', encodeQueryParameter(_serializers, invoicePayment, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    InvoicePayment? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(InvoicePayment),
      ) as InvoicePayment;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<InvoicePayment>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all invoice rendering templates
  /// &lt;p&gt;List all templates, ordered by creation date, with the most recently created template appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [InvoiceRenderingTemplatesList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<InvoiceRenderingTemplatesList>> getInvoiceRenderingTemplates({ 
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoice_rendering_templates';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    InvoiceRenderingTemplatesList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(InvoiceRenderingTemplatesList),
      ) as InvoiceRenderingTemplatesList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<InvoiceRenderingTemplatesList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an invoice rendering template
  /// &lt;p&gt;Retrieves an invoice rendering template with the given ID. It by default returns the latest version of the template. Optionally, specify a version to see previous versions.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [template] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [version] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [InvoiceRenderingTemplate] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<InvoiceRenderingTemplate>> getInvoiceRenderingTemplatesTemplate({ 
    required String template,
    BuiltList<String>? expand,
    int? version,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoice_rendering_templates/{template}'.replaceAll('{' r'template' '}', encodeQueryParameter(_serializers, template, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (version != null) r'version': encodeQueryParameter(_serializers, version, const FullType(int)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    InvoiceRenderingTemplate? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(InvoiceRenderingTemplate),
      ) as InvoiceRenderingTemplate;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<InvoiceRenderingTemplate>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all invoice items
  /// &lt;p&gt;Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Only return invoice items that were created during the given date interval.
  /// * [customer] - The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [invoice] - Only return invoice items belonging to this invoice. If none is provided, all invoice items will be returned. If specifying an invoice, no customer identifier is needed.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [pending] - Set to `true` to only show pending invoice items, which are not yet attached to any invoices. Set to `false` to only show invoice items already attached to invoices. If unspecified, no filter is applied.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [InvoicesItemsList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<InvoicesItemsList>> getInvoiceitems({ 
    GetAccountsCreatedParameter? created,
    String? customer,
    String? endingBefore,
    BuiltList<String>? expand,
    String? invoice,
    int? limit,
    bool? pending,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoiceitems';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (invoice != null) r'invoice': encodeQueryParameter(_serializers, invoice, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (pending != null) r'pending': encodeQueryParameter(_serializers, pending, const FullType(bool)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    InvoicesItemsList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(InvoicesItemsList),
      ) as InvoicesItemsList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<InvoicesItemsList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an invoice item
  /// &lt;p&gt;Retrieves the invoice item with the given ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoiceitem] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Invoiceitem] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Invoiceitem>> getInvoiceitemsInvoiceitem({ 
    required String invoiceitem,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoiceitems/{invoiceitem}'.replaceAll('{' r'invoiceitem' '}', encodeQueryParameter(_serializers, invoiceitem, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Invoiceitem? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Invoiceitem),
      ) as Invoiceitem;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Invoiceitem>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all invoices
  /// &lt;p&gt;You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [collectionMethod] - The collection method of the invoice to retrieve. Either `charge_automatically` or `send_invoice`.
  /// * [created] - Only return invoices that were created during the given date interval.
  /// * [customer] - Only return invoices for the customer specified by this customer ID.
  /// * [dueDate] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
  /// * [subscription] - Only return invoices for the subscription specified by this subscription ID.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [InvoicesResourceList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<InvoicesResourceList>> getInvoices({ 
    String? collectionMethod,
    GetAccountsCreatedParameter? created,
    String? customer,
    GetAccountsCreatedParameter? dueDate,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? status,
    String? subscription,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (collectionMethod != null) r'collection_method': encodeQueryParameter(_serializers, collectionMethod, const FullType(String)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      if (dueDate != null) r'due_date': encodeQueryParameter(_serializers, dueDate, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
      if (subscription != null) r'subscription': encodeQueryParameter(_serializers, subscription, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    InvoicesResourceList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(InvoicesResourceList),
      ) as InvoicesResourceList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<InvoicesResourceList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an invoice
  /// &lt;p&gt;Retrieves the invoice with the given ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoice] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Invoice] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Invoice>> getInvoicesInvoice({ 
    required String invoice,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices/{invoice}'.replaceAll('{' r'invoice' '}', encodeQueryParameter(_serializers, invoice, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Invoice? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Invoice),
      ) as Invoice;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Invoice>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an invoice&#39;s line items
  /// &lt;p&gt;When retrieving an invoice, you’ll get a &lt;strong&gt;lines&lt;/strong&gt; property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoice] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [InvoiceLinesList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<InvoiceLinesList>> getInvoicesInvoiceLines({ 
    required String invoice,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices/{invoice}/lines'.replaceAll('{' r'invoice' '}', encodeQueryParameter(_serializers, invoice, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    InvoiceLinesList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(InvoiceLinesList),
      ) as InvoiceLinesList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<InvoiceLinesList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Search invoices
  /// &lt;p&gt;Search for invoices you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [query] - The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for invoices](https://stripe.com/docs/search#query-fields-for-invoices).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [page] - A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SearchResult2] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SearchResult2>> getInvoicesSearch({ 
    required String query,
    BuiltList<String>? expand,
    int? limit,
    String? page,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices/search';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (page != null) r'page': encodeQueryParameter(_serializers, page, const FullType(String)),
      r'query': encodeQueryParameter(_serializers, query, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SearchResult2? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SearchResult2),
      ) as SearchResult2;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SearchResult2>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all authorizations
  /// &lt;p&gt;Returns a list of Issuing &lt;code&gt;Authorization&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [card] - Only return authorizations that belong to the given card.
  /// * [cardholder] - Only return authorizations that belong to the given cardholder.
  /// * [created] - Only return authorizations that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingAuthorizationList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingAuthorizationList>> getIssuingAuthorizations({ 
    String? card,
    String? cardholder,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/authorizations';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (card != null) r'card': encodeQueryParameter(_serializers, card, const FullType(String)),
      if (cardholder != null) r'cardholder': encodeQueryParameter(_serializers, cardholder, const FullType(String)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingAuthorizationList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingAuthorizationList),
      ) as IssuingAuthorizationList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingAuthorizationList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an authorization
  /// &lt;p&gt;Retrieves an Issuing &lt;code&gt;Authorization&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingAuthorization] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingAuthorization>> getIssuingAuthorizationsAuthorization({ 
    required String authorization,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/authorizations/{authorization}'.replaceAll('{' r'authorization' '}', encodeQueryParameter(_serializers, authorization, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingAuthorization? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingAuthorization),
      ) as IssuingAuthorization;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingAuthorization>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all cardholders
  /// &lt;p&gt;Returns a list of Issuing &lt;code&gt;Cardholder&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Only return cardholders that were created during the given date interval.
  /// * [email] - Only return cardholders that have the given email address.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [phoneNumber] - Only return cardholders that have the given phone number.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`.
  /// * [type] - Only return cardholders that have the given type. One of `individual` or `company`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingCardholderList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingCardholderList>> getIssuingCardholders({ 
    GetAccountsCreatedParameter? created,
    String? email,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? phoneNumber,
    String? startingAfter,
    String? status,
    String? type,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/cardholders';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (email != null) r'email': encodeQueryParameter(_serializers, email, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (phoneNumber != null) r'phone_number': encodeQueryParameter(_serializers, phoneNumber, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
      if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingCardholderList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingCardholderList),
      ) as IssuingCardholderList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingCardholderList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a cardholder
  /// &lt;p&gt;Retrieves an Issuing &lt;code&gt;Cardholder&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [cardholder] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingCardholder] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingCardholder>> getIssuingCardholdersCardholder({ 
    required String cardholder,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/cardholders/{cardholder}'.replaceAll('{' r'cardholder' '}', encodeQueryParameter(_serializers, cardholder, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingCardholder? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingCardholder),
      ) as IssuingCardholder;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingCardholder>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all cards
  /// &lt;p&gt;Returns a list of Issuing &lt;code&gt;Card&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [cardholder] - Only return cards belonging to the Cardholder with the provided ID.
  /// * [created] - Only return cards that were issued during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expMonth] - Only return cards that have the given expiration month.
  /// * [expYear] - Only return cards that have the given expiration year.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [last4] - Only return cards that have the given last four digits.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [personalizationDesign] 
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Only return cards that have the given status. One of `active`, `inactive`, or `canceled`.
  /// * [type] - Only return cards that have the given type. One of `virtual` or `physical`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingCardList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingCardList>> getIssuingCards({ 
    String? cardholder,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    int? expMonth,
    int? expYear,
    BuiltList<String>? expand,
    String? last4,
    int? limit,
    String? personalizationDesign,
    String? startingAfter,
    String? status,
    String? type,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/cards';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (cardholder != null) r'cardholder': encodeQueryParameter(_serializers, cardholder, const FullType(String)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expMonth != null) r'exp_month': encodeQueryParameter(_serializers, expMonth, const FullType(int)),
      if (expYear != null) r'exp_year': encodeQueryParameter(_serializers, expYear, const FullType(int)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (last4 != null) r'last4': encodeQueryParameter(_serializers, last4, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (personalizationDesign != null) r'personalization_design': encodeQueryParameter(_serializers, personalizationDesign, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
      if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingCardList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingCardList),
      ) as IssuingCardList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingCardList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a card
  /// &lt;p&gt;Retrieves an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [card] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingCard] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingCard>> getIssuingCardsCard({ 
    required String card,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/cards/{card}'.replaceAll('{' r'card' '}', encodeQueryParameter(_serializers, card, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingCard? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingCard),
      ) as IssuingCard;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingCard>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all disputes
  /// &lt;p&gt;Returns a list of Issuing &lt;code&gt;Dispute&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Only return Issuing disputes that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Select Issuing disputes with the given status.
  /// * [transaction] - Select the Issuing dispute for the given transaction.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingDisputeList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingDisputeList>> getIssuingDisputes({ 
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? status,
    String? transaction,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/disputes';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
      if (transaction != null) r'transaction': encodeQueryParameter(_serializers, transaction, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingDisputeList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingDisputeList),
      ) as IssuingDisputeList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingDisputeList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a dispute
  /// &lt;p&gt;Retrieves an Issuing &lt;code&gt;Dispute&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [dispute] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingDispute] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingDispute>> getIssuingDisputesDispute({ 
    required String dispute,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/disputes/{dispute}'.replaceAll('{' r'dispute' '}', encodeQueryParameter(_serializers, dispute, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingDispute? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingDispute),
      ) as IssuingDispute;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingDispute>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all personalization designs
  /// &lt;p&gt;Returns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [lookupKeys] - Only return personalization designs with the given lookup keys.
  /// * [preferences] - Only return personalization designs with the given preferences.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Only return personalization designs with the given status.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingPersonalizationDesignList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingPersonalizationDesignList>> getIssuingPersonalizationDesigns({ 
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    BuiltList<String>? lookupKeys,
    PreferencesListParam? preferences,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/personalization_designs';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (lookupKeys != null) r'lookup_keys': encodeCollectionQueryParameter<String>(_serializers, lookupKeys, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (preferences != null) r'preferences': encodeQueryParameter(_serializers, preferences, const FullType(PreferencesListParam)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingPersonalizationDesignList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingPersonalizationDesignList),
      ) as IssuingPersonalizationDesignList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingPersonalizationDesignList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a personalization design
  /// &lt;p&gt;Retrieves a personalization design object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [personalizationDesign] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingPersonalizationDesign] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingPersonalizationDesign>> getIssuingPersonalizationDesignsPersonalizationDesign({ 
    required String personalizationDesign,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/personalization_designs/{personalization_design}'.replaceAll('{' r'personalization_design' '}', encodeQueryParameter(_serializers, personalizationDesign, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingPersonalizationDesign? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingPersonalizationDesign),
      ) as IssuingPersonalizationDesign;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingPersonalizationDesign>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all physical bundles
  /// &lt;p&gt;Returns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Only return physical bundles with the given status.
  /// * [type] - Only return physical bundles with the given type.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingPhysicalBundleList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingPhysicalBundleList>> getIssuingPhysicalBundles({ 
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? status,
    String? type,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/physical_bundles';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
      if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingPhysicalBundleList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingPhysicalBundleList),
      ) as IssuingPhysicalBundleList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingPhysicalBundleList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a physical bundle
  /// &lt;p&gt;Retrieves a physical bundle object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [physicalBundle] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingPhysicalBundle] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingPhysicalBundle>> getIssuingPhysicalBundlesPhysicalBundle({ 
    required String physicalBundle,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/physical_bundles/{physical_bundle}'.replaceAll('{' r'physical_bundle' '}', encodeQueryParameter(_serializers, physicalBundle, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingPhysicalBundle? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingPhysicalBundle),
      ) as IssuingPhysicalBundle;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingPhysicalBundle>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a settlement
  /// &lt;p&gt;Retrieves an Issuing &lt;code&gt;Settlement&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [settlement] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingSettlement] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingSettlement>> getIssuingSettlementsSettlement({ 
    required String settlement,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/settlements/{settlement}'.replaceAll('{' r'settlement' '}', encodeQueryParameter(_serializers, settlement, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingSettlement? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingSettlement),
      ) as IssuingSettlement;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingSettlement>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all issuing tokens for card
  /// &lt;p&gt;Lists all Issuing &lt;code&gt;Token&lt;/code&gt; objects for a given card.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [card] - The Issuing card identifier to list tokens for.
  /// * [created] - Only return Issuing tokens that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Select Issuing tokens with the given status.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingNetworkTokenList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingNetworkTokenList>> getIssuingTokens({ 
    required String card,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/tokens';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      r'card': encodeQueryParameter(_serializers, card, const FullType(String)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingNetworkTokenList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingNetworkTokenList),
      ) as IssuingNetworkTokenList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingNetworkTokenList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an issuing token
  /// &lt;p&gt;Retrieves an Issuing &lt;code&gt;Token&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [token] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingToken] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingToken>> getIssuingTokensToken({ 
    required String token,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/tokens/{token}'.replaceAll('{' r'token' '}', encodeQueryParameter(_serializers, token, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingToken? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingToken),
      ) as IssuingToken;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingToken>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all transactions
  /// &lt;p&gt;Returns a list of Issuing &lt;code&gt;Transaction&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [card] - Only return transactions that belong to the given card.
  /// * [cardholder] - Only return transactions that belong to the given cardholder.
  /// * [created] - Only return transactions that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [type] - Only return transactions that have the given type. One of `capture` or `refund`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingTransactionList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingTransactionList>> getIssuingTransactions({ 
    String? card,
    String? cardholder,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? type,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/transactions';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (card != null) r'card': encodeQueryParameter(_serializers, card, const FullType(String)),
      if (cardholder != null) r'cardholder': encodeQueryParameter(_serializers, cardholder, const FullType(String)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingTransactionList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingTransactionList),
      ) as IssuingTransactionList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingTransactionList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a transaction
  /// &lt;p&gt;Retrieves an Issuing &lt;code&gt;Transaction&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [transaction] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingTransaction>> getIssuingTransactionsTransaction({ 
    required String transaction,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/transactions/{transaction}'.replaceAll('{' r'transaction' '}', encodeQueryParameter(_serializers, transaction, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingTransaction),
      ) as IssuingTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a Session
  /// &lt;p&gt;Retrieves the details of a Financial Connections &lt;code&gt;Session&lt;/code&gt;&lt;/p&gt;
  ///
  /// Parameters:
  /// * [session] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FinancialConnectionsSession] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FinancialConnectionsSession>> getLinkAccountSessionsSession({ 
    required String session,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/link_account_sessions/{session}'.replaceAll('{' r'session' '}', encodeQueryParameter(_serializers, session, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FinancialConnectionsSession? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FinancialConnectionsSession),
      ) as FinancialConnectionsSession;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FinancialConnectionsSession>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List Accounts
  /// &lt;p&gt;Returns a list of Financial Connections &lt;code&gt;Account&lt;/code&gt; objects.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [accountHolder] - If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [session] - If present, only return accounts that were collected as part of the given session.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BankConnectionsResourceLinkedAccountList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BankConnectionsResourceLinkedAccountList>> getLinkedAccounts({ 
    AccountholderParams? accountHolder,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? session,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/linked_accounts';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (accountHolder != null) r'account_holder': encodeQueryParameter(_serializers, accountHolder, const FullType(AccountholderParams)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (session != null) r'session': encodeQueryParameter(_serializers, session, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BankConnectionsResourceLinkedAccountList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BankConnectionsResourceLinkedAccountList),
      ) as BankConnectionsResourceLinkedAccountList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BankConnectionsResourceLinkedAccountList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an Account
  /// &lt;p&gt;Retrieves the details of an Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FinancialConnectionsAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FinancialConnectionsAccount>> getLinkedAccountsAccount({ 
    required String account,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/linked_accounts/{account}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FinancialConnectionsAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FinancialConnectionsAccount),
      ) as FinancialConnectionsAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FinancialConnectionsAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List Account Owners
  /// &lt;p&gt;Lists all owners for a given &lt;code&gt;Account&lt;/code&gt;&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [ownership] - The ID of the ownership object to fetch owners from.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BankConnectionsResourceOwnerList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BankConnectionsResourceOwnerList>> getLinkedAccountsAccountOwners({ 
    required String account,
    required String ownership,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/linked_accounts/{account}/owners'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      r'ownership': encodeQueryParameter(_serializers, ownership, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BankConnectionsResourceOwnerList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BankConnectionsResourceOwnerList),
      ) as BankConnectionsResourceOwnerList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BankConnectionsResourceOwnerList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a Mandate
  /// &lt;p&gt;Retrieves a Mandate object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [mandate] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Mandate] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Mandate>> getMandatesMandate({ 
    required String mandate,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/mandates/{mandate}'.replaceAll('{' r'mandate' '}', encodeQueryParameter(_serializers, mandate, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Mandate? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Mandate),
      ) as Mandate;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Mandate>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all PaymentIntents
  /// &lt;p&gt;Returns a list of PaymentIntents.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp or a dictionary with a number of different query options.
  /// * [customer] - Only return PaymentIntents for the customer that this customer ID specifies.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentFlowsPaymentIntentList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentFlowsPaymentIntentList>> getPaymentIntents({ 
    GetAccountsCreatedParameter? created,
    String? customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_intents';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentFlowsPaymentIntentList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentFlowsPaymentIntentList),
      ) as PaymentFlowsPaymentIntentList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentFlowsPaymentIntentList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a PaymentIntent
  /// &lt;p&gt;Retrieves the details of a PaymentIntent that has previously been created. &lt;/p&gt;  &lt;p&gt;You can retrieve a PaymentIntent client-side using a publishable key when the &lt;code&gt;client_secret&lt;/code&gt; is in the query string. &lt;/p&gt;  &lt;p&gt;If you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the &lt;a href&#x3D;\&quot;#payment_intent_object\&quot;&gt;payment intent&lt;/a&gt; object reference for more details.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [intent] 
  /// * [clientSecret] - The client secret of the PaymentIntent. We require it if you use a publishable key to retrieve the source.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentIntent] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentIntent>> getPaymentIntentsIntent({ 
    required String intent,
    String? clientSecret,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_intents/{intent}'.replaceAll('{' r'intent' '}', encodeQueryParameter(_serializers, intent, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (clientSecret != null) r'client_secret': encodeQueryParameter(_serializers, clientSecret, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentIntent? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentIntent),
      ) as PaymentIntent;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentIntent>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Search PaymentIntents
  /// &lt;p&gt;Search for PaymentIntents you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [query] - The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for payment intents](https://stripe.com/docs/search#query-fields-for-payment-intents).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [page] - A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SearchResult3] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SearchResult3>> getPaymentIntentsSearch({ 
    required String query,
    BuiltList<String>? expand,
    int? limit,
    String? page,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_intents/search';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (page != null) r'page': encodeQueryParameter(_serializers, page, const FullType(String)),
      r'query': encodeQueryParameter(_serializers, query, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SearchResult3? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SearchResult3),
      ) as SearchResult3;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SearchResult3>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all payment links
  /// &lt;p&gt;Returns a list of your payment links.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [active] - Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links).
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentLinksResourcePaymentLinkList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentLinksResourcePaymentLinkList>> getPaymentLinks({ 
    bool? active,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_links';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentLinksResourcePaymentLinkList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentLinksResourcePaymentLinkList),
      ) as PaymentLinksResourcePaymentLinkList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentLinksResourcePaymentLinkList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve payment link
  /// &lt;p&gt;Retrieve a payment link.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [paymentLink] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentLink] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentLink>> getPaymentLinksPaymentLink({ 
    required String paymentLink,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_links/{payment_link}'.replaceAll('{' r'payment_link' '}', encodeQueryParameter(_serializers, paymentLink, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentLink? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentLink),
      ) as PaymentLink;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentLink>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a payment link&#39;s line items
  /// &lt;p&gt;When retrieving a payment link, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [paymentLink] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentLinksResourceListLineItems] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentLinksResourceListLineItems>> getPaymentLinksPaymentLinkLineItems({ 
    required String paymentLink,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_links/{payment_link}/line_items'.replaceAll('{' r'payment_link' '}', encodeQueryParameter(_serializers, paymentLink, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentLinksResourceListLineItems? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentLinksResourceListLineItems),
      ) as PaymentLinksResourceListLineItems;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentLinksResourceListLineItems>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List payment method configurations
  /// &lt;p&gt;List payment method configurations&lt;/p&gt;
  ///
  /// Parameters:
  /// * [application] - The Connect application to filter by.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentMethodConfigResourcePaymentMethodConfigurationsList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentMethodConfigResourcePaymentMethodConfigurationsList>> getPaymentMethodConfigurations({ 
    GetPaymentMethodConfigurationsApplicationParameter? application,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_method_configurations';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (application != null) r'application': encodeQueryParameter(_serializers, application, const FullType(GetPaymentMethodConfigurationsApplicationParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentMethodConfigResourcePaymentMethodConfigurationsList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentMethodConfigResourcePaymentMethodConfigurationsList),
      ) as PaymentMethodConfigResourcePaymentMethodConfigurationsList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentMethodConfigResourcePaymentMethodConfigurationsList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve payment method configuration
  /// &lt;p&gt;Retrieve payment method configuration&lt;/p&gt;
  ///
  /// Parameters:
  /// * [configuration] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentMethodConfiguration] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentMethodConfiguration>> getPaymentMethodConfigurationsConfiguration({ 
    required String configuration,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_method_configurations/{configuration}'.replaceAll('{' r'configuration' '}', encodeQueryParameter(_serializers, configuration, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentMethodConfiguration? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentMethodConfiguration),
      ) as PaymentMethodConfiguration;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentMethodConfiguration>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List payment method domains
  /// &lt;p&gt;Lists the details of existing payment method domains.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [domainName] - The domain name that this payment method domain object represents.
  /// * [enabled] - Whether this payment method domain is enabled. If the domain is not enabled, payment methods will not appear in Elements or Embedded Checkout
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentMethodDomainResourcePaymentMethodDomainList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentMethodDomainResourcePaymentMethodDomainList>> getPaymentMethodDomains({ 
    String? domainName,
    bool? enabled,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_method_domains';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (domainName != null) r'domain_name': encodeQueryParameter(_serializers, domainName, const FullType(String)),
      if (enabled != null) r'enabled': encodeQueryParameter(_serializers, enabled, const FullType(bool)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentMethodDomainResourcePaymentMethodDomainList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentMethodDomainResourcePaymentMethodDomainList),
      ) as PaymentMethodDomainResourcePaymentMethodDomainList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentMethodDomainResourcePaymentMethodDomainList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a payment method domain
  /// &lt;p&gt;Retrieves the details of an existing payment method domain.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [paymentMethodDomain] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentMethodDomain] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentMethodDomain>> getPaymentMethodDomainsPaymentMethodDomain({ 
    required String paymentMethodDomain,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_method_domains/{payment_method_domain}'.replaceAll('{' r'payment_method_domain' '}', encodeQueryParameter(_serializers, paymentMethodDomain, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentMethodDomain? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentMethodDomain),
      ) as PaymentMethodDomain;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentMethodDomain>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List PaymentMethods
  /// &lt;p&gt;Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer_list\&quot;&gt;List a Customer’s PaymentMethods&lt;/a&gt; API instead.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] - The ID of the customer whose PaymentMethods will be retrieved.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [type] - An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentFlowsPaymentMethodList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentFlowsPaymentMethodList>> getPaymentMethods({ 
    String? customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? type,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_methods';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentFlowsPaymentMethodList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentFlowsPaymentMethodList),
      ) as PaymentFlowsPaymentMethodList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentFlowsPaymentMethodList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a PaymentMethod
  /// &lt;p&gt;Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use &lt;a href&#x3D;\&quot;/docs/api/payment_methods/customer\&quot;&gt;Retrieve a Customer’s PaymentMethods&lt;/a&gt;&lt;/p&gt;
  ///
  /// Parameters:
  /// * [paymentMethod] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentMethod] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentMethod>> getPaymentMethodsPaymentMethod({ 
    required String paymentMethod,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_methods/{payment_method}'.replaceAll('{' r'payment_method' '}', encodeQueryParameter(_serializers, paymentMethod, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentMethod? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentMethod),
      ) as PaymentMethod;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentMethod>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all payouts
  /// &lt;p&gt;Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [arrivalDate] - Only return payouts that are expected to arrive during the given date interval.
  /// * [created] - Only return payouts that were created during the given date interval.
  /// * [destination] - The ID of an external account - only return payouts sent to this external account.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PayoutList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PayoutList>> getPayouts({ 
    GetAccountsCreatedParameter? arrivalDate,
    GetAccountsCreatedParameter? created,
    String? destination,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payouts';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (arrivalDate != null) r'arrival_date': encodeQueryParameter(_serializers, arrivalDate, const FullType(GetAccountsCreatedParameter)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (destination != null) r'destination': encodeQueryParameter(_serializers, destination, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PayoutList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PayoutList),
      ) as PayoutList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PayoutList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a payout
  /// &lt;p&gt;Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [payout] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Payout] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Payout>> getPayoutsPayout({ 
    required String payout,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payouts/{payout}'.replaceAll('{' r'payout' '}', encodeQueryParameter(_serializers, payout, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Payout? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Payout),
      ) as Payout;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Payout>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all plans
  /// &lt;p&gt;Returns a list of your plans.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [active] - Only return plans that are active or inactive (e.g., pass `false` to list all inactive plans).
  /// * [created] - A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [product] - Only return plans for the given product.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PlanList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PlanList>> getPlans({ 
    bool? active,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? product,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/plans';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (product != null) r'product': encodeQueryParameter(_serializers, product, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PlanList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PlanList),
      ) as PlanList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PlanList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a plan
  /// &lt;p&gt;Retrieves the plan with the given ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [plan] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Plan] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Plan>> getPlansPlan({ 
    required String plan,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/plans/{plan}'.replaceAll('{' r'plan' '}', encodeQueryParameter(_serializers, plan, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Plan? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Plan),
      ) as Plan;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Plan>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all prices
  /// &lt;p&gt;Returns a list of your active prices, excluding &lt;a href&#x3D;\&quot;/docs/products-prices/pricing-models#inline-pricing\&quot;&gt;inline prices&lt;/a&gt;. For the list of inactive prices, set &lt;code&gt;active&lt;/code&gt; to false.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [active] - Only return prices that are active or inactive (e.g., pass `false` to list all inactive prices).
  /// * [created] - A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
  /// * [currency] - Only return prices for the given currency.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [lookupKeys] - Only return the price with these lookup_keys, if any exist. You can specify up to 10 lookup_keys.
  /// * [product] - Only return prices for the given product.
  /// * [recurring] - Only return prices with these recurring fields.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [type] - Only return prices of type `recurring` or `one_time`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PriceList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PriceList>> getPrices({ 
    bool? active,
    GetAccountsCreatedParameter? created,
    String? currency,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    BuiltList<String>? lookupKeys,
    String? product,
    AllPricesRecurringParams? recurring,
    String? startingAfter,
    String? type,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/prices';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (lookupKeys != null) r'lookup_keys': encodeCollectionQueryParameter<String>(_serializers, lookupKeys, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (product != null) r'product': encodeQueryParameter(_serializers, product, const FullType(String)),
      if (recurring != null) r'recurring': encodeQueryParameter(_serializers, recurring, const FullType(AllPricesRecurringParams)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PriceList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PriceList),
      ) as PriceList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PriceList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a price
  /// &lt;p&gt;Retrieves the price with the given ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [price] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Price] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Price>> getPricesPrice({ 
    required String price,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/prices/{price}'.replaceAll('{' r'price' '}', encodeQueryParameter(_serializers, price, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Price? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Price),
      ) as Price;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Price>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Search prices
  /// &lt;p&gt;Search for prices you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [query] - The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for prices](https://stripe.com/docs/search#query-fields-for-prices).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [page] - A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SearchResult4] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SearchResult4>> getPricesSearch({ 
    required String query,
    BuiltList<String>? expand,
    int? limit,
    String? page,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/prices/search';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (page != null) r'page': encodeQueryParameter(_serializers, page, const FullType(String)),
      r'query': encodeQueryParameter(_serializers, query, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SearchResult4? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SearchResult4),
      ) as SearchResult4;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SearchResult4>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all products
  /// &lt;p&gt;Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [active] - Only return products that are active or inactive (e.g., pass `false` to list all inactive products).
  /// * [created] - Only return products that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [ids] - Only return products with the given IDs. Cannot be used with [starting_after](https://stripe.com/docs/api#list_products-starting_after) or [ending_before](https://stripe.com/docs/api#list_products-ending_before).
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [shippable] - Only return products that can be shipped (i.e., physical, not digital products).
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [url] - Only return products with the given url.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ProductList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ProductList>> getProducts({ 
    bool? active,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    BuiltList<String>? ids,
    int? limit,
    bool? shippable,
    String? startingAfter,
    String? url,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/products';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (ids != null) r'ids': encodeCollectionQueryParameter<String>(_serializers, ids, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (shippable != null) r'shippable': encodeQueryParameter(_serializers, shippable, const FullType(bool)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (url != null) r'url': encodeQueryParameter(_serializers, url, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ProductList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ProductList),
      ) as ProductList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ProductList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a product
  /// &lt;p&gt;Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Product] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Product>> getProductsId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/products/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Product? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Product),
      ) as Product;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Product>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all features attached to a product
  /// &lt;p&gt;Retrieve a list of features for a product&lt;/p&gt;
  ///
  /// Parameters:
  /// * [product] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [EntitlementsResourceProductFeatureList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<EntitlementsResourceProductFeatureList>> getProductsProductFeatures({ 
    required String product,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/products/{product}/features'.replaceAll('{' r'product' '}', encodeQueryParameter(_serializers, product, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    EntitlementsResourceProductFeatureList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(EntitlementsResourceProductFeatureList),
      ) as EntitlementsResourceProductFeatureList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<EntitlementsResourceProductFeatureList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a product_feature
  /// &lt;p&gt;Retrieves a product_feature, which represents a feature attachment to a product&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] - The ID of the product_feature.
  /// * [product] - The ID of the product.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ProductFeature] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ProductFeature>> getProductsProductFeaturesId({ 
    required String id,
    required String product,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/products/{product}/features/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString()).replaceAll('{' r'product' '}', encodeQueryParameter(_serializers, product, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ProductFeature? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ProductFeature),
      ) as ProductFeature;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ProductFeature>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Search products
  /// &lt;p&gt;Search for products you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [query] - The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for products](https://stripe.com/docs/search#query-fields-for-products).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [page] - A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SearchResult5] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SearchResult5>> getProductsSearch({ 
    required String query,
    BuiltList<String>? expand,
    int? limit,
    String? page,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/products/search';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (page != null) r'page': encodeQueryParameter(_serializers, page, const FullType(String)),
      r'query': encodeQueryParameter(_serializers, query, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SearchResult5? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SearchResult5),
      ) as SearchResult5;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SearchResult5>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all promotion codes
  /// &lt;p&gt;Returns a list of your promotion codes.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [active] - Filter promotion codes by whether they are active.
  /// * [code] - Only return promotion codes that have this case-insensitive code.
  /// * [coupon] - Only return promotion codes for this coupon.
  /// * [created] - A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
  /// * [customer] - Only return promotion codes that are restricted to this customer.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PromotionCodesResourcePromotionCodeList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PromotionCodesResourcePromotionCodeList>> getPromotionCodes({ 
    bool? active,
    String? code,
    String? coupon,
    GetAccountsCreatedParameter? created,
    String? customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/promotion_codes';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
      if (code != null) r'code': encodeQueryParameter(_serializers, code, const FullType(String)),
      if (coupon != null) r'coupon': encodeQueryParameter(_serializers, coupon, const FullType(String)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PromotionCodesResourcePromotionCodeList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PromotionCodesResourcePromotionCodeList),
      ) as PromotionCodesResourcePromotionCodeList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PromotionCodesResourcePromotionCodeList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a promotion code
  /// &lt;p&gt;Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing &lt;code&gt;code&lt;/code&gt; use &lt;a href&#x3D;\&quot;/docs/api/promotion_codes/list\&quot;&gt;list&lt;/a&gt; with the desired &lt;code&gt;code&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [promotionCode] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PromotionCode] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PromotionCode>> getPromotionCodesPromotionCode({ 
    required String promotionCode,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/promotion_codes/{promotion_code}'.replaceAll('{' r'promotion_code' '}', encodeQueryParameter(_serializers, promotionCode, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PromotionCode? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PromotionCode),
      ) as PromotionCode;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PromotionCode>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all quotes
  /// &lt;p&gt;Returns a list of your quotes.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] - The ID of the customer whose quotes will be retrieved.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - The status of the quote.
  /// * [testClock] - Provides a list of quotes that are associated with the specified test clock. The response will not include quotes with test clocks if this and the customer parameter is not set.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [QuotesResourceQuoteList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<QuotesResourceQuoteList>> getQuotes({ 
    String? customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? status,
    String? testClock,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/quotes';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
      if (testClock != null) r'test_clock': encodeQueryParameter(_serializers, testClock, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    QuotesResourceQuoteList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(QuotesResourceQuoteList),
      ) as QuotesResourceQuoteList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<QuotesResourceQuoteList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a quote
  /// &lt;p&gt;Retrieves the quote with the given ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [quote] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Quote] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Quote>> getQuotesQuote({ 
    required String quote,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/quotes/{quote}'.replaceAll('{' r'quote' '}', encodeQueryParameter(_serializers, quote, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Quote? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Quote),
      ) as Quote;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Quote>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a quote&#39;s upfront line items
  /// &lt;p&gt;When retrieving a quote, there is an includable &lt;a href&#x3D;\&quot;https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items\&quot;&gt;&lt;strong&gt;computed.upfront.line_items&lt;/strong&gt;&lt;/a&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [quote] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [QuotesResourceListLineItems] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<QuotesResourceListLineItems>> getQuotesQuoteComputedUpfrontLineItems({ 
    required String quote,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/quotes/{quote}/computed_upfront_line_items'.replaceAll('{' r'quote' '}', encodeQueryParameter(_serializers, quote, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    QuotesResourceListLineItems? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(QuotesResourceListLineItems),
      ) as QuotesResourceListLineItems;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<QuotesResourceListLineItems>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a quote&#39;s line items
  /// &lt;p&gt;When retrieving a quote, there is an includable &lt;strong&gt;line_items&lt;/strong&gt; property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [quote] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [QuotesResourceListLineItems] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<QuotesResourceListLineItems>> getQuotesQuoteLineItems({ 
    required String quote,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/quotes/{quote}/line_items'.replaceAll('{' r'quote' '}', encodeQueryParameter(_serializers, quote, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    QuotesResourceListLineItems? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(QuotesResourceListLineItems),
      ) as QuotesResourceListLineItems;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<QuotesResourceListLineItems>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Download quote PDF
  /// &lt;p&gt;Download the PDF for a finalized quote. Explanation for special handling can be found &lt;a href&#x3D;\&quot;https://docs.stripe.com/quotes/overview#quote_pdf\&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
  ///
  /// Parameters:
  /// * [quote] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Uint8List] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Uint8List>> getQuotesQuotePdf({ 
    required String quote,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/quotes/{quote}/pdf'.replaceAll('{' r'quote' '}', encodeQueryParameter(_serializers, quote, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      responseType: ResponseType.bytes,
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Uint8List? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : rawResponse as Uint8List;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Uint8List>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all early fraud warnings
  /// &lt;p&gt;Returns a list of early fraud warnings.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [charge] - Only return early fraud warnings for the charge specified by this charge ID.
  /// * [created] - Only return early fraud warnings that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [paymentIntent] - Only return early fraud warnings for charges that were created by the PaymentIntent specified by this PaymentIntent ID.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [RadarEarlyFraudWarningList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<RadarEarlyFraudWarningList>> getRadarEarlyFraudWarnings({ 
    String? charge,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? paymentIntent,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/radar/early_fraud_warnings';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (charge != null) r'charge': encodeQueryParameter(_serializers, charge, const FullType(String)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (paymentIntent != null) r'payment_intent': encodeQueryParameter(_serializers, paymentIntent, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    RadarEarlyFraudWarningList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(RadarEarlyFraudWarningList),
      ) as RadarEarlyFraudWarningList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<RadarEarlyFraudWarningList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an early fraud warning
  /// &lt;p&gt;Retrieves the details of an early fraud warning that has previously been created. &lt;/p&gt;  &lt;p&gt;Please refer to the &lt;a href&#x3D;\&quot;#early_fraud_warning_object\&quot;&gt;early fraud warning&lt;/a&gt; object reference for more details.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [earlyFraudWarning] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [RadarEarlyFraudWarning] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<RadarEarlyFraudWarning>> getRadarEarlyFraudWarningsEarlyFraudWarning({ 
    required String earlyFraudWarning,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/radar/early_fraud_warnings/{early_fraud_warning}'.replaceAll('{' r'early_fraud_warning' '}', encodeQueryParameter(_serializers, earlyFraudWarning, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    RadarEarlyFraudWarning? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(RadarEarlyFraudWarning),
      ) as RadarEarlyFraudWarning;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<RadarEarlyFraudWarning>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all value list items
  /// &lt;p&gt;Returns a list of &lt;code&gt;ValueListItem&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [valueList] - Identifier for the parent value list this item belongs to.
  /// * [created] - Only return items that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [value] - Return items belonging to the parent list whose value matches the specified value (using an \"is like\" match).
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [RadarListListItemList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<RadarListListItemList>> getRadarValueListItems({ 
    required String valueList,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? value,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/radar/value_list_items';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (value != null) r'value': encodeQueryParameter(_serializers, value, const FullType(String)),
      r'value_list': encodeQueryParameter(_serializers, valueList, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    RadarListListItemList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(RadarListListItemList),
      ) as RadarListListItemList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<RadarListListItemList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a value list item
  /// &lt;p&gt;Retrieves a &lt;code&gt;ValueListItem&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [item] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [RadarValueListItem] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<RadarValueListItem>> getRadarValueListItemsItem({ 
    required String item,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/radar/value_list_items/{item}'.replaceAll('{' r'item' '}', encodeQueryParameter(_serializers, item, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    RadarValueListItem? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(RadarValueListItem),
      ) as RadarValueListItem;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<RadarValueListItem>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all value lists
  /// &lt;p&gt;Returns a list of &lt;code&gt;ValueList&lt;/code&gt; objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [alias] - The alias used to reference the value list when writing rules.
  /// * [contains] - A value contained within a value list - returns all value lists containing this value.
  /// * [created] - Only return value lists that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [RadarListListList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<RadarListListList>> getRadarValueLists({ 
    String? alias,
    String? contains,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/radar/value_lists';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (alias != null) r'alias': encodeQueryParameter(_serializers, alias, const FullType(String)),
      if (contains != null) r'contains': encodeQueryParameter(_serializers, contains, const FullType(String)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    RadarListListList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(RadarListListList),
      ) as RadarListListList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<RadarListListList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a value list
  /// &lt;p&gt;Retrieves a &lt;code&gt;ValueList&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [valueList] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [RadarValueList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<RadarValueList>> getRadarValueListsValueList({ 
    required String valueList,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/radar/value_lists/{value_list}'.replaceAll('{' r'value_list' '}', encodeQueryParameter(_serializers, valueList, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    RadarValueList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(RadarValueList),
      ) as RadarValueList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<RadarValueList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all refunds
  /// &lt;p&gt;Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first. The 10 most recent refunds are always available by default on the Charge object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [charge] - Only return refunds for the charge specified by this charge ID.
  /// * [created] - Only return refunds that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [paymentIntent] - Only return refunds for the PaymentIntent specified by this ID.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [APIMethodRefundList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<APIMethodRefundList>> getRefunds({ 
    String? charge,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? paymentIntent,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/refunds';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (charge != null) r'charge': encodeQueryParameter(_serializers, charge, const FullType(String)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (paymentIntent != null) r'payment_intent': encodeQueryParameter(_serializers, paymentIntent, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    APIMethodRefundList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(APIMethodRefundList),
      ) as APIMethodRefundList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<APIMethodRefundList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a refund
  /// &lt;p&gt;Retrieves the details of an existing refund.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [refund] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Refund] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Refund>> getRefundsRefund({ 
    required String refund,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/refunds/{refund}'.replaceAll('{' r'refund' '}', encodeQueryParameter(_serializers, refund, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Refund? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Refund),
      ) as Refund;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Refund>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all Report Runs
  /// &lt;p&gt;Returns a list of Report Runs, with the most recent appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Only return Report Runs that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FinancialReportingFinanceReportRunList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FinancialReportingFinanceReportRunList>> getReportingReportRuns({ 
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/reporting/report_runs';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FinancialReportingFinanceReportRunList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FinancialReportingFinanceReportRunList),
      ) as FinancialReportingFinanceReportRunList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FinancialReportingFinanceReportRunList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a Report Run
  /// &lt;p&gt;Retrieves the details of an existing Report Run.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [reportRun] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ReportingReportRun] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ReportingReportRun>> getReportingReportRunsReportRun({ 
    required String reportRun,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/reporting/report_runs/{report_run}'.replaceAll('{' r'report_run' '}', encodeQueryParameter(_serializers, reportRun, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ReportingReportRun? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ReportingReportRun),
      ) as ReportingReportRun;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ReportingReportRun>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all Report Types
  /// &lt;p&gt;Returns a full list of Report Types.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FinancialReportingFinanceReportTypeList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FinancialReportingFinanceReportTypeList>> getReportingReportTypes({ 
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/reporting/report_types';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FinancialReportingFinanceReportTypeList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FinancialReportingFinanceReportTypeList),
      ) as FinancialReportingFinanceReportTypeList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FinancialReportingFinanceReportTypeList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a Report Type
  /// &lt;p&gt;Retrieves the details of a Report Type. (Certain report types require a &lt;a href&#x3D;\&quot;https://stripe.com/docs/keys#test-live-modes\&quot;&gt;live-mode API key&lt;/a&gt;.)&lt;/p&gt;
  ///
  /// Parameters:
  /// * [reportType] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ReportingReportType] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ReportingReportType>> getReportingReportTypesReportType({ 
    required String reportType,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/reporting/report_types/{report_type}'.replaceAll('{' r'report_type' '}', encodeQueryParameter(_serializers, reportType, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ReportingReportType? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ReportingReportType),
      ) as ReportingReportType;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ReportingReportType>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all open reviews
  /// &lt;p&gt;Returns a list of &lt;code&gt;Review&lt;/code&gt; objects that have &lt;code&gt;open&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;. The objects are sorted in descending order by creation date, with the most recently created object appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Only return reviews that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [RadarReviewList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<RadarReviewList>> getReviews({ 
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/reviews';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    RadarReviewList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(RadarReviewList),
      ) as RadarReviewList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<RadarReviewList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a review
  /// &lt;p&gt;Retrieves a &lt;code&gt;Review&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [review] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Review] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Review>> getReviewsReview({ 
    required String review,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/reviews/{review}'.replaceAll('{' r'review' '}', encodeQueryParameter(_serializers, review, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Review? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Review),
      ) as Review;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Review>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all SetupAttempts
  /// &lt;p&gt;Returns a list of SetupAttempts that associate with a provided SetupIntent.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [setupIntent] - Only return SetupAttempts created by the SetupIntent specified by this ID.
  /// * [created] - A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp or a dictionary with a number of different query options.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentFlowsSetupIntentSetupAttemptList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentFlowsSetupIntentSetupAttemptList>> getSetupAttempts({ 
    required String setupIntent,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/setup_attempts';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      r'setup_intent': encodeQueryParameter(_serializers, setupIntent, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentFlowsSetupIntentSetupAttemptList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentFlowsSetupIntentSetupAttemptList),
      ) as PaymentFlowsSetupIntentSetupAttemptList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentFlowsSetupIntentSetupAttemptList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all SetupIntents
  /// &lt;p&gt;Returns a list of SetupIntents.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [attachToSelf] - If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
  /// * [created] - A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
  /// * [customer] - Only return SetupIntents for the customer specified by this customer ID.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [paymentMethod] - Only return SetupIntents that associate with the specified payment method.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentFlowsSetupIntentList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentFlowsSetupIntentList>> getSetupIntents({ 
    bool? attachToSelf,
    GetAccountsCreatedParameter? created,
    String? customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? paymentMethod,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/setup_intents';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (attachToSelf != null) r'attach_to_self': encodeQueryParameter(_serializers, attachToSelf, const FullType(bool)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (paymentMethod != null) r'payment_method': encodeQueryParameter(_serializers, paymentMethod, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentFlowsSetupIntentList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentFlowsSetupIntentList),
      ) as PaymentFlowsSetupIntentList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentFlowsSetupIntentList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a SetupIntent
  /// &lt;p&gt;Retrieves the details of a SetupIntent that has previously been created. &lt;/p&gt;  &lt;p&gt;Client-side retrieval using a publishable key is allowed when the &lt;code&gt;client_secret&lt;/code&gt; is provided in the query string. &lt;/p&gt;  &lt;p&gt;When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the &lt;a href&#x3D;\&quot;#setup_intent_object\&quot;&gt;SetupIntent&lt;/a&gt; object reference for more details.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [intent] 
  /// * [clientSecret] - The client secret of the SetupIntent. We require this string if you use a publishable key to retrieve the SetupIntent.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SetupIntent] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SetupIntent>> getSetupIntentsIntent({ 
    required String intent,
    String? clientSecret,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/setup_intents/{intent}'.replaceAll('{' r'intent' '}', encodeQueryParameter(_serializers, intent, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (clientSecret != null) r'client_secret': encodeQueryParameter(_serializers, clientSecret, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SetupIntent? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SetupIntent),
      ) as SetupIntent;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SetupIntent>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all shipping rates
  /// &lt;p&gt;Returns a list of your shipping rates.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [active] - Only return shipping rates that are active or inactive.
  /// * [created] - A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
  /// * [currency] - Only return shipping rates for the given currency.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ShippingResourcesShippingRateList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ShippingResourcesShippingRateList>> getShippingRates({ 
    bool? active,
    GetAccountsCreatedParameter? created,
    String? currency,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/shipping_rates';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ShippingResourcesShippingRateList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ShippingResourcesShippingRateList),
      ) as ShippingResourcesShippingRateList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ShippingResourcesShippingRateList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a shipping rate
  /// &lt;p&gt;Returns the shipping rate object with the given ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [shippingRateToken] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ShippingRate] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ShippingRate>> getShippingRatesShippingRateToken({ 
    required String shippingRateToken,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/shipping_rates/{shipping_rate_token}'.replaceAll('{' r'shipping_rate_token' '}', encodeQueryParameter(_serializers, shippingRateToken, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ShippingRate? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ShippingRate),
      ) as ShippingRate;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ShippingRate>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all scheduled query runs
  /// &lt;p&gt;Returns a list of scheduled query runs.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SigmaScheduledQueryRunList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SigmaScheduledQueryRunList>> getSigmaScheduledQueryRuns({ 
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/sigma/scheduled_query_runs';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SigmaScheduledQueryRunList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SigmaScheduledQueryRunList),
      ) as SigmaScheduledQueryRunList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SigmaScheduledQueryRunList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a scheduled query run
  /// &lt;p&gt;Retrieves the details of an scheduled query run.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [scheduledQueryRun] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ScheduledQueryRun] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ScheduledQueryRun>> getSigmaScheduledQueryRunsScheduledQueryRun({ 
    required String scheduledQueryRun,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/sigma/scheduled_query_runs/{scheduled_query_run}'.replaceAll('{' r'scheduled_query_run' '}', encodeQueryParameter(_serializers, scheduledQueryRun, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ScheduledQueryRun? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ScheduledQueryRun),
      ) as ScheduledQueryRun;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ScheduledQueryRun>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a source
  /// &lt;p&gt;Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [source_] 
  /// * [clientSecret] - The client secret of the source. Required if a publishable key is used to retrieve the source.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ModelSource] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ModelSource>> getSourcesSource({ 
    required String source_,
    String? clientSecret,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/sources/{source}'.replaceAll('{' r'source' '}', encodeQueryParameter(_serializers, source_, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (clientSecret != null) r'client_secret': encodeQueryParameter(_serializers, clientSecret, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ModelSource? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ModelSource),
      ) as ModelSource;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ModelSource>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a Source MandateNotification
  /// &lt;p&gt;Retrieves a new Source MandateNotification.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [mandateNotification] 
  /// * [source_] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SourceMandateNotification] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SourceMandateNotification>> getSourcesSourceMandateNotificationsMandateNotification({ 
    required String mandateNotification,
    required String source_,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/sources/{source}/mandate_notifications/{mandate_notification}'.replaceAll('{' r'mandate_notification' '}', encodeQueryParameter(_serializers, mandateNotification, const FullType(String)).toString()).replaceAll('{' r'source' '}', encodeQueryParameter(_serializers, source_, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SourceMandateNotification? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SourceMandateNotification),
      ) as SourceMandateNotification;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SourceMandateNotification>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// getSourcesSourceSourceTransactions
  /// &lt;p&gt;List source transactions for a given source.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [source_] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ApmsSourcesSourceTransactionList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ApmsSourcesSourceTransactionList>> getSourcesSourceSourceTransactions({ 
    required String source_,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/sources/{source}/source_transactions'.replaceAll('{' r'source' '}', encodeQueryParameter(_serializers, source_, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ApmsSourcesSourceTransactionList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ApmsSourcesSourceTransactionList),
      ) as ApmsSourcesSourceTransactionList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ApmsSourcesSourceTransactionList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a source transaction
  /// &lt;p&gt;Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [source_] 
  /// * [sourceTransaction] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SourceTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SourceTransaction>> getSourcesSourceSourceTransactionsSourceTransaction({ 
    required String source_,
    required String sourceTransaction,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/sources/{source}/source_transactions/{source_transaction}'.replaceAll('{' r'source' '}', encodeQueryParameter(_serializers, source_, const FullType(String)).toString()).replaceAll('{' r'source_transaction' '}', encodeQueryParameter(_serializers, sourceTransaction, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SourceTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SourceTransaction),
      ) as SourceTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SourceTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all subscription items
  /// &lt;p&gt;Returns a list of your subscription items for a given subscription.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [subscription] - The ID of the subscription whose items will be retrieved.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SubscriptionsItemsSubscriptionItemList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SubscriptionsItemsSubscriptionItemList>> getSubscriptionItems({ 
    required String subscription,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscription_items';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      r'subscription': encodeQueryParameter(_serializers, subscription, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SubscriptionsItemsSubscriptionItemList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SubscriptionsItemsSubscriptionItemList),
      ) as SubscriptionsItemsSubscriptionItemList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SubscriptionsItemsSubscriptionItemList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a subscription item
  /// &lt;p&gt;Retrieves the subscription item with the given ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [item] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SubscriptionItem] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SubscriptionItem>> getSubscriptionItemsItem({ 
    required String item,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscription_items/{item}'.replaceAll('{' r'item' '}', encodeQueryParameter(_serializers, item, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SubscriptionItem? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SubscriptionItem),
      ) as SubscriptionItem;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SubscriptionItem>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all schedules
  /// &lt;p&gt;Retrieves the list of your subscription schedules.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [canceledAt] - Only return subscription schedules that were created canceled the given date interval.
  /// * [completedAt] - Only return subscription schedules that completed during the given date interval.
  /// * [created] - Only return subscription schedules that were created during the given date interval.
  /// * [customer] - Only return subscription schedules for the given customer.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [releasedAt] - Only return subscription schedules that were released during the given date interval.
  /// * [scheduled] - Only return subscription schedules that have not started yet.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SubscriptionSchedulesResourceScheduleList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SubscriptionSchedulesResourceScheduleList>> getSubscriptionSchedules({ 
    GetAccountsCreatedParameter? canceledAt,
    GetAccountsCreatedParameter? completedAt,
    GetAccountsCreatedParameter? created,
    String? customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    GetAccountsCreatedParameter? releasedAt,
    bool? scheduled,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscription_schedules';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (canceledAt != null) r'canceled_at': encodeQueryParameter(_serializers, canceledAt, const FullType(GetAccountsCreatedParameter)),
      if (completedAt != null) r'completed_at': encodeQueryParameter(_serializers, completedAt, const FullType(GetAccountsCreatedParameter)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (releasedAt != null) r'released_at': encodeQueryParameter(_serializers, releasedAt, const FullType(GetAccountsCreatedParameter)),
      if (scheduled != null) r'scheduled': encodeQueryParameter(_serializers, scheduled, const FullType(bool)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SubscriptionSchedulesResourceScheduleList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SubscriptionSchedulesResourceScheduleList),
      ) as SubscriptionSchedulesResourceScheduleList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SubscriptionSchedulesResourceScheduleList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a schedule
  /// &lt;p&gt;Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [schedule] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SubscriptionSchedule] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SubscriptionSchedule>> getSubscriptionSchedulesSchedule({ 
    required String schedule,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscription_schedules/{schedule}'.replaceAll('{' r'schedule' '}', encodeQueryParameter(_serializers, schedule, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SubscriptionSchedule? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SubscriptionSchedule),
      ) as SubscriptionSchedule;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SubscriptionSchedule>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List subscriptions
  /// &lt;p&gt;By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify &lt;code&gt;status&#x3D;canceled&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [automaticTax] - Filter subscriptions by their automatic tax settings.
  /// * [collectionMethod] - The collection method of the subscriptions to retrieve. Either `charge_automatically` or `send_invoice`.
  /// * [created] - Only return subscriptions that were created during the given date interval.
  /// * [currentPeriodEnd] - Only return subscriptions whose current_period_end falls within the given date interval.
  /// * [currentPeriodStart] - Only return subscriptions whose current_period_start falls within the given date interval.
  /// * [customer] - The ID of the customer whose subscriptions will be retrieved.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [price] - Filter for subscriptions that contain this recurring price ID.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://stripe.com/docs/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned.
  /// * [testClock] - Filter for subscriptions that are associated with the specified test clock. The response will not include subscriptions with test clocks if this and the customer parameter is not set.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SubscriptionsSubscriptionList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SubscriptionsSubscriptionList>> getSubscriptions({ 
    AutomaticTaxFilterParams? automaticTax,
    String? collectionMethod,
    GetAccountsCreatedParameter? created,
    GetAccountsCreatedParameter? currentPeriodEnd,
    GetAccountsCreatedParameter? currentPeriodStart,
    String? customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? price,
    String? startingAfter,
    String? status,
    String? testClock,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscriptions';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (automaticTax != null) r'automatic_tax': encodeQueryParameter(_serializers, automaticTax, const FullType(AutomaticTaxFilterParams)),
      if (collectionMethod != null) r'collection_method': encodeQueryParameter(_serializers, collectionMethod, const FullType(String)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (currentPeriodEnd != null) r'current_period_end': encodeQueryParameter(_serializers, currentPeriodEnd, const FullType(GetAccountsCreatedParameter)),
      if (currentPeriodStart != null) r'current_period_start': encodeQueryParameter(_serializers, currentPeriodStart, const FullType(GetAccountsCreatedParameter)),
      if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (price != null) r'price': encodeQueryParameter(_serializers, price, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
      if (testClock != null) r'test_clock': encodeQueryParameter(_serializers, testClock, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SubscriptionsSubscriptionList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SubscriptionsSubscriptionList),
      ) as SubscriptionsSubscriptionList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SubscriptionsSubscriptionList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Search subscriptions
  /// &lt;p&gt;Search for subscriptions you’ve previously created using Stripe’s &lt;a href&#x3D;\&quot;/docs/search#search-query-language\&quot;&gt;Search Query Language&lt;/a&gt;. Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up to an hour behind during outages. Search functionality is not available to merchants in India.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [query] - The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for subscriptions](https://stripe.com/docs/search#query-fields-for-subscriptions).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [page] - A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SearchResult6] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SearchResult6>> getSubscriptionsSearch({ 
    required String query,
    BuiltList<String>? expand,
    int? limit,
    String? page,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscriptions/search';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (page != null) r'page': encodeQueryParameter(_serializers, page, const FullType(String)),
      r'query': encodeQueryParameter(_serializers, query, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SearchResult6? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SearchResult6),
      ) as SearchResult6;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SearchResult6>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a subscription
  /// &lt;p&gt;Retrieves the subscription with the given ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [subscriptionExposedId] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Subscription] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Subscription>> getSubscriptionsSubscriptionExposedId({ 
    required String subscriptionExposedId,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscriptions/{subscription_exposed_id}'.replaceAll('{' r'subscription_exposed_id' '}', encodeQueryParameter(_serializers, subscriptionExposedId, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Subscription? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Subscription),
      ) as Subscription;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Subscription>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a Tax Calculation
  /// &lt;p&gt;Retrieves a Tax &lt;code&gt;Calculation&lt;/code&gt; object, if the calculation hasn’t expired.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [calculation] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxCalculation] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxCalculation>> getTaxCalculationsCalculation({ 
    required String calculation,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax/calculations/{calculation}'.replaceAll('{' r'calculation' '}', encodeQueryParameter(_serializers, calculation, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxCalculation? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxCalculation),
      ) as TaxCalculation;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxCalculation>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a calculation&#39;s line items
  /// &lt;p&gt;Retrieves the line items of a tax calculation as a collection, if the calculation hasn’t expired.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [calculation] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxProductResourceTaxCalculationLineItemList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxProductResourceTaxCalculationLineItemList>> getTaxCalculationsCalculationLineItems({ 
    required String calculation,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax/calculations/{calculation}/line_items'.replaceAll('{' r'calculation' '}', encodeQueryParameter(_serializers, calculation, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxProductResourceTaxCalculationLineItemList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxProductResourceTaxCalculationLineItemList),
      ) as TaxProductResourceTaxCalculationLineItemList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxProductResourceTaxCalculationLineItemList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all tax codes
  /// &lt;p&gt;A list of &lt;a href&#x3D;\&quot;https://stripe.com/docs/tax/tax-categories\&quot;&gt;all tax codes available&lt;/a&gt; to add to Products in order to allow specific tax calculations.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxProductResourceTaxCodeList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxProductResourceTaxCodeList>> getTaxCodes({ 
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax_codes';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxProductResourceTaxCodeList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxProductResourceTaxCodeList),
      ) as TaxProductResourceTaxCodeList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxProductResourceTaxCodeList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a tax code
  /// &lt;p&gt;Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxCode] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxCode>> getTaxCodesId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax_codes/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxCode? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxCode),
      ) as TaxCode;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxCode>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all tax IDs
  /// &lt;p&gt;Returns a list of tax IDs.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [owner] - The account or customer the tax ID belongs to. Defaults to `owner[type]=self`.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxIDsList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxIDsList>> getTaxIds({ 
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    OwnerParams? owner,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax_ids';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (owner != null) r'owner': encodeQueryParameter(_serializers, owner, const FullType(OwnerParams)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxIDsList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxIDsList),
      ) as TaxIDsList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxIDsList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a tax ID
  /// &lt;p&gt;Retrieves an account or customer &lt;code&gt;tax_id&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxId] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxId>> getTaxIdsId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax_ids/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxId? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxId),
      ) as TaxId;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxId>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all tax rates
  /// &lt;p&gt;Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [active] - Optional flag to filter by tax rates that are either active or inactive (archived).
  /// * [created] - Optional range for filtering created date.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [inclusive] - Optional flag to filter by tax rates that are inclusive (or those that are not inclusive).
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxRatesList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxRatesList>> getTaxRates({ 
    bool? active,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    bool? inclusive,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax_rates';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (inclusive != null) r'inclusive': encodeQueryParameter(_serializers, inclusive, const FullType(bool)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxRatesList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxRatesList),
      ) as TaxRatesList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxRatesList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a tax rate
  /// &lt;p&gt;Retrieves a tax rate with the given ID&lt;/p&gt;
  ///
  /// Parameters:
  /// * [taxRate] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxRate] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxRate>> getTaxRatesTaxRate({ 
    required String taxRate,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax_rates/{tax_rate}'.replaceAll('{' r'tax_rate' '}', encodeQueryParameter(_serializers, taxRate, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxRate? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxRate),
      ) as TaxRate;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxRate>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List registrations
  /// &lt;p&gt;Returns a list of Tax &lt;code&gt;Registration&lt;/code&gt; objects.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - The status of the Tax Registration.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxProductRegistrationsResourceTaxRegistrationList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxProductRegistrationsResourceTaxRegistrationList>> getTaxRegistrations({ 
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax/registrations';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxProductRegistrationsResourceTaxRegistrationList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxProductRegistrationsResourceTaxRegistrationList),
      ) as TaxProductRegistrationsResourceTaxRegistrationList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxProductRegistrationsResourceTaxRegistrationList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a registration
  /// &lt;p&gt;Returns a Tax &lt;code&gt;Registration&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxRegistration] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxRegistration>> getTaxRegistrationsId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax/registrations/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxRegistration? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxRegistration),
      ) as TaxRegistration;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxRegistration>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve settings
  /// &lt;p&gt;Retrieves Tax &lt;code&gt;Settings&lt;/code&gt; for a merchant.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxSettings] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxSettings>> getTaxSettings({ 
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax/settings';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxSettings? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxSettings),
      ) as TaxSettings;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxSettings>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a transaction
  /// &lt;p&gt;Retrieves a Tax &lt;code&gt;Transaction&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [transaction] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxTransaction>> getTaxTransactionsTransaction({ 
    required String transaction,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax/transactions/{transaction}'.replaceAll('{' r'transaction' '}', encodeQueryParameter(_serializers, transaction, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxTransaction),
      ) as TaxTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a transaction&#39;s line items
  /// &lt;p&gt;Retrieves the line items of a committed standalone transaction as a collection.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [transaction] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxProductResourceTaxTransactionLineItemList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxProductResourceTaxTransactionLineItemList>> getTaxTransactionsTransactionLineItems({ 
    required String transaction,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax/transactions/{transaction}/line_items'.replaceAll('{' r'transaction' '}', encodeQueryParameter(_serializers, transaction, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxProductResourceTaxTransactionLineItemList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxProductResourceTaxTransactionLineItemList),
      ) as TaxProductResourceTaxTransactionLineItemList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxProductResourceTaxTransactionLineItemList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all Configurations
  /// &lt;p&gt;Returns a list of &lt;code&gt;Configuration&lt;/code&gt; objects.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [isAccountDefault] - if present, only return the account default or non-default configurations.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalConfigurationConfigurationList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalConfigurationConfigurationList>> getTerminalConfigurations({ 
    String? endingBefore,
    BuiltList<String>? expand,
    bool? isAccountDefault,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/configurations';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (isAccountDefault != null) r'is_account_default': encodeQueryParameter(_serializers, isAccountDefault, const FullType(bool)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalConfigurationConfigurationList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalConfigurationConfigurationList),
      ) as TerminalConfigurationConfigurationList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalConfigurationConfigurationList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a Configuration
  /// &lt;p&gt;Retrieves a &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [configuration] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [GetTerminalConfigurationsConfiguration200Response] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<GetTerminalConfigurationsConfiguration200Response>> getTerminalConfigurationsConfiguration({ 
    required String configuration,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/configurations/{configuration}'.replaceAll('{' r'configuration' '}', encodeQueryParameter(_serializers, configuration, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    GetTerminalConfigurationsConfiguration200Response? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(GetTerminalConfigurationsConfiguration200Response),
      ) as GetTerminalConfigurationsConfiguration200Response;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<GetTerminalConfigurationsConfiguration200Response>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all Locations
  /// &lt;p&gt;Returns a list of &lt;code&gt;Location&lt;/code&gt; objects.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalLocationLocationList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalLocationLocationList>> getTerminalLocations({ 
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/locations';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalLocationLocationList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalLocationLocationList),
      ) as TerminalLocationLocationList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalLocationLocationList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a Location
  /// &lt;p&gt;Retrieves a &lt;code&gt;Location&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [location] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [GetTerminalLocationsLocation200Response] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<GetTerminalLocationsLocation200Response>> getTerminalLocationsLocation({ 
    required String location,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/locations/{location}'.replaceAll('{' r'location' '}', encodeQueryParameter(_serializers, location, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    GetTerminalLocationsLocation200Response? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(GetTerminalLocationsLocation200Response),
      ) as GetTerminalLocationsLocation200Response;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<GetTerminalLocationsLocation200Response>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all Readers
  /// &lt;p&gt;Returns a list of &lt;code&gt;Reader&lt;/code&gt; objects.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [deviceType] - Filters readers by device type
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [location] - A location ID to filter the response list to only readers at the specific location
  /// * [serialNumber] - Filters readers by serial number
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - A status filter to filter readers to only offline or online readers
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalReaderRetrieveReader] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalReaderRetrieveReader>> getTerminalReaders({ 
    String? deviceType,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? location,
    String? serialNumber,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/readers';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (deviceType != null) r'device_type': encodeQueryParameter(_serializers, deviceType, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (location != null) r'location': encodeQueryParameter(_serializers, location, const FullType(String)),
      if (serialNumber != null) r'serial_number': encodeQueryParameter(_serializers, serialNumber, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalReaderRetrieveReader? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalReaderRetrieveReader),
      ) as TerminalReaderRetrieveReader;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalReaderRetrieveReader>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a Reader
  /// &lt;p&gt;Retrieves a &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [reader] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [GetTerminalReadersReader200Response] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<GetTerminalReadersReader200Response>> getTerminalReadersReader({ 
    required String reader,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/readers/{reader}'.replaceAll('{' r'reader' '}', encodeQueryParameter(_serializers, reader, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    GetTerminalReadersReader200Response? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(GetTerminalReadersReader200Response),
      ) as GetTerminalReadersReader200Response;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<GetTerminalReadersReader200Response>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all test clocks
  /// &lt;p&gt;Returns a list of your test clocks.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingClocksResourceBillingClockList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingClocksResourceBillingClockList>> getTestHelpersTestClocks({ 
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/test_clocks';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingClocksResourceBillingClockList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingClocksResourceBillingClockList),
      ) as BillingClocksResourceBillingClockList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingClocksResourceBillingClockList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a test clock
  /// &lt;p&gt;Retrieves a test clock.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [testClock] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TestHelpersTestClock] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TestHelpersTestClock>> getTestHelpersTestClocksTestClock({ 
    required String testClock,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/test_clocks/{test_clock}'.replaceAll('{' r'test_clock' '}', encodeQueryParameter(_serializers, testClock, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TestHelpersTestClock? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TestHelpersTestClock),
      ) as TestHelpersTestClock;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TestHelpersTestClock>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a token
  /// &lt;p&gt;Retrieves the token with the given ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [token] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Token] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Token>> getTokensToken({ 
    required String token,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tokens/{token}'.replaceAll('{' r'token' '}', encodeQueryParameter(_serializers, token, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Token? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Token),
      ) as Token;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Token>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all top-ups
  /// &lt;p&gt;Returns a list of top-ups.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [amount] - A positive integer representing how much to transfer.
  /// * [created] - A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TopupList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TopupList>> getTopups({ 
    GetAccountsCreatedParameter? amount,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/topups';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(GetAccountsCreatedParameter)),
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TopupList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TopupList),
      ) as TopupList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TopupList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a top-up
  /// &lt;p&gt;Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [topup] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Topup] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Topup>> getTopupsTopup({ 
    required String topup,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/topups/{topup}'.replaceAll('{' r'topup' '}', encodeQueryParameter(_serializers, topup, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Topup? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Topup),
      ) as Topup;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Topup>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all transfers
  /// &lt;p&gt;Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Only return transfers that were created during the given date interval.
  /// * [destination] - Only return transfers for the destination specified by this account ID.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [transferGroup] - Only return transfers with the specified transfer group.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TransferList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TransferList>> getTransfers({ 
    GetAccountsCreatedParameter? created,
    String? destination,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? transferGroup,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/transfers';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (destination != null) r'destination': encodeQueryParameter(_serializers, destination, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (transferGroup != null) r'transfer_group': encodeQueryParameter(_serializers, transferGroup, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TransferList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TransferList),
      ) as TransferList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TransferList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all reversals
  /// &lt;p&gt;You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;starting_after&lt;/code&gt; parameters to page through additional reversals.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TransferReversalList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TransferReversalList>> getTransfersIdReversals({ 
    required String id,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/transfers/{id}/reversals'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TransferReversalList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TransferReversalList),
      ) as TransferReversalList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TransferReversalList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a transfer
  /// &lt;p&gt;Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [transfer] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Transfer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Transfer>> getTransfersTransfer({ 
    required String transfer,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/transfers/{transfer}'.replaceAll('{' r'transfer' '}', encodeQueryParameter(_serializers, transfer, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Transfer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Transfer),
      ) as Transfer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Transfer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a reversal
  /// &lt;p&gt;By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [transfer] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TransferReversal] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TransferReversal>> getTransfersTransferReversalsId({ 
    required String id,
    required String transfer,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/transfers/{transfer}/reversals/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString()).replaceAll('{' r'transfer' '}', encodeQueryParameter(_serializers, transfer, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TransferReversal? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TransferReversal),
      ) as TransferReversal;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TransferReversal>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all CreditReversals
  /// &lt;p&gt;Returns a list of CreditReversals.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [financialAccount] - Returns objects associated with this FinancialAccount.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [receivedCredit] - Only return CreditReversals for the ReceivedCredit ID.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Only return CreditReversals for a given status.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryReceivedCreditsResourceCreditReversalList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryReceivedCreditsResourceCreditReversalList>> getTreasuryCreditReversals({ 
    required String financialAccount,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? receivedCredit,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/credit_reversals';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      r'financial_account': encodeQueryParameter(_serializers, financialAccount, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (receivedCredit != null) r'received_credit': encodeQueryParameter(_serializers, receivedCredit, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryReceivedCreditsResourceCreditReversalList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryReceivedCreditsResourceCreditReversalList),
      ) as TreasuryReceivedCreditsResourceCreditReversalList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryReceivedCreditsResourceCreditReversalList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a CreditReversal
  /// &lt;p&gt;Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list&lt;/p&gt;
  ///
  /// Parameters:
  /// * [creditReversal] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryCreditReversal] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryCreditReversal>> getTreasuryCreditReversalsCreditReversal({ 
    required String creditReversal,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/credit_reversals/{credit_reversal}'.replaceAll('{' r'credit_reversal' '}', encodeQueryParameter(_serializers, creditReversal, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryCreditReversal? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryCreditReversal),
      ) as TreasuryCreditReversal;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryCreditReversal>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all DebitReversals
  /// &lt;p&gt;Returns a list of DebitReversals.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [financialAccount] - Returns objects associated with this FinancialAccount.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [receivedDebit] - Only return DebitReversals for the ReceivedDebit ID.
  /// * [resolution] - Only return DebitReversals for a given resolution.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Only return DebitReversals for a given status.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryReceivedDebitsResourceDebitReversalList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryReceivedDebitsResourceDebitReversalList>> getTreasuryDebitReversals({ 
    required String financialAccount,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? receivedDebit,
    String? resolution,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/debit_reversals';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      r'financial_account': encodeQueryParameter(_serializers, financialAccount, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (receivedDebit != null) r'received_debit': encodeQueryParameter(_serializers, receivedDebit, const FullType(String)),
      if (resolution != null) r'resolution': encodeQueryParameter(_serializers, resolution, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryReceivedDebitsResourceDebitReversalList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryReceivedDebitsResourceDebitReversalList),
      ) as TreasuryReceivedDebitsResourceDebitReversalList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryReceivedDebitsResourceDebitReversalList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a DebitReversal
  /// &lt;p&gt;Retrieves a DebitReversal object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [debitReversal] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryDebitReversal] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryDebitReversal>> getTreasuryDebitReversalsDebitReversal({ 
    required String debitReversal,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/debit_reversals/{debit_reversal}'.replaceAll('{' r'debit_reversal' '}', encodeQueryParameter(_serializers, debitReversal, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryDebitReversal? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryDebitReversal),
      ) as TreasuryDebitReversal;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryDebitReversal>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all FinancialAccounts
  /// &lt;p&gt;Returns a list of FinancialAccounts.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [created] - Only return FinancialAccounts that were created during the given date interval.
  /// * [endingBefore] - An object ID cursor for use in pagination.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit ranging from 1 to 100 (defaults to 10).
  /// * [startingAfter] - An object ID cursor for use in pagination.
  /// * [status] - Only return FinancialAccounts that have the given status: `open` or `closed`
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryFinancialAccountsResourceFinancialAccountList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryFinancialAccountsResourceFinancialAccountList>> getTreasuryFinancialAccounts({ 
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/financial_accounts';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryFinancialAccountsResourceFinancialAccountList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryFinancialAccountsResourceFinancialAccountList),
      ) as TreasuryFinancialAccountsResourceFinancialAccountList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryFinancialAccountsResourceFinancialAccountList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a FinancialAccount
  /// &lt;p&gt;Retrieves the details of a FinancialAccount.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [financialAccount] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryFinancialAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryFinancialAccount>> getTreasuryFinancialAccountsFinancialAccount({ 
    required String financialAccount,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/financial_accounts/{financial_account}'.replaceAll('{' r'financial_account' '}', encodeQueryParameter(_serializers, financialAccount, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryFinancialAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryFinancialAccount),
      ) as TreasuryFinancialAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryFinancialAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve FinancialAccount Features
  /// &lt;p&gt;Retrieves Features information associated with the FinancialAccount.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [financialAccount] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryFinancialAccountFeatures] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryFinancialAccountFeatures>> getTreasuryFinancialAccountsFinancialAccountFeatures({ 
    required String financialAccount,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/financial_accounts/{financial_account}/features'.replaceAll('{' r'financial_account' '}', encodeQueryParameter(_serializers, financialAccount, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryFinancialAccountFeatures? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryFinancialAccountFeatures),
      ) as TreasuryFinancialAccountFeatures;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryFinancialAccountFeatures>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all InboundTransfers
  /// &lt;p&gt;Returns a list of InboundTransfers sent from the specified FinancialAccount.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [financialAccount] - Returns objects associated with this FinancialAccount.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Only return InboundTransfers that have the given status: `processing`, `succeeded`, `failed` or `canceled`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryInboundTransfersResourceInboundTransferList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryInboundTransfersResourceInboundTransferList>> getTreasuryInboundTransfers({ 
    required String financialAccount,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/inbound_transfers';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      r'financial_account': encodeQueryParameter(_serializers, financialAccount, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryInboundTransfersResourceInboundTransferList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryInboundTransfersResourceInboundTransferList),
      ) as TreasuryInboundTransfersResourceInboundTransferList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryInboundTransfersResourceInboundTransferList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an InboundTransfer
  /// &lt;p&gt;Retrieves the details of an existing InboundTransfer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryInboundTransfer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryInboundTransfer>> getTreasuryInboundTransfersId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/inbound_transfers/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryInboundTransfer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryInboundTransfer),
      ) as TreasuryInboundTransfer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryInboundTransfer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all OutboundPayments
  /// &lt;p&gt;Returns a list of OutboundPayments sent from the specified FinancialAccount.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [financialAccount] - Returns objects associated with this FinancialAccount.
  /// * [created] - Only return OutboundPayments that were created during the given date interval.
  /// * [customer] - Only return OutboundPayments sent to this customer.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Only return OutboundPayments that have the given status: `processing`, `failed`, `posted`, `returned`, or `canceled`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryOutboundPaymentsResourceOutboundPaymentList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryOutboundPaymentsResourceOutboundPaymentList>> getTreasuryOutboundPayments({ 
    required String financialAccount,
    GetAccountsCreatedParameter? created,
    String? customer,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/outbound_payments';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      r'financial_account': encodeQueryParameter(_serializers, financialAccount, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryOutboundPaymentsResourceOutboundPaymentList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryOutboundPaymentsResourceOutboundPaymentList),
      ) as TreasuryOutboundPaymentsResourceOutboundPaymentList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryOutboundPaymentsResourceOutboundPaymentList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an OutboundPayment
  /// &lt;p&gt;Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryOutboundPayment] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryOutboundPayment>> getTreasuryOutboundPaymentsId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/outbound_payments/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryOutboundPayment? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryOutboundPayment),
      ) as TreasuryOutboundPayment;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryOutboundPayment>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all OutboundTransfers
  /// &lt;p&gt;Returns a list of OutboundTransfers sent from the specified FinancialAccount.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [financialAccount] - Returns objects associated with this FinancialAccount.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Only return OutboundTransfers that have the given status: `processing`, `canceled`, `failed`, `posted`, or `returned`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryOutboundTransfersResourceOutboundTransferList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryOutboundTransfersResourceOutboundTransferList>> getTreasuryOutboundTransfers({ 
    required String financialAccount,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/outbound_transfers';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      r'financial_account': encodeQueryParameter(_serializers, financialAccount, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryOutboundTransfersResourceOutboundTransferList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryOutboundTransfersResourceOutboundTransferList),
      ) as TreasuryOutboundTransfersResourceOutboundTransferList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryOutboundTransfersResourceOutboundTransferList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve an OutboundTransfer
  /// &lt;p&gt;Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [outboundTransfer] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryOutboundTransfer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryOutboundTransfer>> getTreasuryOutboundTransfersOutboundTransfer({ 
    required String outboundTransfer,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/outbound_transfers/{outbound_transfer}'.replaceAll('{' r'outbound_transfer' '}', encodeQueryParameter(_serializers, outboundTransfer, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryOutboundTransfer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryOutboundTransfer),
      ) as TreasuryOutboundTransfer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryOutboundTransfer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all ReceivedCredits
  /// &lt;p&gt;Returns a list of ReceivedCredits.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [financialAccount] - The FinancialAccount that received the funds.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [linkedFlows] - Only return ReceivedCredits described by the flow.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Only return ReceivedCredits that have the given status: `succeeded` or `failed`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryReceivedCreditsResourceReceivedCreditList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryReceivedCreditsResourceReceivedCreditList>> getTreasuryReceivedCredits({ 
    required String financialAccount,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    LinkedFlowsParam? linkedFlows,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/received_credits';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      r'financial_account': encodeQueryParameter(_serializers, financialAccount, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (linkedFlows != null) r'linked_flows': encodeQueryParameter(_serializers, linkedFlows, const FullType(LinkedFlowsParam)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryReceivedCreditsResourceReceivedCreditList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryReceivedCreditsResourceReceivedCreditList),
      ) as TreasuryReceivedCreditsResourceReceivedCreditList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryReceivedCreditsResourceReceivedCreditList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a ReceivedCredit
  /// &lt;p&gt;Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryReceivedCredit] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryReceivedCredit>> getTreasuryReceivedCreditsId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/received_credits/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryReceivedCredit? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryReceivedCredit),
      ) as TreasuryReceivedCredit;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryReceivedCredit>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all ReceivedDebits
  /// &lt;p&gt;Returns a list of ReceivedDebits.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [financialAccount] - The FinancialAccount that funds were pulled from.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Only return ReceivedDebits that have the given status: `succeeded` or `failed`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryReceivedDebitsResourceReceivedDebitList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryReceivedDebitsResourceReceivedDebitList>> getTreasuryReceivedDebits({ 
    required String financialAccount,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/received_debits';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      r'financial_account': encodeQueryParameter(_serializers, financialAccount, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryReceivedDebitsResourceReceivedDebitList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryReceivedDebitsResourceReceivedDebitList),
      ) as TreasuryReceivedDebitsResourceReceivedDebitList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryReceivedDebitsResourceReceivedDebitList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a ReceivedDebit
  /// &lt;p&gt;Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryReceivedDebit] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryReceivedDebit>> getTreasuryReceivedDebitsId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/received_debits/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryReceivedDebit? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryReceivedDebit),
      ) as TreasuryReceivedDebit;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryReceivedDebit>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all TransactionEntries
  /// &lt;p&gt;Retrieves a list of TransactionEntry objects.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [financialAccount] - Returns objects associated with this FinancialAccount.
  /// * [created] - Only return TransactionEntries that were created during the given date interval.
  /// * [effectiveAt] 
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [orderBy] - The results are in reverse chronological order by `created` or `effective_at`. The default is `created`.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [transaction] - Only return TransactionEntries associated with this Transaction.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryTransactionsResourceTransactionEntryList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryTransactionsResourceTransactionEntryList>> getTreasuryTransactionEntries({ 
    required String financialAccount,
    GetAccountsCreatedParameter? created,
    GetAccountsCreatedParameter? effectiveAt,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? orderBy,
    String? startingAfter,
    String? transaction,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/transaction_entries';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (effectiveAt != null) r'effective_at': encodeQueryParameter(_serializers, effectiveAt, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      r'financial_account': encodeQueryParameter(_serializers, financialAccount, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (orderBy != null) r'order_by': encodeQueryParameter(_serializers, orderBy, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (transaction != null) r'transaction': encodeQueryParameter(_serializers, transaction, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryTransactionsResourceTransactionEntryList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryTransactionsResourceTransactionEntryList),
      ) as TreasuryTransactionsResourceTransactionEntryList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryTransactionsResourceTransactionEntryList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a TransactionEntry
  /// &lt;p&gt;Retrieves a TransactionEntry object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryTransactionEntry] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryTransactionEntry>> getTreasuryTransactionEntriesId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/transaction_entries/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryTransactionEntry? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryTransactionEntry),
      ) as TreasuryTransactionEntry;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryTransactionEntry>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all Transactions
  /// &lt;p&gt;Retrieves a list of Transaction objects.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [financialAccount] - Returns objects associated with this FinancialAccount.
  /// * [created] - Only return Transactions that were created during the given date interval.
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [orderBy] - The results are in reverse chronological order by `created` or `posted_at`. The default is `created`.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [status] - Only return Transactions that have the given status: `open`, `posted`, or `void`.
  /// * [statusTransitions] - A filter for the `status_transitions.posted_at` timestamp. When using this filter, `status=posted` and `order_by=posted_at` must also be specified.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryTransactionsResourceTransactionList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryTransactionsResourceTransactionList>> getTreasuryTransactions({ 
    required String financialAccount,
    GetAccountsCreatedParameter? created,
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? orderBy,
    String? startingAfter,
    String? status,
    StatusTransitionTimestampSpecs? statusTransitions,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/transactions';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (created != null) r'created': encodeQueryParameter(_serializers, created, const FullType(GetAccountsCreatedParameter)),
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      r'financial_account': encodeQueryParameter(_serializers, financialAccount, const FullType(String)),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (orderBy != null) r'order_by': encodeQueryParameter(_serializers, orderBy, const FullType(String)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
      if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
      if (statusTransitions != null) r'status_transitions': encodeQueryParameter(_serializers, statusTransitions, const FullType(StatusTransitionTimestampSpecs)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryTransactionsResourceTransactionList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryTransactionsResourceTransactionList),
      ) as TreasuryTransactionsResourceTransactionList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryTransactionsResourceTransactionList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a Transaction
  /// &lt;p&gt;Retrieves the details of an existing Transaction.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryTransaction>> getTreasuryTransactionsId({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/transactions/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryTransaction),
      ) as TreasuryTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// List all webhook endpoints
  /// &lt;p&gt;Returns a list of your webhook endpoints.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [endingBefore] - A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [limit] - A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  /// * [startingAfter] - A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [NotificationWebhookEndpointList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<NotificationWebhookEndpointList>> getWebhookEndpoints({ 
    String? endingBefore,
    BuiltList<String>? expand,
    int? limit,
    String? startingAfter,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/webhook_endpoints';
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (endingBefore != null) r'ending_before': encodeQueryParameter(_serializers, endingBefore, const FullType(String)),
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      if (limit != null) r'limit': encodeQueryParameter(_serializers, limit, const FullType(int)),
      if (startingAfter != null) r'starting_after': encodeQueryParameter(_serializers, startingAfter, const FullType(String)),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    NotificationWebhookEndpointList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(NotificationWebhookEndpointList),
      ) as NotificationWebhookEndpointList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<NotificationWebhookEndpointList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Retrieve a webhook endpoint
  /// &lt;p&gt;Retrieves the webhook endpoint with the given ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [webhookEndpoint] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [WebhookEndpoint] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<WebhookEndpoint>> getWebhookEndpointsWebhookEndpoint({ 
    required String webhookEndpoint,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/webhook_endpoints/{webhook_endpoint}'.replaceAll('{' r'webhook_endpoint' '}', encodeQueryParameter(_serializers, webhookEndpoint, const FullType(String)).toString());
    final _options = Options(
      method: r'GET',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    final _queryParameters = <String, dynamic>{
      if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
    };

    final _response = await _dio.request<Object>(
      _path,
      options: _options,
      queryParameters: _queryParameters,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    WebhookEndpoint? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(WebhookEndpoint),
      ) as WebhookEndpoint;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<WebhookEndpoint>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create an account link
  /// &lt;p&gt;Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] - The identifier of the account to create an account link for.
  /// * [type] - The type of account link the user is requesting.  You can create Account Links of type `account_update` only for connected accounts where your platform is responsible for collecting requirements, including Custom accounts. You can't create them for accounts that have access to a Stripe-hosted Dashboard. If you use [Connect embedded components](/connect/get-started-connect-embedded-components), you can include components that allow your connected accounts to update their own information. For an account without Stripe-hosted Dashboard access where Stripe is liable for negative balances, you must use embedded components.
  /// * [collect] - The collect parameter is deprecated. Use `collection_options` instead.
  /// * [collectionOptions] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [refreshUrl] - The URL the user will be redirected to if the account link is expired, has been previously-visited, or is otherwise invalid. The URL you specify should attempt to generate a new account link with the same parameters used to create the original account link, then redirect the user to the new account link's URL so they can continue with Connect Onboarding. If a new account link cannot be generated or the redirect fails you should display a useful error to the user.
  /// * [returnUrl] - The URL that the user will be redirected to upon leaving or completing the linked flow.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [AccountLink] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<AccountLink>> postAccountLinks({ 
    required String account,
    required String type,
    String? collect,
    CollectionOptionsParams? collectionOptions,
    BuiltList<String>? expand,
    String? refreshUrl,
    String? returnUrl,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/account_links';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'account': encodeQueryParameter(_serializers, account, const FullType(String)),
        if (collect != null) r'collect': encodeQueryParameter(_serializers, collect, const FullType(String)),
        if (collectionOptions != null) r'collection_options': encodeQueryParameter(_serializers, collectionOptions, const FullType(CollectionOptionsParams)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (refreshUrl != null) r'refresh_url': encodeQueryParameter(_serializers, refreshUrl, const FullType(String)),
        if (returnUrl != null) r'return_url': encodeQueryParameter(_serializers, returnUrl, const FullType(String)),
        r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    AccountLink? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(AccountLink),
      ) as AccountLink;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<AccountLink>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create an Account Session
  /// &lt;p&gt;Creates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] - The identifier of the account to create an Account Session for.
  /// * [components] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [AccountSession] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<AccountSession>> postAccountSessions({ 
    required String account,
    required AccountSessionCreateComponentsParam components,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/account_sessions';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'account': encodeQueryParameter(_serializers, account, const FullType(String)),
        r'components': encodeQueryParameter(_serializers, components, const FullType(AccountSessionCreateComponentsParam)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    AccountSession? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(AccountSession),
      ) as AccountSession;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<AccountSession>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// postAccounts
  /// &lt;p&gt;With &lt;a href&#x3D;\&quot;/docs/connect\&quot;&gt;Connect&lt;/a&gt;, you can create Stripe accounts for your users. To do this, you’ll first need to &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/applications/settings\&quot;&gt;register your platform&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;If you’ve already collected information for your connected accounts, you &lt;a href&#x3D;\&quot;/docs/connect/best-practices#onboarding\&quot;&gt;can prefill that information&lt;/a&gt; when creating the account. Connect Onboarding won’t ask for the prefilled information during account onboarding. You can prefill any information on the account.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [accountToken] - An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account.
  /// * [bankAccount] 
  /// * [businessProfile] 
  /// * [businessType] - The business type. Once you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
  /// * [capabilities] 
  /// * [company] 
  /// * [controller] 
  /// * [country] - The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code. For example, if you are in the United States and the business for which you're creating an account is legally represented in Canada, you would use `CA` as the country for the account being created. Available countries include [Stripe's global markets](https://stripe.com/global) as well as countries where [cross-border payouts](https://stripe.com/docs/connect/cross-border-payouts) are supported.
  /// * [defaultCurrency] - Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://docs.stripe.com/payouts).
  /// * [documents] 
  /// * [email] - The email address of the account holder. This is only to make the account easier to identify to you. If [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, Stripe doesn't email the account without your consent.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [externalAccount] - A card or bank account to attach to the account for receiving [payouts](/connect/bank-debit-card-payouts) (you won’t be able to use it for top-ups). You can provide either a token, like the ones returned by [Stripe.js](/js), or a dictionary, as documented in the `external_account` parameter for [bank account](/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the [bank account](/api#account_create_bank_account) or [card creation](/api#account_create_card) APIs. After you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
  /// * [groups] 
  /// * [individual] 
  /// * [metadata] 
  /// * [settings] 
  /// * [tosAcceptance] 
  /// * [type] - The type of Stripe account to create. May be one of `custom`, `express` or `standard`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Account] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Account>> postAccounts({ 
    String? accountToken,
    PostAccountsRequestBankAccount? bankAccount,
    BusinessProfileSpecs? businessProfile,
    String? businessType,
    CapabilitiesParam? capabilities,
    CompanySpecs? company,
    ControllerSpecs? controller,
    String? country,
    String? defaultCurrency,
    DocumentsSpecs? documents,
    String? email,
    BuiltList<String>? expand,
    String? externalAccount,
    AccountGroupsSpecs? groups,
    IndividualSpecs? individual,
    PostAccountsRequestMetadata? metadata,
    SettingsSpecs? settings,
    TosAcceptanceSpecs? tosAcceptance,
    String? type,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (accountToken != null) r'account_token': encodeQueryParameter(_serializers, accountToken, const FullType(String)),
        if (bankAccount != null) r'bank_account': encodeQueryParameter(_serializers, bankAccount, const FullType(PostAccountsRequestBankAccount)),
        if (businessProfile != null) r'business_profile': encodeQueryParameter(_serializers, businessProfile, const FullType(BusinessProfileSpecs)),
        if (businessType != null) r'business_type': encodeQueryParameter(_serializers, businessType, const FullType(String)),
        if (capabilities != null) r'capabilities': encodeQueryParameter(_serializers, capabilities, const FullType(CapabilitiesParam)),
        if (company != null) r'company': encodeQueryParameter(_serializers, company, const FullType(CompanySpecs)),
        if (controller != null) r'controller': encodeQueryParameter(_serializers, controller, const FullType(ControllerSpecs)),
        if (country != null) r'country': encodeQueryParameter(_serializers, country, const FullType(String)),
        if (defaultCurrency != null) r'default_currency': encodeQueryParameter(_serializers, defaultCurrency, const FullType(String)),
        if (documents != null) r'documents': encodeQueryParameter(_serializers, documents, const FullType(DocumentsSpecs)),
        if (email != null) r'email': encodeQueryParameter(_serializers, email, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (externalAccount != null) r'external_account': encodeQueryParameter(_serializers, externalAccount, const FullType(String)),
        if (groups != null) r'groups': encodeQueryParameter(_serializers, groups, const FullType(AccountGroupsSpecs)),
        if (individual != null) r'individual': encodeQueryParameter(_serializers, individual, const FullType(IndividualSpecs)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (settings != null) r'settings': encodeQueryParameter(_serializers, settings, const FullType(SettingsSpecs)),
        if (tosAcceptance != null) r'tos_acceptance': encodeQueryParameter(_serializers, tosAcceptance, const FullType(TosAcceptanceSpecs)),
        if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Account? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Account),
      ) as Account;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Account>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update an account
  /// &lt;p&gt;Updates a &lt;a href&#x3D;\&quot;/connect/accounts\&quot;&gt;connected account&lt;/a&gt; by setting the values of the parameters passed. Any parameters not provided are left unchanged.&lt;/p&gt;  &lt;p&gt;For accounts where &lt;a href&#x3D;\&quot;/api/accounts/object#account_object-controller-requirement_collection\&quot;&gt;controller.requirement_collection&lt;/a&gt; is &lt;code&gt;application&lt;/code&gt;, which includes Custom accounts, you can update any information on the account.&lt;/p&gt;  &lt;p&gt;For accounts where &lt;a href&#x3D;\&quot;/api/accounts/object#account_object-controller-requirement_collection\&quot;&gt;controller.requirement_collection&lt;/a&gt; is &lt;code&gt;stripe&lt;/code&gt;, which includes Standard and Express accounts, you can update all information until you create an &lt;a href&#x3D;\&quot;/api/account_links\&quot;&gt;Account Link&lt;/a&gt; or &lt;a href&#x3D;\&quot;/api/account_sessions\&quot;&gt;Account Session&lt;/a&gt; to start Connect onboarding, after which some properties can no longer be updated.&lt;/p&gt;  &lt;p&gt;To update your own account, use the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/settings/account\&quot;&gt;Dashboard&lt;/a&gt;. Refer to our &lt;a href&#x3D;\&quot;/docs/connect/updating-accounts\&quot;&gt;Connect&lt;/a&gt; documentation to learn more about updating accounts.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [accountToken] - An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account.
  /// * [businessProfile] 
  /// * [businessType] - The business type. Once you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
  /// * [capabilities] 
  /// * [company] 
  /// * [defaultCurrency] - Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://docs.stripe.com/payouts).
  /// * [documents] 
  /// * [email] - The email address of the account holder. This is only to make the account easier to identify to you. If [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, Stripe doesn't email the account without your consent.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [externalAccount] - A card or bank account to attach to the account for receiving [payouts](/connect/bank-debit-card-payouts) (you won’t be able to use it for top-ups). You can provide either a token, like the ones returned by [Stripe.js](/js), or a dictionary, as documented in the `external_account` parameter for [bank account](/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the [bank account](/api#account_create_bank_account) or [card creation](/api#account_create_card) APIs. After you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions), this property can only be updated for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
  /// * [groups] 
  /// * [individual] 
  /// * [metadata] 
  /// * [settings] 
  /// * [tosAcceptance] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Account] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Account>> postAccountsAccount({ 
    required String account,
    String? accountToken,
    BusinessProfileUpdateSpecs? businessProfile,
    String? businessType,
    CapabilitiesParam? capabilities,
    CompanyUpdateSpecs? company,
    String? defaultCurrency,
    DocumentsSpecs? documents,
    String? email,
    BuiltList<String>? expand,
    String? externalAccount,
    AccountGroupsSpecs? groups,
    IndividualUpdateSpecs? individual,
    PostAccountsRequestMetadata? metadata,
    SettingsSpecsUpdate? settings,
    TosAcceptanceSpecs? tosAcceptance,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (accountToken != null) r'account_token': encodeQueryParameter(_serializers, accountToken, const FullType(String)),
        if (businessProfile != null) r'business_profile': encodeQueryParameter(_serializers, businessProfile, const FullType(BusinessProfileUpdateSpecs)),
        if (businessType != null) r'business_type': encodeQueryParameter(_serializers, businessType, const FullType(String)),
        if (capabilities != null) r'capabilities': encodeQueryParameter(_serializers, capabilities, const FullType(CapabilitiesParam)),
        if (company != null) r'company': encodeQueryParameter(_serializers, company, const FullType(CompanyUpdateSpecs)),
        if (defaultCurrency != null) r'default_currency': encodeQueryParameter(_serializers, defaultCurrency, const FullType(String)),
        if (documents != null) r'documents': encodeQueryParameter(_serializers, documents, const FullType(DocumentsSpecs)),
        if (email != null) r'email': encodeQueryParameter(_serializers, email, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (externalAccount != null) r'external_account': encodeQueryParameter(_serializers, externalAccount, const FullType(String)),
        if (groups != null) r'groups': encodeQueryParameter(_serializers, groups, const FullType(AccountGroupsSpecs)),
        if (individual != null) r'individual': encodeQueryParameter(_serializers, individual, const FullType(IndividualUpdateSpecs)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (settings != null) r'settings': encodeQueryParameter(_serializers, settings, const FullType(SettingsSpecsUpdate)),
        if (tosAcceptance != null) r'tos_acceptance': encodeQueryParameter(_serializers, tosAcceptance, const FullType(TosAcceptanceSpecs)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Account? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Account),
      ) as Account;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Account>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create an external account
  /// &lt;p&gt;Create an external account for a given account.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [bankAccount] 
  /// * [defaultForCurrency] - When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [externalAccount] - A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js) or a dictionary containing a user's external account details (with the options shown below). Please refer to full [documentation](https://stripe.com/docs/api/external_accounts) instead.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ExternalAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ExternalAccount>> postAccountsAccountBankAccounts({ 
    required String account,
    PostAccountsRequestBankAccount? bankAccount,
    bool? defaultForCurrency,
    BuiltList<String>? expand,
    String? externalAccount,
    BuiltMap<String, String>? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/bank_accounts'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (bankAccount != null) r'bank_account': encodeQueryParameter(_serializers, bankAccount, const FullType(PostAccountsRequestBankAccount)),
        if (defaultForCurrency != null) r'default_for_currency': encodeQueryParameter(_serializers, defaultForCurrency, const FullType(bool)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (externalAccount != null) r'external_account': encodeQueryParameter(_serializers, externalAccount, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ExternalAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ExternalAccount),
      ) as ExternalAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ExternalAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// postAccountsAccountBankAccountsId
  /// &lt;p&gt;Updates the metadata, account holder name, account holder type of a bank account belonging to a connected account and optionally sets it as the default for its currency. Other bank account details are not editable by design.&lt;/p&gt;  &lt;p&gt;You can only update bank accounts when &lt;a href&#x3D;\&quot;/api/accounts/object#account_object-controller-requirement_collection\&quot;&gt;account.controller.requirement_collection&lt;/a&gt; is &lt;code&gt;application&lt;/code&gt;, which includes &lt;a href&#x3D;\&quot;/connect/custom-accounts\&quot;&gt;Custom accounts&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [id] 
  /// * [accountHolderName] - The name of the person or business that owns the bank account.
  /// * [accountHolderType] - The type of entity that holds the account. This can be either `individual` or `company`.
  /// * [accountType] - The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
  /// * [addressCity] - City/District/Suburb/Town/Village.
  /// * [addressCountry] - Billing address country, if provided when creating card.
  /// * [addressLine1] - Address line 1 (Street address/PO Box/Company name).
  /// * [addressLine2] - Address line 2 (Apartment/Suite/Unit/Building).
  /// * [addressState] - State/County/Province/Region.
  /// * [addressZip] - ZIP or postal code.
  /// * [defaultForCurrency] - When set to true, this becomes the default external account for its currency.
  /// * [documents] 
  /// * [expMonth] - Two digit number representing the card’s expiration month.
  /// * [expYear] - Four digit number representing the card’s expiration year.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [name] - Cardholder name.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ExternalAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ExternalAccount>> postAccountsAccountBankAccountsId({ 
    required String account,
    required String id,
    String? accountHolderName,
    String? accountHolderType,
    String? accountType,
    String? addressCity,
    String? addressCountry,
    String? addressLine1,
    String? addressLine2,
    String? addressState,
    String? addressZip,
    bool? defaultForCurrency,
    ExternalAccountDocumentsParam1? documents,
    String? expMonth,
    String? expYear,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    String? name,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/bank_accounts/{id}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (accountHolderName != null) r'account_holder_name': encodeQueryParameter(_serializers, accountHolderName, const FullType(String)),
        if (accountHolderType != null) r'account_holder_type': encodeQueryParameter(_serializers, accountHolderType, const FullType(String)),
        if (accountType != null) r'account_type': encodeQueryParameter(_serializers, accountType, const FullType(String)),
        if (addressCity != null) r'address_city': encodeQueryParameter(_serializers, addressCity, const FullType(String)),
        if (addressCountry != null) r'address_country': encodeQueryParameter(_serializers, addressCountry, const FullType(String)),
        if (addressLine1 != null) r'address_line1': encodeQueryParameter(_serializers, addressLine1, const FullType(String)),
        if (addressLine2 != null) r'address_line2': encodeQueryParameter(_serializers, addressLine2, const FullType(String)),
        if (addressState != null) r'address_state': encodeQueryParameter(_serializers, addressState, const FullType(String)),
        if (addressZip != null) r'address_zip': encodeQueryParameter(_serializers, addressZip, const FullType(String)),
        if (defaultForCurrency != null) r'default_for_currency': encodeQueryParameter(_serializers, defaultForCurrency, const FullType(bool)),
        if (documents != null) r'documents': encodeQueryParameter(_serializers, documents, const FullType(ExternalAccountDocumentsParam1)),
        if (expMonth != null) r'exp_month': encodeQueryParameter(_serializers, expMonth, const FullType(String)),
        if (expYear != null) r'exp_year': encodeQueryParameter(_serializers, expYear, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ExternalAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ExternalAccount),
      ) as ExternalAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ExternalAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update an Account Capability
  /// &lt;p&gt;Updates an existing Account Capability. Request or remove a capability by updating its &lt;code&gt;requested&lt;/code&gt; parameter.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [capability] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [requested] - To request a new capability for an account, pass true. There can be a delay before the requested capability becomes active. If the capability has any activation requirements, the response includes them in the `requirements` arrays.  If a capability isn't permanent, you can remove it from the account by passing false. Some capabilities are permanent after they've been requested. Attempting to remove a permanent capability returns an error.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Capability] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Capability>> postAccountsAccountCapabilitiesCapability({ 
    required String account,
    required String capability,
    BuiltList<String>? expand,
    bool? requested,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/capabilities/{capability}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString()).replaceAll('{' r'capability' '}', encodeQueryParameter(_serializers, capability, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (requested != null) r'requested': encodeQueryParameter(_serializers, requested, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Capability? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Capability),
      ) as Capability;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Capability>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create an external account
  /// &lt;p&gt;Create an external account for a given account.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [bankAccount] 
  /// * [defaultForCurrency] - When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [externalAccount] - A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js) or a dictionary containing a user's external account details (with the options shown below). Please refer to full [documentation](https://stripe.com/docs/api/external_accounts) instead.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ExternalAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ExternalAccount>> postAccountsAccountExternalAccounts({ 
    required String account,
    PostAccountsRequestBankAccount? bankAccount,
    bool? defaultForCurrency,
    BuiltList<String>? expand,
    String? externalAccount,
    BuiltMap<String, String>? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/external_accounts'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (bankAccount != null) r'bank_account': encodeQueryParameter(_serializers, bankAccount, const FullType(PostAccountsRequestBankAccount)),
        if (defaultForCurrency != null) r'default_for_currency': encodeQueryParameter(_serializers, defaultForCurrency, const FullType(bool)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (externalAccount != null) r'external_account': encodeQueryParameter(_serializers, externalAccount, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ExternalAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ExternalAccount),
      ) as ExternalAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ExternalAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// postAccountsAccountExternalAccountsId
  /// &lt;p&gt;Updates the metadata, account holder name, account holder type of a bank account belonging to a connected account and optionally sets it as the default for its currency. Other bank account details are not editable by design.&lt;/p&gt;  &lt;p&gt;You can only update bank accounts when &lt;a href&#x3D;\&quot;/api/accounts/object#account_object-controller-requirement_collection\&quot;&gt;account.controller.requirement_collection&lt;/a&gt; is &lt;code&gt;application&lt;/code&gt;, which includes &lt;a href&#x3D;\&quot;/connect/custom-accounts\&quot;&gt;Custom accounts&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [id] 
  /// * [accountHolderName] - The name of the person or business that owns the bank account.
  /// * [accountHolderType] - The type of entity that holds the account. This can be either `individual` or `company`.
  /// * [accountType] - The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
  /// * [addressCity] - City/District/Suburb/Town/Village.
  /// * [addressCountry] - Billing address country, if provided when creating card.
  /// * [addressLine1] - Address line 1 (Street address/PO Box/Company name).
  /// * [addressLine2] - Address line 2 (Apartment/Suite/Unit/Building).
  /// * [addressState] - State/County/Province/Region.
  /// * [addressZip] - ZIP or postal code.
  /// * [defaultForCurrency] - When set to true, this becomes the default external account for its currency.
  /// * [documents] 
  /// * [expMonth] - Two digit number representing the card’s expiration month.
  /// * [expYear] - Four digit number representing the card’s expiration year.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [name] - Cardholder name.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ExternalAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ExternalAccount>> postAccountsAccountExternalAccountsId({ 
    required String account,
    required String id,
    String? accountHolderName,
    String? accountHolderType,
    String? accountType,
    String? addressCity,
    String? addressCountry,
    String? addressLine1,
    String? addressLine2,
    String? addressState,
    String? addressZip,
    bool? defaultForCurrency,
    ExternalAccountDocumentsParam1? documents,
    String? expMonth,
    String? expYear,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    String? name,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/external_accounts/{id}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (accountHolderName != null) r'account_holder_name': encodeQueryParameter(_serializers, accountHolderName, const FullType(String)),
        if (accountHolderType != null) r'account_holder_type': encodeQueryParameter(_serializers, accountHolderType, const FullType(String)),
        if (accountType != null) r'account_type': encodeQueryParameter(_serializers, accountType, const FullType(String)),
        if (addressCity != null) r'address_city': encodeQueryParameter(_serializers, addressCity, const FullType(String)),
        if (addressCountry != null) r'address_country': encodeQueryParameter(_serializers, addressCountry, const FullType(String)),
        if (addressLine1 != null) r'address_line1': encodeQueryParameter(_serializers, addressLine1, const FullType(String)),
        if (addressLine2 != null) r'address_line2': encodeQueryParameter(_serializers, addressLine2, const FullType(String)),
        if (addressState != null) r'address_state': encodeQueryParameter(_serializers, addressState, const FullType(String)),
        if (addressZip != null) r'address_zip': encodeQueryParameter(_serializers, addressZip, const FullType(String)),
        if (defaultForCurrency != null) r'default_for_currency': encodeQueryParameter(_serializers, defaultForCurrency, const FullType(bool)),
        if (documents != null) r'documents': encodeQueryParameter(_serializers, documents, const FullType(ExternalAccountDocumentsParam1)),
        if (expMonth != null) r'exp_month': encodeQueryParameter(_serializers, expMonth, const FullType(String)),
        if (expYear != null) r'exp_year': encodeQueryParameter(_serializers, expYear, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ExternalAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ExternalAccount),
      ) as ExternalAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ExternalAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a login link
  /// &lt;p&gt;Creates a login link for a connected account to access the Express Dashboard.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;You can only create login links for accounts that use the &lt;a href&#x3D;\&quot;/connect/express-dashboard\&quot;&gt;Express Dashboard&lt;/a&gt; and are connected to your platform&lt;/strong&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [LoginLink] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<LoginLink>> postAccountsAccountLoginLinks({ 
    required String account,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/login_links'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    LoginLink? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(LoginLink),
      ) as LoginLink;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<LoginLink>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a person
  /// &lt;p&gt;Creates a new person.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [additionalTosAcceptances] 
  /// * [address] 
  /// * [addressKana] 
  /// * [addressKanji] 
  /// * [dob] 
  /// * [documents] 
  /// * [email] - The person's email address.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [firstName] - The person's first name.
  /// * [firstNameKana] - The Kana variation of the person's first name (Japan only).
  /// * [firstNameKanji] - The Kanji variation of the person's first name (Japan only).
  /// * [fullNameAliases] 
  /// * [gender] - The person's gender (International regulations require either \\\"male\\\" or \\\"female\\\").
  /// * [idNumber] - The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).
  /// * [idNumberSecondary] - The person's secondary ID number, as appropriate for their country, will be used for enhanced verification checks. In Thailand, this would be the laser code found on the back of an ID card. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).
  /// * [lastName] - The person's last name.
  /// * [lastNameKana] - The Kana variation of the person's last name (Japan only).
  /// * [lastNameKanji] - The Kanji variation of the person's last name (Japan only).
  /// * [maidenName] - The person's maiden name.
  /// * [metadata] 
  /// * [nationality] - The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or \\\"XX\\\" if unavailable.
  /// * [personToken] - A [person token](https://docs.stripe.com/connect/account-tokens), used to securely provide details to the person.
  /// * [phone] - The person's phone number.
  /// * [politicalExposure] - Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
  /// * [registeredAddress] 
  /// * [relationship] 
  /// * [ssnLast4] - The last four digits of the person's Social Security number (U.S. only).
  /// * [usCfpbData] 
  /// * [verification] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Person] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Person>> postAccountsAccountPeople({ 
    required String account,
    PersonAdditionalTosAcceptancesSpecs? additionalTosAcceptances,
    LegalEntityAndKycAddressSpecs1? address,
    JapanAddressKanaSpecs1? addressKana,
    JapanAddressKanjiSpecs1? addressKanji,
    PostAccountsAccountPeopleRequestDob? dob,
    PersonDocumentsSpecs? documents,
    String? email,
    BuiltList<String>? expand,
    String? firstName,
    String? firstNameKana,
    String? firstNameKanji,
    PostAccountsAccountPeopleRequestFullNameAliases? fullNameAliases,
    String? gender,
    String? idNumber,
    String? idNumberSecondary,
    String? lastName,
    String? lastNameKana,
    String? lastNameKanji,
    String? maidenName,
    PostAccountsRequestMetadata? metadata,
    String? nationality,
    String? personToken,
    String? phone,
    String? politicalExposure,
    AddressSpecs1? registeredAddress,
    RelationshipSpecs? relationship,
    String? ssnLast4,
    UsCfpbDataSpecs? usCfpbData,
    PersonVerificationSpecs1? verification,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/people'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (additionalTosAcceptances != null) r'additional_tos_acceptances': encodeQueryParameter(_serializers, additionalTosAcceptances, const FullType(PersonAdditionalTosAcceptancesSpecs)),
        if (address != null) r'address': encodeQueryParameter(_serializers, address, const FullType(LegalEntityAndKycAddressSpecs1)),
        if (addressKana != null) r'address_kana': encodeQueryParameter(_serializers, addressKana, const FullType(JapanAddressKanaSpecs1)),
        if (addressKanji != null) r'address_kanji': encodeQueryParameter(_serializers, addressKanji, const FullType(JapanAddressKanjiSpecs1)),
        if (dob != null) r'dob': encodeQueryParameter(_serializers, dob, const FullType(PostAccountsAccountPeopleRequestDob)),
        if (documents != null) r'documents': encodeQueryParameter(_serializers, documents, const FullType(PersonDocumentsSpecs)),
        if (email != null) r'email': encodeQueryParameter(_serializers, email, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (firstName != null) r'first_name': encodeQueryParameter(_serializers, firstName, const FullType(String)),
        if (firstNameKana != null) r'first_name_kana': encodeQueryParameter(_serializers, firstNameKana, const FullType(String)),
        if (firstNameKanji != null) r'first_name_kanji': encodeQueryParameter(_serializers, firstNameKanji, const FullType(String)),
        if (fullNameAliases != null) r'full_name_aliases': encodeQueryParameter(_serializers, fullNameAliases, const FullType(PostAccountsAccountPeopleRequestFullNameAliases)),
        if (gender != null) r'gender': encodeQueryParameter(_serializers, gender, const FullType(String)),
        if (idNumber != null) r'id_number': encodeQueryParameter(_serializers, idNumber, const FullType(String)),
        if (idNumberSecondary != null) r'id_number_secondary': encodeQueryParameter(_serializers, idNumberSecondary, const FullType(String)),
        if (lastName != null) r'last_name': encodeQueryParameter(_serializers, lastName, const FullType(String)),
        if (lastNameKana != null) r'last_name_kana': encodeQueryParameter(_serializers, lastNameKana, const FullType(String)),
        if (lastNameKanji != null) r'last_name_kanji': encodeQueryParameter(_serializers, lastNameKanji, const FullType(String)),
        if (maidenName != null) r'maiden_name': encodeQueryParameter(_serializers, maidenName, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (nationality != null) r'nationality': encodeQueryParameter(_serializers, nationality, const FullType(String)),
        if (personToken != null) r'person_token': encodeQueryParameter(_serializers, personToken, const FullType(String)),
        if (phone != null) r'phone': encodeQueryParameter(_serializers, phone, const FullType(String)),
        if (politicalExposure != null) r'political_exposure': encodeQueryParameter(_serializers, politicalExposure, const FullType(String)),
        if (registeredAddress != null) r'registered_address': encodeQueryParameter(_serializers, registeredAddress, const FullType(AddressSpecs1)),
        if (relationship != null) r'relationship': encodeQueryParameter(_serializers, relationship, const FullType(RelationshipSpecs)),
        if (ssnLast4 != null) r'ssn_last_4': encodeQueryParameter(_serializers, ssnLast4, const FullType(String)),
        if (usCfpbData != null) r'us_cfpb_data': encodeQueryParameter(_serializers, usCfpbData, const FullType(UsCfpbDataSpecs)),
        if (verification != null) r'verification': encodeQueryParameter(_serializers, verification, const FullType(PersonVerificationSpecs1)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Person? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Person),
      ) as Person;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Person>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a person
  /// &lt;p&gt;Updates an existing person.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [person] 
  /// * [additionalTosAcceptances] 
  /// * [address] 
  /// * [addressKana] 
  /// * [addressKanji] 
  /// * [dob] 
  /// * [documents] 
  /// * [email] - The person's email address.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [firstName] - The person's first name.
  /// * [firstNameKana] - The Kana variation of the person's first name (Japan only).
  /// * [firstNameKanji] - The Kanji variation of the person's first name (Japan only).
  /// * [fullNameAliases] 
  /// * [gender] - The person's gender (International regulations require either \\\"male\\\" or \\\"female\\\").
  /// * [idNumber] - The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).
  /// * [idNumberSecondary] - The person's secondary ID number, as appropriate for their country, will be used for enhanced verification checks. In Thailand, this would be the laser code found on the back of an ID card. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).
  /// * [lastName] - The person's last name.
  /// * [lastNameKana] - The Kana variation of the person's last name (Japan only).
  /// * [lastNameKanji] - The Kanji variation of the person's last name (Japan only).
  /// * [maidenName] - The person's maiden name.
  /// * [metadata] 
  /// * [nationality] - The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or \\\"XX\\\" if unavailable.
  /// * [personToken] - A [person token](https://docs.stripe.com/connect/account-tokens), used to securely provide details to the person.
  /// * [phone] - The person's phone number.
  /// * [politicalExposure] - Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
  /// * [registeredAddress] 
  /// * [relationship] 
  /// * [ssnLast4] - The last four digits of the person's Social Security number (U.S. only).
  /// * [usCfpbData] 
  /// * [verification] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Person] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Person>> postAccountsAccountPeoplePerson({ 
    required String account,
    required String person,
    PersonAdditionalTosAcceptancesSpecs? additionalTosAcceptances,
    LegalEntityAndKycAddressSpecs1? address,
    JapanAddressKanaSpecs1? addressKana,
    JapanAddressKanjiSpecs1? addressKanji,
    PostAccountsAccountPeopleRequestDob? dob,
    PersonDocumentsSpecs? documents,
    String? email,
    BuiltList<String>? expand,
    String? firstName,
    String? firstNameKana,
    String? firstNameKanji,
    PostAccountsAccountPeopleRequestFullNameAliases? fullNameAliases,
    String? gender,
    String? idNumber,
    String? idNumberSecondary,
    String? lastName,
    String? lastNameKana,
    String? lastNameKanji,
    String? maidenName,
    PostAccountsRequestMetadata? metadata,
    String? nationality,
    String? personToken,
    String? phone,
    String? politicalExposure,
    AddressSpecs1? registeredAddress,
    RelationshipSpecs? relationship,
    String? ssnLast4,
    UsCfpbDataSpecs? usCfpbData,
    PersonVerificationSpecs1? verification,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/people/{person}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString()).replaceAll('{' r'person' '}', encodeQueryParameter(_serializers, person, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (additionalTosAcceptances != null) r'additional_tos_acceptances': encodeQueryParameter(_serializers, additionalTosAcceptances, const FullType(PersonAdditionalTosAcceptancesSpecs)),
        if (address != null) r'address': encodeQueryParameter(_serializers, address, const FullType(LegalEntityAndKycAddressSpecs1)),
        if (addressKana != null) r'address_kana': encodeQueryParameter(_serializers, addressKana, const FullType(JapanAddressKanaSpecs1)),
        if (addressKanji != null) r'address_kanji': encodeQueryParameter(_serializers, addressKanji, const FullType(JapanAddressKanjiSpecs1)),
        if (dob != null) r'dob': encodeQueryParameter(_serializers, dob, const FullType(PostAccountsAccountPeopleRequestDob)),
        if (documents != null) r'documents': encodeQueryParameter(_serializers, documents, const FullType(PersonDocumentsSpecs)),
        if (email != null) r'email': encodeQueryParameter(_serializers, email, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (firstName != null) r'first_name': encodeQueryParameter(_serializers, firstName, const FullType(String)),
        if (firstNameKana != null) r'first_name_kana': encodeQueryParameter(_serializers, firstNameKana, const FullType(String)),
        if (firstNameKanji != null) r'first_name_kanji': encodeQueryParameter(_serializers, firstNameKanji, const FullType(String)),
        if (fullNameAliases != null) r'full_name_aliases': encodeQueryParameter(_serializers, fullNameAliases, const FullType(PostAccountsAccountPeopleRequestFullNameAliases)),
        if (gender != null) r'gender': encodeQueryParameter(_serializers, gender, const FullType(String)),
        if (idNumber != null) r'id_number': encodeQueryParameter(_serializers, idNumber, const FullType(String)),
        if (idNumberSecondary != null) r'id_number_secondary': encodeQueryParameter(_serializers, idNumberSecondary, const FullType(String)),
        if (lastName != null) r'last_name': encodeQueryParameter(_serializers, lastName, const FullType(String)),
        if (lastNameKana != null) r'last_name_kana': encodeQueryParameter(_serializers, lastNameKana, const FullType(String)),
        if (lastNameKanji != null) r'last_name_kanji': encodeQueryParameter(_serializers, lastNameKanji, const FullType(String)),
        if (maidenName != null) r'maiden_name': encodeQueryParameter(_serializers, maidenName, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (nationality != null) r'nationality': encodeQueryParameter(_serializers, nationality, const FullType(String)),
        if (personToken != null) r'person_token': encodeQueryParameter(_serializers, personToken, const FullType(String)),
        if (phone != null) r'phone': encodeQueryParameter(_serializers, phone, const FullType(String)),
        if (politicalExposure != null) r'political_exposure': encodeQueryParameter(_serializers, politicalExposure, const FullType(String)),
        if (registeredAddress != null) r'registered_address': encodeQueryParameter(_serializers, registeredAddress, const FullType(AddressSpecs1)),
        if (relationship != null) r'relationship': encodeQueryParameter(_serializers, relationship, const FullType(RelationshipSpecs)),
        if (ssnLast4 != null) r'ssn_last_4': encodeQueryParameter(_serializers, ssnLast4, const FullType(String)),
        if (usCfpbData != null) r'us_cfpb_data': encodeQueryParameter(_serializers, usCfpbData, const FullType(UsCfpbDataSpecs)),
        if (verification != null) r'verification': encodeQueryParameter(_serializers, verification, const FullType(PersonVerificationSpecs1)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Person? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Person),
      ) as Person;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Person>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a person
  /// &lt;p&gt;Creates a new person.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [additionalTosAcceptances] 
  /// * [address] 
  /// * [addressKana] 
  /// * [addressKanji] 
  /// * [dob] 
  /// * [documents] 
  /// * [email] - The person's email address.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [firstName] - The person's first name.
  /// * [firstNameKana] - The Kana variation of the person's first name (Japan only).
  /// * [firstNameKanji] - The Kanji variation of the person's first name (Japan only).
  /// * [fullNameAliases] 
  /// * [gender] - The person's gender (International regulations require either \\\"male\\\" or \\\"female\\\").
  /// * [idNumber] - The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).
  /// * [idNumberSecondary] - The person's secondary ID number, as appropriate for their country, will be used for enhanced verification checks. In Thailand, this would be the laser code found on the back of an ID card. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).
  /// * [lastName] - The person's last name.
  /// * [lastNameKana] - The Kana variation of the person's last name (Japan only).
  /// * [lastNameKanji] - The Kanji variation of the person's last name (Japan only).
  /// * [maidenName] - The person's maiden name.
  /// * [metadata] 
  /// * [nationality] - The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or \\\"XX\\\" if unavailable.
  /// * [personToken] - A [person token](https://docs.stripe.com/connect/account-tokens), used to securely provide details to the person.
  /// * [phone] - The person's phone number.
  /// * [politicalExposure] - Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
  /// * [registeredAddress] 
  /// * [relationship] 
  /// * [ssnLast4] - The last four digits of the person's Social Security number (U.S. only).
  /// * [usCfpbData] 
  /// * [verification] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Person] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Person>> postAccountsAccountPersons({ 
    required String account,
    PersonAdditionalTosAcceptancesSpecs? additionalTosAcceptances,
    LegalEntityAndKycAddressSpecs1? address,
    JapanAddressKanaSpecs1? addressKana,
    JapanAddressKanjiSpecs1? addressKanji,
    PostAccountsAccountPeopleRequestDob? dob,
    PersonDocumentsSpecs? documents,
    String? email,
    BuiltList<String>? expand,
    String? firstName,
    String? firstNameKana,
    String? firstNameKanji,
    PostAccountsAccountPeopleRequestFullNameAliases? fullNameAliases,
    String? gender,
    String? idNumber,
    String? idNumberSecondary,
    String? lastName,
    String? lastNameKana,
    String? lastNameKanji,
    String? maidenName,
    PostAccountsRequestMetadata? metadata,
    String? nationality,
    String? personToken,
    String? phone,
    String? politicalExposure,
    AddressSpecs1? registeredAddress,
    RelationshipSpecs? relationship,
    String? ssnLast4,
    UsCfpbDataSpecs? usCfpbData,
    PersonVerificationSpecs1? verification,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/persons'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (additionalTosAcceptances != null) r'additional_tos_acceptances': encodeQueryParameter(_serializers, additionalTosAcceptances, const FullType(PersonAdditionalTosAcceptancesSpecs)),
        if (address != null) r'address': encodeQueryParameter(_serializers, address, const FullType(LegalEntityAndKycAddressSpecs1)),
        if (addressKana != null) r'address_kana': encodeQueryParameter(_serializers, addressKana, const FullType(JapanAddressKanaSpecs1)),
        if (addressKanji != null) r'address_kanji': encodeQueryParameter(_serializers, addressKanji, const FullType(JapanAddressKanjiSpecs1)),
        if (dob != null) r'dob': encodeQueryParameter(_serializers, dob, const FullType(PostAccountsAccountPeopleRequestDob)),
        if (documents != null) r'documents': encodeQueryParameter(_serializers, documents, const FullType(PersonDocumentsSpecs)),
        if (email != null) r'email': encodeQueryParameter(_serializers, email, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (firstName != null) r'first_name': encodeQueryParameter(_serializers, firstName, const FullType(String)),
        if (firstNameKana != null) r'first_name_kana': encodeQueryParameter(_serializers, firstNameKana, const FullType(String)),
        if (firstNameKanji != null) r'first_name_kanji': encodeQueryParameter(_serializers, firstNameKanji, const FullType(String)),
        if (fullNameAliases != null) r'full_name_aliases': encodeQueryParameter(_serializers, fullNameAliases, const FullType(PostAccountsAccountPeopleRequestFullNameAliases)),
        if (gender != null) r'gender': encodeQueryParameter(_serializers, gender, const FullType(String)),
        if (idNumber != null) r'id_number': encodeQueryParameter(_serializers, idNumber, const FullType(String)),
        if (idNumberSecondary != null) r'id_number_secondary': encodeQueryParameter(_serializers, idNumberSecondary, const FullType(String)),
        if (lastName != null) r'last_name': encodeQueryParameter(_serializers, lastName, const FullType(String)),
        if (lastNameKana != null) r'last_name_kana': encodeQueryParameter(_serializers, lastNameKana, const FullType(String)),
        if (lastNameKanji != null) r'last_name_kanji': encodeQueryParameter(_serializers, lastNameKanji, const FullType(String)),
        if (maidenName != null) r'maiden_name': encodeQueryParameter(_serializers, maidenName, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (nationality != null) r'nationality': encodeQueryParameter(_serializers, nationality, const FullType(String)),
        if (personToken != null) r'person_token': encodeQueryParameter(_serializers, personToken, const FullType(String)),
        if (phone != null) r'phone': encodeQueryParameter(_serializers, phone, const FullType(String)),
        if (politicalExposure != null) r'political_exposure': encodeQueryParameter(_serializers, politicalExposure, const FullType(String)),
        if (registeredAddress != null) r'registered_address': encodeQueryParameter(_serializers, registeredAddress, const FullType(AddressSpecs1)),
        if (relationship != null) r'relationship': encodeQueryParameter(_serializers, relationship, const FullType(RelationshipSpecs)),
        if (ssnLast4 != null) r'ssn_last_4': encodeQueryParameter(_serializers, ssnLast4, const FullType(String)),
        if (usCfpbData != null) r'us_cfpb_data': encodeQueryParameter(_serializers, usCfpbData, const FullType(UsCfpbDataSpecs)),
        if (verification != null) r'verification': encodeQueryParameter(_serializers, verification, const FullType(PersonVerificationSpecs1)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Person? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Person),
      ) as Person;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Person>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a person
  /// &lt;p&gt;Updates an existing person.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [person] 
  /// * [additionalTosAcceptances] 
  /// * [address] 
  /// * [addressKana] 
  /// * [addressKanji] 
  /// * [dob] 
  /// * [documents] 
  /// * [email] - The person's email address.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [firstName] - The person's first name.
  /// * [firstNameKana] - The Kana variation of the person's first name (Japan only).
  /// * [firstNameKanji] - The Kanji variation of the person's first name (Japan only).
  /// * [fullNameAliases] 
  /// * [gender] - The person's gender (International regulations require either \\\"male\\\" or \\\"female\\\").
  /// * [idNumber] - The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).
  /// * [idNumberSecondary] - The person's secondary ID number, as appropriate for their country, will be used for enhanced verification checks. In Thailand, this would be the laser code found on the back of an ID card. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://docs.stripe.com/js/tokens/create_token?type=pii).
  /// * [lastName] - The person's last name.
  /// * [lastNameKana] - The Kana variation of the person's last name (Japan only).
  /// * [lastNameKanji] - The Kanji variation of the person's last name (Japan only).
  /// * [maidenName] - The person's maiden name.
  /// * [metadata] 
  /// * [nationality] - The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or \\\"XX\\\" if unavailable.
  /// * [personToken] - A [person token](https://docs.stripe.com/connect/account-tokens), used to securely provide details to the person.
  /// * [phone] - The person's phone number.
  /// * [politicalExposure] - Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
  /// * [registeredAddress] 
  /// * [relationship] 
  /// * [ssnLast4] - The last four digits of the person's Social Security number (U.S. only).
  /// * [usCfpbData] 
  /// * [verification] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Person] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Person>> postAccountsAccountPersonsPerson({ 
    required String account,
    required String person,
    PersonAdditionalTosAcceptancesSpecs? additionalTosAcceptances,
    LegalEntityAndKycAddressSpecs1? address,
    JapanAddressKanaSpecs1? addressKana,
    JapanAddressKanjiSpecs1? addressKanji,
    PostAccountsAccountPeopleRequestDob? dob,
    PersonDocumentsSpecs? documents,
    String? email,
    BuiltList<String>? expand,
    String? firstName,
    String? firstNameKana,
    String? firstNameKanji,
    PostAccountsAccountPeopleRequestFullNameAliases? fullNameAliases,
    String? gender,
    String? idNumber,
    String? idNumberSecondary,
    String? lastName,
    String? lastNameKana,
    String? lastNameKanji,
    String? maidenName,
    PostAccountsRequestMetadata? metadata,
    String? nationality,
    String? personToken,
    String? phone,
    String? politicalExposure,
    AddressSpecs1? registeredAddress,
    RelationshipSpecs? relationship,
    String? ssnLast4,
    UsCfpbDataSpecs? usCfpbData,
    PersonVerificationSpecs1? verification,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/persons/{person}'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString()).replaceAll('{' r'person' '}', encodeQueryParameter(_serializers, person, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (additionalTosAcceptances != null) r'additional_tos_acceptances': encodeQueryParameter(_serializers, additionalTosAcceptances, const FullType(PersonAdditionalTosAcceptancesSpecs)),
        if (address != null) r'address': encodeQueryParameter(_serializers, address, const FullType(LegalEntityAndKycAddressSpecs1)),
        if (addressKana != null) r'address_kana': encodeQueryParameter(_serializers, addressKana, const FullType(JapanAddressKanaSpecs1)),
        if (addressKanji != null) r'address_kanji': encodeQueryParameter(_serializers, addressKanji, const FullType(JapanAddressKanjiSpecs1)),
        if (dob != null) r'dob': encodeQueryParameter(_serializers, dob, const FullType(PostAccountsAccountPeopleRequestDob)),
        if (documents != null) r'documents': encodeQueryParameter(_serializers, documents, const FullType(PersonDocumentsSpecs)),
        if (email != null) r'email': encodeQueryParameter(_serializers, email, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (firstName != null) r'first_name': encodeQueryParameter(_serializers, firstName, const FullType(String)),
        if (firstNameKana != null) r'first_name_kana': encodeQueryParameter(_serializers, firstNameKana, const FullType(String)),
        if (firstNameKanji != null) r'first_name_kanji': encodeQueryParameter(_serializers, firstNameKanji, const FullType(String)),
        if (fullNameAliases != null) r'full_name_aliases': encodeQueryParameter(_serializers, fullNameAliases, const FullType(PostAccountsAccountPeopleRequestFullNameAliases)),
        if (gender != null) r'gender': encodeQueryParameter(_serializers, gender, const FullType(String)),
        if (idNumber != null) r'id_number': encodeQueryParameter(_serializers, idNumber, const FullType(String)),
        if (idNumberSecondary != null) r'id_number_secondary': encodeQueryParameter(_serializers, idNumberSecondary, const FullType(String)),
        if (lastName != null) r'last_name': encodeQueryParameter(_serializers, lastName, const FullType(String)),
        if (lastNameKana != null) r'last_name_kana': encodeQueryParameter(_serializers, lastNameKana, const FullType(String)),
        if (lastNameKanji != null) r'last_name_kanji': encodeQueryParameter(_serializers, lastNameKanji, const FullType(String)),
        if (maidenName != null) r'maiden_name': encodeQueryParameter(_serializers, maidenName, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (nationality != null) r'nationality': encodeQueryParameter(_serializers, nationality, const FullType(String)),
        if (personToken != null) r'person_token': encodeQueryParameter(_serializers, personToken, const FullType(String)),
        if (phone != null) r'phone': encodeQueryParameter(_serializers, phone, const FullType(String)),
        if (politicalExposure != null) r'political_exposure': encodeQueryParameter(_serializers, politicalExposure, const FullType(String)),
        if (registeredAddress != null) r'registered_address': encodeQueryParameter(_serializers, registeredAddress, const FullType(AddressSpecs1)),
        if (relationship != null) r'relationship': encodeQueryParameter(_serializers, relationship, const FullType(RelationshipSpecs)),
        if (ssnLast4 != null) r'ssn_last_4': encodeQueryParameter(_serializers, ssnLast4, const FullType(String)),
        if (usCfpbData != null) r'us_cfpb_data': encodeQueryParameter(_serializers, usCfpbData, const FullType(UsCfpbDataSpecs)),
        if (verification != null) r'verification': encodeQueryParameter(_serializers, verification, const FullType(PersonVerificationSpecs1)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Person? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Person),
      ) as Person;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Person>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Reject an account
  /// &lt;p&gt;With &lt;a href&#x3D;\&quot;/connect\&quot;&gt;Connect&lt;/a&gt;, you can reject accounts that you have flagged as suspicious.&lt;/p&gt;  &lt;p&gt;Only accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [reason] - The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Account] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Account>> postAccountsAccountReject({ 
    required String account,
    required String reason,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/accounts/{account}/reject'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'reason': encodeQueryParameter(_serializers, reason, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Account? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Account),
      ) as Account;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Account>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// postApplePayDomains
  /// &lt;p&gt;Create an apple pay domain.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [domainName] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ApplePayDomain] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ApplePayDomain>> postApplePayDomains({ 
    required String domainName,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/apple_pay/domains';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'domain_name': encodeQueryParameter(_serializers, domainName, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ApplePayDomain? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ApplePayDomain),
      ) as ApplePayDomain;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ApplePayDomain>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update an application fee refund
  /// &lt;p&gt;Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts metadata as an argument.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [fee] 
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FeeRefund] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FeeRefund>> postApplicationFeesFeeRefundsId({ 
    required String fee,
    required String id,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/application_fees/{fee}/refunds/{id}'.replaceAll('{' r'fee' '}', encodeQueryParameter(_serializers, fee, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FeeRefund? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FeeRefund),
      ) as FeeRefund;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FeeRefund>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// postApplicationFeesIdRefund
  /// 
  ///
  /// Parameters:
  /// * [id] 
  /// * [amount] 
  /// * [directive] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ApplicationFee] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ApplicationFee>> postApplicationFeesIdRefund({ 
    required String id,
    int? amount,
    String? directive,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/application_fees/{id}/refund'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (directive != null) r'directive': encodeQueryParameter(_serializers, directive, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ApplicationFee? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ApplicationFee),
      ) as ApplicationFee;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ApplicationFee>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create an application fee refund
  /// &lt;p&gt;Refunds an application fee that has previously been collected but not yet refunded. Funds will be refunded to the Stripe account from which the fee was originally collected.&lt;/p&gt;  &lt;p&gt;You can optionally refund only part of an application fee. You can do so multiple times, until the entire fee has been refunded.&lt;/p&gt;  &lt;p&gt;Once entirely refunded, an application fee can’t be refunded again. This method will raise an error when called on an already-refunded application fee, or when trying to refund more money than is left on an application fee.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [amount] - A positive integer, in _cents (or local equivalent)_, representing how much of this fee to refund. Can refund only up to the remaining unrefunded amount of the fee.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FeeRefund] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FeeRefund>> postApplicationFeesIdRefunds({ 
    required String id,
    int? amount,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/application_fees/{id}/refunds'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FeeRefund? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FeeRefund),
      ) as FeeRefund;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FeeRefund>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Set a Secret
  /// &lt;p&gt;Create or replace a secret in the secret store.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [name] - A name for the secret that's unique within the scope.
  /// * [payload] - The plaintext secret value to be stored.
  /// * [scope] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [expiresAt] - The Unix timestamp for the expiry time of the secret, after which the secret deletes.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [AppsSecret] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<AppsSecret>> postAppsSecrets({ 
    required String name,
    required String payload,
    required ScopeParam1 scope,
    BuiltList<String>? expand,
    int? expiresAt,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/apps/secrets';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (expiresAt != null) r'expires_at': encodeQueryParameter(_serializers, expiresAt, const FullType(int)),
        r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        r'payload': encodeQueryParameter(_serializers, payload, const FullType(String)),
        r'scope': encodeQueryParameter(_serializers, scope, const FullType(ScopeParam1)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    AppsSecret? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(AppsSecret),
      ) as AppsSecret;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<AppsSecret>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Delete a Secret
  /// &lt;p&gt;Deletes a secret from the secret store by name and scope.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [name] - A name for the secret that's unique within the scope.
  /// * [scope] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [AppsSecret] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<AppsSecret>> postAppsSecretsDelete({ 
    required String name,
    required ScopeParam1 scope,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/apps/secrets/delete';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        r'scope': encodeQueryParameter(_serializers, scope, const FullType(ScopeParam1)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    AppsSecret? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(AppsSecret),
      ) as AppsSecret;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<AppsSecret>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a billing alert
  /// &lt;p&gt;Creates a billing alert&lt;/p&gt;
  ///
  /// Parameters:
  /// * [alertType] - The type of alert to create.
  /// * [title] - The title of the alert.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [usageThreshold] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingAlert] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingAlert>> postBillingAlerts({ 
    required String alertType,
    required String title,
    BuiltList<String>? expand,
    UsageThresholdConfig? usageThreshold,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/alerts';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'alert_type': encodeQueryParameter(_serializers, alertType, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'title': encodeQueryParameter(_serializers, title, const FullType(String)),
        if (usageThreshold != null) r'usage_threshold': encodeQueryParameter(_serializers, usageThreshold, const FullType(UsageThresholdConfig)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingAlert? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingAlert),
      ) as BillingAlert;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingAlert>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Activate a billing alert
  /// &lt;p&gt;Reactivates this alert, allowing it to trigger again.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingAlert] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingAlert>> postBillingAlertsIdActivate({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/alerts/{id}/activate'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingAlert? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingAlert),
      ) as BillingAlert;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingAlert>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Archive a billing alert
  /// &lt;p&gt;Archives this alert, removing it from the list view and APIs. This is non-reversible.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingAlert] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingAlert>> postBillingAlertsIdArchive({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/alerts/{id}/archive'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingAlert? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingAlert),
      ) as BillingAlert;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingAlert>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Deactivate a billing alert
  /// &lt;p&gt;Deactivates this alert, preventing it from triggering.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingAlert] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingAlert>> postBillingAlertsIdDeactivate({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/alerts/{id}/deactivate'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingAlert? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingAlert),
      ) as BillingAlert;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingAlert>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a credit grant
  /// &lt;p&gt;Creates a credit grant.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [amount] 
  /// * [applicabilityConfig] 
  /// * [category] - The category of this credit grant.
  /// * [customer] - ID of the customer to receive the billing credits.
  /// * [effectiveAt] - The time when the billing credits become effective-when they're eligible for use. It defaults to the current timestamp if not specified.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [expiresAt] - The time when the billing credits expire. If not specified, the billing credits don't expire.
  /// * [metadata] - Set of key-value pairs that you can attach to an object. You can use this to store additional information about the object (for example, cost basis) in a structured format.
  /// * [name] - A descriptive name shown in the Dashboard.
  /// * [priority] - The desired priority for applying this credit grant. If not specified, it will be set to the default value of 50. The highest priority is 0 and the lowest is 100.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingCreditGrant] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingCreditGrant>> postBillingCreditGrants({ 
    required AmountParam amount,
    required ApplicabilityConfigParam applicabilityConfig,
    required String category,
    required String customer,
    int? effectiveAt,
    BuiltList<String>? expand,
    int? expiresAt,
    BuiltMap<String, String>? metadata,
    String? name,
    int? priority,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/credit_grants';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'amount': encodeQueryParameter(_serializers, amount, const FullType(AmountParam)),
        r'applicability_config': encodeQueryParameter(_serializers, applicabilityConfig, const FullType(ApplicabilityConfigParam)),
        r'category': encodeQueryParameter(_serializers, category, const FullType(String)),
        r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (effectiveAt != null) r'effective_at': encodeQueryParameter(_serializers, effectiveAt, const FullType(int)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (expiresAt != null) r'expires_at': encodeQueryParameter(_serializers, expiresAt, const FullType(int)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        if (priority != null) r'priority': encodeQueryParameter(_serializers, priority, const FullType(int)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingCreditGrant? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingCreditGrant),
      ) as BillingCreditGrant;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingCreditGrant>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a credit grant
  /// &lt;p&gt;Updates a credit grant.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] - Unique identifier for the object.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [expiresAt] 
  /// * [metadata] - Set of key-value pairs you can attach to an object. You can use this to store additional information about the object (for example, cost basis) in a structured format.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingCreditGrant] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingCreditGrant>> postBillingCreditGrantsId({ 
    required String id,
    BuiltList<String>? expand,
    PostBillingCreditGrantsIdRequestExpiresAt? expiresAt,
    BuiltMap<String, String>? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/credit_grants/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (expiresAt != null) r'expires_at': encodeQueryParameter(_serializers, expiresAt, const FullType(PostBillingCreditGrantsIdRequestExpiresAt)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingCreditGrant? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingCreditGrant),
      ) as BillingCreditGrant;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingCreditGrant>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Expire a credit grant
  /// &lt;p&gt;Expires a credit grant.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] - Unique identifier for the object.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingCreditGrant] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingCreditGrant>> postBillingCreditGrantsIdExpire({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/credit_grants/{id}/expire'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingCreditGrant? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingCreditGrant),
      ) as BillingCreditGrant;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingCreditGrant>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Void a credit grant
  /// &lt;p&gt;Voids a credit grant.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] - Unique identifier for the object.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingCreditGrant] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingCreditGrant>> postBillingCreditGrantsIdVoid({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/credit_grants/{id}/void'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingCreditGrant? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingCreditGrant),
      ) as BillingCreditGrant;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingCreditGrant>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a billing meter event adjustment
  /// &lt;p&gt;Creates a billing meter event adjustment.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [eventName] - The name of the meter event. Corresponds with the `event_name` field on a meter.
  /// * [type] - Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.
  /// * [cancel] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingMeterEventAdjustment] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingMeterEventAdjustment>> postBillingMeterEventAdjustments({ 
    required String eventName,
    required String type,
    EventAdjustmentCancelSettingsParam? cancel,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/meter_event_adjustments';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (cancel != null) r'cancel': encodeQueryParameter(_serializers, cancel, const FullType(EventAdjustmentCancelSettingsParam)),
        r'event_name': encodeQueryParameter(_serializers, eventName, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingMeterEventAdjustment? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingMeterEventAdjustment),
      ) as BillingMeterEventAdjustment;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingMeterEventAdjustment>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a billing meter event
  /// &lt;p&gt;Creates a billing meter event.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [eventName] - The name of the meter event. Corresponds with the `event_name` field on a meter.
  /// * [payload] - The payload of the event. This must contain the fields corresponding to a meter's `customer_mapping.event_payload_key` (default is `stripe_customer_id`) and `value_settings.event_payload_key` (default is `value`). Read more about the [payload](https://docs.stripe.com/billing/subscriptions/usage-based/recording-usage#payload-key-overrides).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [identifier] - A unique identifier for the event. If not provided, one is generated. We recommend using UUID-like identifiers. We will enforce uniqueness within a rolling period of at least 24 hours. The enforcement of uniqueness primarily addresses issues arising from accidental retries or other problems occurring within extremely brief time intervals. This approach helps prevent duplicate entries and ensures data integrity in high-frequency operations.
  /// * [timestamp] - The time of the event. Measured in seconds since the Unix epoch. Must be within the past 35 calendar days or up to 5 minutes in the future. Defaults to current timestamp if not specified.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingMeterEvent] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingMeterEvent>> postBillingMeterEvents({ 
    required String eventName,
    required BuiltMap<String, String> payload,
    BuiltList<String>? expand,
    String? identifier,
    int? timestamp,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/meter_events';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'event_name': encodeQueryParameter(_serializers, eventName, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (identifier != null) r'identifier': encodeQueryParameter(_serializers, identifier, const FullType(String)),
        r'payload': encodeQueryParameter(_serializers, payload, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (timestamp != null) r'timestamp': encodeQueryParameter(_serializers, timestamp, const FullType(int)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingMeterEvent? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingMeterEvent),
      ) as BillingMeterEvent;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingMeterEvent>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a billing meter
  /// &lt;p&gt;Creates a billing meter.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [defaultAggregation] 
  /// * [displayName] - The meter’s name. Not visible to the customer.
  /// * [eventName] - The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.
  /// * [customerMapping] 
  /// * [eventTimeWindow] - The time window to pre-aggregate meter events for, if any.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [valueSettings] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingMeter] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingMeter>> postBillingMeters({ 
    required AggregationSettingsParam defaultAggregation,
    required String displayName,
    required String eventName,
    CustomerMappingParam? customerMapping,
    String? eventTimeWindow,
    BuiltList<String>? expand,
    MeterValueSettingsParam? valueSettings,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/meters';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (customerMapping != null) r'customer_mapping': encodeQueryParameter(_serializers, customerMapping, const FullType(CustomerMappingParam)),
        r'default_aggregation': encodeQueryParameter(_serializers, defaultAggregation, const FullType(AggregationSettingsParam)),
        r'display_name': encodeQueryParameter(_serializers, displayName, const FullType(String)),
        r'event_name': encodeQueryParameter(_serializers, eventName, const FullType(String)),
        if (eventTimeWindow != null) r'event_time_window': encodeQueryParameter(_serializers, eventTimeWindow, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (valueSettings != null) r'value_settings': encodeQueryParameter(_serializers, valueSettings, const FullType(MeterValueSettingsParam)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingMeter? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingMeter),
      ) as BillingMeter;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingMeter>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a billing meter
  /// &lt;p&gt;Updates a billing meter.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] - Unique identifier for the object.
  /// * [displayName] - The meter’s name. Not visible to the customer.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingMeter] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingMeter>> postBillingMetersId({ 
    required String id,
    String? displayName,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/meters/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (displayName != null) r'display_name': encodeQueryParameter(_serializers, displayName, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingMeter? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingMeter),
      ) as BillingMeter;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingMeter>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Deactivate a billing meter
  /// &lt;p&gt;When a meter is deactivated, no more meter events will be accepted for this meter. You can’t attach a deactivated meter to a price.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] - Unique identifier for the object.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingMeter] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingMeter>> postBillingMetersIdDeactivate({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/meters/{id}/deactivate'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingMeter? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingMeter),
      ) as BillingMeter;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingMeter>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Reactivate a billing meter
  /// &lt;p&gt;When a meter is reactivated, events for this meter can be accepted and you can attach the meter to a price.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] - Unique identifier for the object.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingMeter] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingMeter>> postBillingMetersIdReactivate({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing/meters/{id}/reactivate'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingMeter? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingMeter),
      ) as BillingMeter;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingMeter>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a portal configuration
  /// &lt;p&gt;Creates a configuration that describes the functionality and behavior of a PortalSession&lt;/p&gt;
  ///
  /// Parameters:
  /// * [features] 
  /// * [businessProfile] 
  /// * [defaultReturnUrl] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [loginPage] 
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingPortalConfiguration] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingPortalConfiguration>> postBillingPortalConfigurations({ 
    required FeaturesCreationParam features,
    BusinessProfileCreateParam? businessProfile,
    PostBillingPortalConfigurationsRequestDefaultReturnUrl? defaultReturnUrl,
    BuiltList<String>? expand,
    LoginPageCreateParam? loginPage,
    BuiltMap<String, String>? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing_portal/configurations';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (businessProfile != null) r'business_profile': encodeQueryParameter(_serializers, businessProfile, const FullType(BusinessProfileCreateParam)),
        if (defaultReturnUrl != null) r'default_return_url': encodeQueryParameter(_serializers, defaultReturnUrl, const FullType(PostBillingPortalConfigurationsRequestDefaultReturnUrl)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'features': encodeQueryParameter(_serializers, features, const FullType(FeaturesCreationParam)),
        if (loginPage != null) r'login_page': encodeQueryParameter(_serializers, loginPage, const FullType(LoginPageCreateParam)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingPortalConfiguration? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingPortalConfiguration),
      ) as BillingPortalConfiguration;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingPortalConfiguration>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a portal configuration
  /// &lt;p&gt;Updates a configuration that describes the functionality of the customer portal.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [configuration] 
  /// * [active] - Whether the configuration is active and can be used to create portal sessions.
  /// * [businessProfile] 
  /// * [defaultReturnUrl] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [features] 
  /// * [loginPage] 
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingPortalConfiguration] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingPortalConfiguration>> postBillingPortalConfigurationsConfiguration({ 
    required String configuration,
    bool? active,
    BusinessProfileUpdateParam? businessProfile,
    PostBillingPortalConfigurationsRequestDefaultReturnUrl? defaultReturnUrl,
    BuiltList<String>? expand,
    FeaturesUpdatingParam? features,
    LoginPageUpdateParam? loginPage,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing_portal/configurations/{configuration}'.replaceAll('{' r'configuration' '}', encodeQueryParameter(_serializers, configuration, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
        if (businessProfile != null) r'business_profile': encodeQueryParameter(_serializers, businessProfile, const FullType(BusinessProfileUpdateParam)),
        if (defaultReturnUrl != null) r'default_return_url': encodeQueryParameter(_serializers, defaultReturnUrl, const FullType(PostBillingPortalConfigurationsRequestDefaultReturnUrl)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (features != null) r'features': encodeQueryParameter(_serializers, features, const FullType(FeaturesUpdatingParam)),
        if (loginPage != null) r'login_page': encodeQueryParameter(_serializers, loginPage, const FullType(LoginPageUpdateParam)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingPortalConfiguration? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingPortalConfiguration),
      ) as BillingPortalConfiguration;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingPortalConfiguration>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a portal session
  /// &lt;p&gt;Creates a session of the customer portal.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] - The ID of an existing customer.
  /// * [configuration] - The ID of an existing [configuration](https://stripe.com/docs/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [flowData] 
  /// * [locale] - The IETF language tag of the locale customer portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.
  /// * [onBehalfOf] - The `on_behalf_of` account to use for this session. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays.
  /// * [returnUrl] - The default URL to redirect customers to when they click on the portal's link to return to your website.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BillingPortalSession] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BillingPortalSession>> postBillingPortalSessions({ 
    required String customer,
    String? configuration,
    BuiltList<String>? expand,
    FlowDataParam? flowData,
    String? locale,
    String? onBehalfOf,
    String? returnUrl,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/billing_portal/sessions';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (configuration != null) r'configuration': encodeQueryParameter(_serializers, configuration, const FullType(String)),
        r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (flowData != null) r'flow_data': encodeQueryParameter(_serializers, flowData, const FullType(FlowDataParam)),
        if (locale != null) r'locale': encodeQueryParameter(_serializers, locale, const FullType(String)),
        if (onBehalfOf != null) r'on_behalf_of': encodeQueryParameter(_serializers, onBehalfOf, const FullType(String)),
        if (returnUrl != null) r'return_url': encodeQueryParameter(_serializers, returnUrl, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BillingPortalSession? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BillingPortalSession),
      ) as BillingPortalSession;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BillingPortalSession>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// postCharges
  /// &lt;p&gt;This method is no longer recommended—use the &lt;a href&#x3D;\&quot;/docs/api/payment_intents\&quot;&gt;Payment Intents API&lt;/a&gt; to initiate a new payment instead. Confirmation of the PaymentIntent creates the &lt;code&gt;Charge&lt;/code&gt; object used to request payment.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [amount] - Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  /// * [applicationFee] 
  /// * [applicationFeeAmount] - A fee in cents (or local equivalent) that will be applied to the charge and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the `Stripe-Account` header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collect-fees).
  /// * [capture] - Whether to immediately capture the charge. Defaults to `true`. When `false`, the charge issues an authorization (or pre-authorization), and will need to be [captured](https://stripe.com/docs/api#capture_charge) later. Uncaptured charges expire after a set number of days (7 by default). For more information, see the [authorizing charges and settling later](https://stripe.com/docs/charges/placing-a-hold) documentation.
  /// * [card] 
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [customer] - The ID of an existing customer that will be charged in this request.
  /// * [description] - An arbitrary string which you can attach to a `Charge` object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing.
  /// * [destination] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [onBehalfOf] - The Stripe account ID for which these funds are intended. Automatically set if you use the `destination` parameter. For details, see [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/separate-charges-and-transfers#settlement-merchant).
  /// * [radarOptions] 
  /// * [receiptEmail] - The email address to which this charge's [receipt](https://stripe.com/docs/dashboard/receipts) will be sent. The receipt will not be sent until the charge is paid, and no receipts will be sent for test mode charges. If this charge is for a [Customer](https://stripe.com/docs/api/customers/object), the email address specified here will override the customer's email address. If `receipt_email` is specified for a charge in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
  /// * [shipping] 
  /// * [source_] - A payment source to be charged. This can be the ID of a [card](https://stripe.com/docs/api#cards) (i.e., credit or debit card), a [bank account](https://stripe.com/docs/api#bank_accounts), a [source](https://stripe.com/docs/api#sources), a [token](https://stripe.com/docs/api#tokens), or a [connected account](https://stripe.com/docs/connect/account-debits#charging-a-connected-account). For certain sources---namely, [cards](https://stripe.com/docs/api#cards), [bank accounts](https://stripe.com/docs/api#bank_accounts), and attached [sources](https://stripe.com/docs/api#sources)---you must also pass the ID of the associated customer.
  /// * [statementDescriptor] - For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  For a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix.
  /// * [statementDescriptorSuffix] - Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor.
  /// * [transferData] 
  /// * [transferGroup] - A string that identifies this transaction as part of a group. For details, see [Grouping transactions](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options).
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Charge] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Charge>> postCharges({ 
    int? amount,
    int? applicationFee,
    int? applicationFeeAmount,
    bool? capture,
    PostChargesRequestCard? card,
    String? currency,
    String? customer,
    String? description,
    PostChargesRequestDestination? destination,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    String? onBehalfOf,
    RadarOptionsWithHiddenOptions? radarOptions,
    String? receiptEmail,
    OptionalFieldsShipping? shipping,
    String? source_,
    String? statementDescriptor,
    String? statementDescriptorSuffix,
    TransferDataSpecs? transferData,
    String? transferGroup,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/charges';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (applicationFee != null) r'application_fee': encodeQueryParameter(_serializers, applicationFee, const FullType(int)),
        if (applicationFeeAmount != null) r'application_fee_amount': encodeQueryParameter(_serializers, applicationFeeAmount, const FullType(int)),
        if (capture != null) r'capture': encodeQueryParameter(_serializers, capture, const FullType(bool)),
        if (card != null) r'card': encodeQueryParameter(_serializers, card, const FullType(PostChargesRequestCard)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (destination != null) r'destination': encodeQueryParameter(_serializers, destination, const FullType(PostChargesRequestDestination)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (onBehalfOf != null) r'on_behalf_of': encodeQueryParameter(_serializers, onBehalfOf, const FullType(String)),
        if (radarOptions != null) r'radar_options': encodeQueryParameter(_serializers, radarOptions, const FullType(RadarOptionsWithHiddenOptions)),
        if (receiptEmail != null) r'receipt_email': encodeQueryParameter(_serializers, receiptEmail, const FullType(String)),
        if (shipping != null) r'shipping': encodeQueryParameter(_serializers, shipping, const FullType(OptionalFieldsShipping)),
        if (source_ != null) r'source': encodeQueryParameter(_serializers, source_, const FullType(String)),
        if (statementDescriptor != null) r'statement_descriptor': encodeQueryParameter(_serializers, statementDescriptor, const FullType(String)),
        if (statementDescriptorSuffix != null) r'statement_descriptor_suffix': encodeQueryParameter(_serializers, statementDescriptorSuffix, const FullType(String)),
        if (transferData != null) r'transfer_data': encodeQueryParameter(_serializers, transferData, const FullType(TransferDataSpecs)),
        if (transferGroup != null) r'transfer_group': encodeQueryParameter(_serializers, transferGroup, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Charge? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Charge),
      ) as Charge;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Charge>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a charge
  /// &lt;p&gt;Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [charge] 
  /// * [customer] - The ID of an existing customer that will be associated with this request. This field may only be updated if there is no existing associated customer with this charge.
  /// * [description] - An arbitrary string which you can attach to a charge object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [fraudDetails] 
  /// * [metadata] 
  /// * [receiptEmail] - This is the email address that the receipt for this charge will be sent to. If this field is updated, then a new email receipt will be sent to the updated address.
  /// * [shipping] 
  /// * [transferGroup] - A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Charge] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Charge>> postChargesCharge({ 
    required String charge,
    String? customer,
    String? description,
    BuiltList<String>? expand,
    FraudDetails? fraudDetails,
    PostAccountsRequestMetadata? metadata,
    String? receiptEmail,
    OptionalFieldsShipping? shipping,
    String? transferGroup,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/charges/{charge}'.replaceAll('{' r'charge' '}', encodeQueryParameter(_serializers, charge, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (fraudDetails != null) r'fraud_details': encodeQueryParameter(_serializers, fraudDetails, const FullType(FraudDetails)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (receiptEmail != null) r'receipt_email': encodeQueryParameter(_serializers, receiptEmail, const FullType(String)),
        if (shipping != null) r'shipping': encodeQueryParameter(_serializers, shipping, const FullType(OptionalFieldsShipping)),
        if (transferGroup != null) r'transfer_group': encodeQueryParameter(_serializers, transferGroup, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Charge? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Charge),
      ) as Charge;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Charge>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Capture a payment
  /// &lt;p&gt;Capture the payment of an existing, uncaptured charge that was created with the &lt;code&gt;capture&lt;/code&gt; option set to false.&lt;/p&gt;  &lt;p&gt;Uncaptured payments expire a set number of days after they are created (&lt;a href&#x3D;\&quot;/docs/charges/placing-a-hold\&quot;&gt;7 by default&lt;/a&gt;), after which they are marked as refunded and capture attempts will fail.&lt;/p&gt;  &lt;p&gt;Don’t use this method to capture a PaymentIntent-initiated charge. Use &lt;a href&#x3D;\&quot;/docs/api/payment_intents/capture\&quot;&gt;Capture a PaymentIntent&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [charge] 
  /// * [amount] - The amount to capture, which must be less than or equal to the original amount.
  /// * [applicationFee] - An application fee to add on to this charge.
  /// * [applicationFeeAmount] - An application fee amount to add on to this charge, which must be less than or equal to the original amount.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [receiptEmail] - The email address to send this charge's receipt to. This will override the previously-specified email address for this charge, if one was set. Receipts will not be sent in test mode.
  /// * [statementDescriptor] - For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  For a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix.
  /// * [statementDescriptorSuffix] - Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor.
  /// * [transferData] 
  /// * [transferGroup] - A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Charge] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Charge>> postChargesChargeCapture({ 
    required String charge,
    int? amount,
    int? applicationFee,
    int? applicationFeeAmount,
    BuiltList<String>? expand,
    String? receiptEmail,
    String? statementDescriptor,
    String? statementDescriptorSuffix,
    TransferDataSpecs1? transferData,
    String? transferGroup,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/charges/{charge}/capture'.replaceAll('{' r'charge' '}', encodeQueryParameter(_serializers, charge, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (applicationFee != null) r'application_fee': encodeQueryParameter(_serializers, applicationFee, const FullType(int)),
        if (applicationFeeAmount != null) r'application_fee_amount': encodeQueryParameter(_serializers, applicationFeeAmount, const FullType(int)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (receiptEmail != null) r'receipt_email': encodeQueryParameter(_serializers, receiptEmail, const FullType(String)),
        if (statementDescriptor != null) r'statement_descriptor': encodeQueryParameter(_serializers, statementDescriptor, const FullType(String)),
        if (statementDescriptorSuffix != null) r'statement_descriptor_suffix': encodeQueryParameter(_serializers, statementDescriptorSuffix, const FullType(String)),
        if (transferData != null) r'transfer_data': encodeQueryParameter(_serializers, transferData, const FullType(TransferDataSpecs1)),
        if (transferGroup != null) r'transfer_group': encodeQueryParameter(_serializers, transferGroup, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Charge? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Charge),
      ) as Charge;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Charge>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// postChargesChargeDispute
  /// 
  ///
  /// Parameters:
  /// * [charge] 
  /// * [evidence] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [submit] - Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default).
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Dispute] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Dispute>> postChargesChargeDispute({ 
    required String charge,
    DisputeEvidenceParams? evidence,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    bool? submit,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/charges/{charge}/dispute'.replaceAll('{' r'charge' '}', encodeQueryParameter(_serializers, charge, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (evidence != null) r'evidence': encodeQueryParameter(_serializers, evidence, const FullType(DisputeEvidenceParams)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (submit != null) r'submit': encodeQueryParameter(_serializers, submit, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Dispute? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Dispute),
      ) as Dispute;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Dispute>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// postChargesChargeDisputeClose
  /// 
  ///
  /// Parameters:
  /// * [charge] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Dispute] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Dispute>> postChargesChargeDisputeClose({ 
    required String charge,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/charges/{charge}/dispute/close'.replaceAll('{' r'charge' '}', encodeQueryParameter(_serializers, charge, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Dispute? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Dispute),
      ) as Dispute;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Dispute>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a refund
  /// &lt;p&gt;When you create a new refund, you must specify either a Charge or a PaymentIntent object.&lt;/p&gt;  &lt;p&gt;This action refunds a previously created charge that’s not refunded yet. Funds are refunded to the credit or debit card that’s originally charged.&lt;/p&gt;  &lt;p&gt;You can optionally refund only part of a charge. You can repeat this until the entire charge is refunded.&lt;/p&gt;  &lt;p&gt;After you entirely refund a charge, you can’t refund it again. This method raises an error when it’s called on an already-refunded charge, or when you attempt to refund more money than is left on a charge.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [charge] - The identifier of the charge to refund.
  /// * [amount] - A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) representing how much of this charge to refund. Can refund only up to the remaining, unrefunded amount of the charge.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [instructionsEmail] - For payment methods without native refund support (e.g., Konbini, PromptPay), use this email from the customer to receive refund instructions.
  /// * [metadata] 
  /// * [paymentIntent] - The identifier of the PaymentIntent to refund.
  /// * [reason] - String indicating the reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`. If you believe the charge to be fraudulent, specifying `fraudulent` as the reason will add the associated card and email to your [block lists](https://stripe.com/docs/radar/lists), and will also help us improve our fraud detection algorithms.
  /// * [refundApplicationFee] - Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.
  /// * [reverseTransfer] - Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount).<br><br>A transfer can be reversed only by the application that created the charge.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Charge] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Charge>> postChargesChargeRefund({ 
    required String charge,
    int? amount,
    BuiltList<String>? expand,
    String? instructionsEmail,
    PostAccountsRequestMetadata? metadata,
    String? paymentIntent,
    String? reason,
    bool? refundApplicationFee,
    bool? reverseTransfer,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/charges/{charge}/refund'.replaceAll('{' r'charge' '}', encodeQueryParameter(_serializers, charge, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (instructionsEmail != null) r'instructions_email': encodeQueryParameter(_serializers, instructionsEmail, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (paymentIntent != null) r'payment_intent': encodeQueryParameter(_serializers, paymentIntent, const FullType(String)),
        if (reason != null) r'reason': encodeQueryParameter(_serializers, reason, const FullType(String)),
        if (refundApplicationFee != null) r'refund_application_fee': encodeQueryParameter(_serializers, refundApplicationFee, const FullType(bool)),
        if (reverseTransfer != null) r'reverse_transfer': encodeQueryParameter(_serializers, reverseTransfer, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Charge? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Charge),
      ) as Charge;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Charge>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create customer balance refund
  /// &lt;p&gt;When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.&lt;/p&gt;  &lt;p&gt;Creating a new refund will refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.&lt;/p&gt;  &lt;p&gt;You can optionally refund only part of a charge. You can do so multiple times, until the entire charge has been refunded.&lt;/p&gt;  &lt;p&gt;Once entirely refunded, a charge can’t be refunded again. This method will raise an error when called on an already-refunded charge, or when trying to refund more money than is left on a charge.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [charge] - The identifier of the charge to refund.
  /// * [amount] 
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [customer] - Customer whose customer balance to refund from.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [instructionsEmail] - For payment methods without native refund support (e.g., Konbini, PromptPay), use this email from the customer to receive refund instructions.
  /// * [metadata] 
  /// * [origin] - Origin of the refund
  /// * [paymentIntent] - The identifier of the PaymentIntent to refund.
  /// * [reason] - String indicating the reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`. If you believe the charge to be fraudulent, specifying `fraudulent` as the reason will add the associated card and email to your [block lists](https://stripe.com/docs/radar/lists), and will also help us improve our fraud detection algorithms.
  /// * [refundApplicationFee] - Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.
  /// * [reverseTransfer] - Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount).<br><br>A transfer can be reversed only by the application that created the charge.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Refund] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Refund>> postChargesChargeRefunds({ 
    required String charge,
    int? amount,
    String? currency,
    String? customer,
    BuiltList<String>? expand,
    String? instructionsEmail,
    PostAccountsRequestMetadata? metadata,
    String? origin,
    String? paymentIntent,
    String? reason,
    bool? refundApplicationFee,
    bool? reverseTransfer,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/charges/{charge}/refunds'.replaceAll('{' r'charge' '}', encodeQueryParameter(_serializers, charge, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (instructionsEmail != null) r'instructions_email': encodeQueryParameter(_serializers, instructionsEmail, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (origin != null) r'origin': encodeQueryParameter(_serializers, origin, const FullType(String)),
        if (paymentIntent != null) r'payment_intent': encodeQueryParameter(_serializers, paymentIntent, const FullType(String)),
        if (reason != null) r'reason': encodeQueryParameter(_serializers, reason, const FullType(String)),
        if (refundApplicationFee != null) r'refund_application_fee': encodeQueryParameter(_serializers, refundApplicationFee, const FullType(bool)),
        if (reverseTransfer != null) r'reverse_transfer': encodeQueryParameter(_serializers, reverseTransfer, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Refund? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Refund),
      ) as Refund;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Refund>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// postChargesChargeRefundsRefund
  /// &lt;p&gt;Update a specified refund.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [charge] 
  /// * [refund] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Refund] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Refund>> postChargesChargeRefundsRefund({ 
    required String charge,
    required String refund,
    BuiltList<String>? expand,
    IndividualSpecsMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/charges/{charge}/refunds/{refund}'.replaceAll('{' r'charge' '}', encodeQueryParameter(_serializers, charge, const FullType(String)).toString()).replaceAll('{' r'refund' '}', encodeQueryParameter(_serializers, refund, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(IndividualSpecsMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Refund? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Refund),
      ) as Refund;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Refund>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a Checkout Session
  /// &lt;p&gt;Creates a Checkout Session object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [adaptivePricing] 
  /// * [afterExpiration] 
  /// * [allowPromotionCodes] - Enables user redeemable promotion codes.
  /// * [automaticTax] 
  /// * [billingAddressCollection] - Specify whether Checkout should collect the customer's billing address. Defaults to `auto`.
  /// * [cancelUrl] - If set, Checkout displays a back button and customers will be directed to this URL if they decide to cancel payment and return to your website. This parameter is not allowed if ui_mode is `embedded` or `custom`.
  /// * [clientReferenceId] - A unique string to reference the Checkout Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the session with your internal systems.
  /// * [consentCollection] 
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). Required in `setup` mode when `payment_method_types` is not set.
  /// * [customFields] - Collect additional information from your customer using custom fields. Up to 3 fields are supported.
  /// * [customText] 
  /// * [customer] - ID of an existing Customer, if one exists. In `payment` mode, the customer’s most recently saved card payment method will be used to prefill the email, name, card details, and billing address on the Checkout page. In `subscription` mode, the customer’s [default payment method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) will be used if it’s a card, otherwise the most recently saved card will be used. A valid billing address, billing name and billing email are required on the payment method for Checkout to prefill the customer's card details.  If the Customer already has a valid [email](https://stripe.com/docs/api/customers/object#customer_object-email) set, the email will be prefilled and not editable in Checkout. If the Customer does not have a valid `email`, Checkout will set the email entered during the session on the Customer.  If blank for Checkout Sessions in `subscription` mode or with `customer_creation` set as `always` in `payment` mode, Checkout will create a new Customer object based on information provided during the payment flow.  You can set [`payment_intent_data.setup_future_usage`](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-payment_intent_data-setup_future_usage) to have Checkout automatically attach the payment method to the Customer you pass in for future reuse.
  /// * [customerCreation] - Configure whether a Checkout Session creates a [Customer](https://stripe.com/docs/api/customers) during Session confirmation.  When a Customer is not created, you can still retrieve email, address, and other customer data entered in Checkout with [customer_details](https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-customer_details).  Sessions that don't create Customers instead are grouped by [guest customers](https://stripe.com/docs/payments/checkout/guest-customers) in the Dashboard. Promotion codes limited to first time customers will return invalid for these Sessions.  Can only be set in `payment` and `setup` mode.
  /// * [customerEmail] - If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once a session is complete, use the `customer` field.
  /// * [customerUpdate] 
  /// * [discounts] - The coupon or promotion code to apply to this Session. Currently, only up to one may be specified.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [expiresAt] - The Epoch time in seconds at which the Checkout Session will expire. It can be anywhere from 30 minutes to 24 hours after Checkout Session creation. By default, this value is 24 hours from creation.
  /// * [invoiceCreation] 
  /// * [lineItems] - A list of items the customer is purchasing. Use this parameter to pass one-time or recurring [Prices](https://stripe.com/docs/api/prices). The parameter is required for `payment` and `subscription` mode.  For `payment` mode, there is a maximum of 100 line items, however it is recommended to consolidate line items if there are more than a few dozen.  For `subscription` mode, there is a maximum of 20 line items with recurring Prices and 20 line items with one-time Prices. Line items with one-time Prices will be on the initial invoice only.
  /// * [locale] - The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [mode] - The mode of the Checkout Session. Pass `subscription` if the Checkout Session includes at least one recurring item.
  /// * [optionalItems] - A list of optional items the customer can add to their order at checkout. Use this parameter to pass one-time or recurring [Prices](https://stripe.com/docs/api/prices).  There is a maximum of 10 optional items allowed on a Checkout Session, and the existing limits on the number of line items allowed on a Checkout Session apply to the combined number of line items and optional items.  For `payment` mode, there is a maximum of 100 combined line items and optional items, however it is recommended to consolidate items if there are more than a few dozen.  For `subscription` mode, there is a maximum of 20 line items and optional items with recurring Prices and 20 line items and optional items with one-time Prices.
  /// * [originContext] - Where the user is coming from. This informs the optimizations that are applied to the session. For example, a session originating from a mobile app may behave more like a native app, depending on the platform. This parameter is currently not allowed if `ui_mode` is `custom`.
  /// * [paymentIntentData] 
  /// * [paymentMethodCollection] - Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0. This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in `subscription` mode. Defaults to `always`.  If you'd like information on how to collect a payment method outside of Checkout, read the guide on configuring [subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
  /// * [paymentMethodConfiguration] - The ID of the payment method configuration to use with this Checkout session.
  /// * [paymentMethodData] 
  /// * [paymentMethodOptions] 
  /// * [paymentMethodTypes] - A list of the types of payment methods (e.g., `card`) this Checkout Session can accept.  You can omit this attribute to manage your payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods). See [Dynamic Payment Methods](https://stripe.com/docs/payments/payment-methods/integration-options#using-dynamic-payment-methods) for more details.  Read more about the supported payment methods and their requirements in our [payment method details guide](/docs/payments/checkout/payment-methods).  If multiple payment methods are passed, Checkout will dynamically reorder them to prioritize the most relevant payment methods based on the customer's location and other characteristics.
  /// * [permissions] 
  /// * [phoneNumberCollection] 
  /// * [redirectOnCompletion] - This parameter applies to `ui_mode: embedded`. Learn more about the [redirect behavior](https://stripe.com/docs/payments/checkout/custom-success-page?payment-ui=embedded-form) of embedded sessions. Defaults to `always`.
  /// * [returnUrl] - The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. This parameter is required if `ui_mode` is `embedded` or `custom` and redirect-based payment methods are enabled on the session.
  /// * [savedPaymentMethodOptions] 
  /// * [setupIntentData] 
  /// * [shippingAddressCollection] 
  /// * [shippingOptions] - The shipping rate options to apply to this Session. Up to a maximum of 5.
  /// * [submitType] - Describes the type of transaction being performed by Checkout in order to customize relevant text on the page, such as the submit button.  `submit_type` can only be specified on Checkout Sessions in `payment` or `subscription` mode. If blank or `auto`, `pay` is used.
  /// * [subscriptionData] 
  /// * [successUrl] - The URL to which Stripe should send customers when payment or setup is complete. This parameter is not allowed if ui_mode is `embedded` or `custom`. If you'd like to use information from the successful Checkout Session on your page, read the guide on [customizing your success page](https://stripe.com/docs/payments/checkout/custom-success-page).
  /// * [taxIdCollection] 
  /// * [uiMode] - The UI mode of the Session. Defaults to `hosted`.
  /// * [walletOptions] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CheckoutSession] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CheckoutSession>> postCheckoutSessions({ 
    AdaptivePricingParams? adaptivePricing,
    AfterExpirationParams? afterExpiration,
    bool? allowPromotionCodes,
    AutomaticTaxParams? automaticTax,
    String? billingAddressCollection,
    String? cancelUrl,
    String? clientReferenceId,
    ConsentCollectionParams? consentCollection,
    String? currency,
    BuiltList<CustomFieldParam>? customFields,
    CustomTextParam? customText,
    String? customer,
    String? customerCreation,
    String? customerEmail,
    CustomerUpdateParams? customerUpdate,
    BuiltList<DiscountParams>? discounts,
    BuiltList<String>? expand,
    int? expiresAt,
    InvoiceCreationParams? invoiceCreation,
    BuiltList<LineItemParams>? lineItems,
    String? locale,
    BuiltMap<String, String>? metadata,
    String? mode,
    BuiltList<OptionalItemParams>? optionalItems,
    String? originContext,
    PaymentIntentDataParams? paymentIntentData,
    String? paymentMethodCollection,
    String? paymentMethodConfiguration,
    PaymentMethodDataParam? paymentMethodData,
    PaymentMethodOptionsParam? paymentMethodOptions,
    BuiltList<String>? paymentMethodTypes,
    PermissionsParam? permissions,
    PhoneNumberCollectionParams? phoneNumberCollection,
    String? redirectOnCompletion,
    String? returnUrl,
    SavedPaymentMethodOptionsParam? savedPaymentMethodOptions,
    SetupIntentDataParam? setupIntentData,
    ShippingAddressCollectionParams? shippingAddressCollection,
    BuiltList<ShippingOptionParams>? shippingOptions,
    String? submitType,
    SubscriptionDataParams? subscriptionData,
    String? successUrl,
    TaxIdCollectionParams? taxIdCollection,
    String? uiMode,
    WalletOptionsParam? walletOptions,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/checkout/sessions';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (adaptivePricing != null) r'adaptive_pricing': encodeQueryParameter(_serializers, adaptivePricing, const FullType(AdaptivePricingParams)),
        if (afterExpiration != null) r'after_expiration': encodeQueryParameter(_serializers, afterExpiration, const FullType(AfterExpirationParams)),
        if (allowPromotionCodes != null) r'allow_promotion_codes': encodeQueryParameter(_serializers, allowPromotionCodes, const FullType(bool)),
        if (automaticTax != null) r'automatic_tax': encodeQueryParameter(_serializers, automaticTax, const FullType(AutomaticTaxParams)),
        if (billingAddressCollection != null) r'billing_address_collection': encodeQueryParameter(_serializers, billingAddressCollection, const FullType(String)),
        if (cancelUrl != null) r'cancel_url': encodeQueryParameter(_serializers, cancelUrl, const FullType(String)),
        if (clientReferenceId != null) r'client_reference_id': encodeQueryParameter(_serializers, clientReferenceId, const FullType(String)),
        if (consentCollection != null) r'consent_collection': encodeQueryParameter(_serializers, consentCollection, const FullType(ConsentCollectionParams)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (customFields != null) r'custom_fields': encodeCollectionQueryParameter<CustomFieldParam>(_serializers, customFields, const FullType(BuiltList, [FullType(CustomFieldParam)]), format: ListFormat.csv,),
        if (customText != null) r'custom_text': encodeQueryParameter(_serializers, customText, const FullType(CustomTextParam)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (customerCreation != null) r'customer_creation': encodeQueryParameter(_serializers, customerCreation, const FullType(String)),
        if (customerEmail != null) r'customer_email': encodeQueryParameter(_serializers, customerEmail, const FullType(String)),
        if (customerUpdate != null) r'customer_update': encodeQueryParameter(_serializers, customerUpdate, const FullType(CustomerUpdateParams)),
        if (discounts != null) r'discounts': encodeCollectionQueryParameter<DiscountParams>(_serializers, discounts, const FullType(BuiltList, [FullType(DiscountParams)]), format: ListFormat.csv,),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (expiresAt != null) r'expires_at': encodeQueryParameter(_serializers, expiresAt, const FullType(int)),
        if (invoiceCreation != null) r'invoice_creation': encodeQueryParameter(_serializers, invoiceCreation, const FullType(InvoiceCreationParams)),
        if (lineItems != null) r'line_items': encodeCollectionQueryParameter<LineItemParams>(_serializers, lineItems, const FullType(BuiltList, [FullType(LineItemParams)]), format: ListFormat.csv,),
        if (locale != null) r'locale': encodeQueryParameter(_serializers, locale, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (mode != null) r'mode': encodeQueryParameter(_serializers, mode, const FullType(String)),
        if (optionalItems != null) r'optional_items': encodeCollectionQueryParameter<OptionalItemParams>(_serializers, optionalItems, const FullType(BuiltList, [FullType(OptionalItemParams)]), format: ListFormat.csv,),
        if (originContext != null) r'origin_context': encodeQueryParameter(_serializers, originContext, const FullType(String)),
        if (paymentIntentData != null) r'payment_intent_data': encodeQueryParameter(_serializers, paymentIntentData, const FullType(PaymentIntentDataParams)),
        if (paymentMethodCollection != null) r'payment_method_collection': encodeQueryParameter(_serializers, paymentMethodCollection, const FullType(String)),
        if (paymentMethodConfiguration != null) r'payment_method_configuration': encodeQueryParameter(_serializers, paymentMethodConfiguration, const FullType(String)),
        if (paymentMethodData != null) r'payment_method_data': encodeQueryParameter(_serializers, paymentMethodData, const FullType(PaymentMethodDataParam)),
        if (paymentMethodOptions != null) r'payment_method_options': encodeQueryParameter(_serializers, paymentMethodOptions, const FullType(PaymentMethodOptionsParam)),
        if (paymentMethodTypes != null) r'payment_method_types': encodeCollectionQueryParameter<String>(_serializers, paymentMethodTypes, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (permissions != null) r'permissions': encodeQueryParameter(_serializers, permissions, const FullType(PermissionsParam)),
        if (phoneNumberCollection != null) r'phone_number_collection': encodeQueryParameter(_serializers, phoneNumberCollection, const FullType(PhoneNumberCollectionParams)),
        if (redirectOnCompletion != null) r'redirect_on_completion': encodeQueryParameter(_serializers, redirectOnCompletion, const FullType(String)),
        if (returnUrl != null) r'return_url': encodeQueryParameter(_serializers, returnUrl, const FullType(String)),
        if (savedPaymentMethodOptions != null) r'saved_payment_method_options': encodeQueryParameter(_serializers, savedPaymentMethodOptions, const FullType(SavedPaymentMethodOptionsParam)),
        if (setupIntentData != null) r'setup_intent_data': encodeQueryParameter(_serializers, setupIntentData, const FullType(SetupIntentDataParam)),
        if (shippingAddressCollection != null) r'shipping_address_collection': encodeQueryParameter(_serializers, shippingAddressCollection, const FullType(ShippingAddressCollectionParams)),
        if (shippingOptions != null) r'shipping_options': encodeCollectionQueryParameter<ShippingOptionParams>(_serializers, shippingOptions, const FullType(BuiltList, [FullType(ShippingOptionParams)]), format: ListFormat.csv,),
        if (submitType != null) r'submit_type': encodeQueryParameter(_serializers, submitType, const FullType(String)),
        if (subscriptionData != null) r'subscription_data': encodeQueryParameter(_serializers, subscriptionData, const FullType(SubscriptionDataParams)),
        if (successUrl != null) r'success_url': encodeQueryParameter(_serializers, successUrl, const FullType(String)),
        if (taxIdCollection != null) r'tax_id_collection': encodeQueryParameter(_serializers, taxIdCollection, const FullType(TaxIdCollectionParams)),
        if (uiMode != null) r'ui_mode': encodeQueryParameter(_serializers, uiMode, const FullType(String)),
        if (walletOptions != null) r'wallet_options': encodeQueryParameter(_serializers, walletOptions, const FullType(WalletOptionsParam)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CheckoutSession? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CheckoutSession),
      ) as CheckoutSession;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CheckoutSession>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a Checkout Session
  /// &lt;p&gt;Updates a Checkout Session object.&lt;/p&gt;  &lt;p&gt;Related guide: &lt;a href&#x3D;\&quot;/payments/checkout/dynamic-updates\&quot;&gt;Dynamically update Checkout&lt;/a&gt;&lt;/p&gt;
  ///
  /// Parameters:
  /// * [session] 
  /// * [collectedInformation] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [shippingOptions] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CheckoutSession] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CheckoutSession>> postCheckoutSessionsSession({ 
    required String session,
    CollectedInformationParams? collectedInformation,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    PostCheckoutSessionsSessionRequestShippingOptions? shippingOptions,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/checkout/sessions/{session}'.replaceAll('{' r'session' '}', encodeQueryParameter(_serializers, session, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (collectedInformation != null) r'collected_information': encodeQueryParameter(_serializers, collectedInformation, const FullType(CollectedInformationParams)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (shippingOptions != null) r'shipping_options': encodeQueryParameter(_serializers, shippingOptions, const FullType(PostCheckoutSessionsSessionRequestShippingOptions)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CheckoutSession? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CheckoutSession),
      ) as CheckoutSession;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CheckoutSession>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Expire a Checkout Session
  /// &lt;p&gt;A Checkout Session can be expired when it is in one of these statuses: &lt;code&gt;open&lt;/code&gt; &lt;/p&gt;  &lt;p&gt;After it expires, a customer can’t complete a Checkout Session and customers loading the Checkout Session see a message saying the Checkout Session is expired.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [session] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CheckoutSession] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CheckoutSession>> postCheckoutSessionsSessionExpire({ 
    required String session,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/checkout/sessions/{session}/expire'.replaceAll('{' r'session' '}', encodeQueryParameter(_serializers, session, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CheckoutSession? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CheckoutSession),
      ) as CheckoutSession;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CheckoutSession>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create an order
  /// &lt;p&gt;Creates a Climate order object for a given Climate product. The order will be processed immediately after creation and payment will be deducted your Stripe balance.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [product] - Unique identifier of the Climate product.
  /// * [amount] - Requested amount of carbon removal units. Either this or `metric_tons` must be specified.
  /// * [beneficiary] 
  /// * [currency] - Request currency for the order as a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a supported [settlement currency for your account](https://stripe.com/docs/currencies). If omitted, the account's default currency will be used.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [metricTons] - Requested number of tons for the order. Either this or `amount` must be specified.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ClimateOrder] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ClimateOrder>> postClimateOrders({ 
    required String product,
    int? amount,
    BeneficiaryParams? beneficiary,
    String? currency,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    double? metricTons,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/climate/orders';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (beneficiary != null) r'beneficiary': encodeQueryParameter(_serializers, beneficiary, const FullType(BeneficiaryParams)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (metricTons != null) r'metric_tons': encodeQueryParameter(_serializers, metricTons, const FullType(double)),
        r'product': encodeQueryParameter(_serializers, product, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ClimateOrder? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ClimateOrder),
      ) as ClimateOrder;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ClimateOrder>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update an order
  /// &lt;p&gt;Updates the specified order by setting the values of the parameters passed.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [order] - Unique identifier of the order.
  /// * [beneficiary] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ClimateOrder] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ClimateOrder>> postClimateOrdersOrder({ 
    required String order,
    PostClimateOrdersOrderRequestBeneficiary? beneficiary,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/climate/orders/{order}'.replaceAll('{' r'order' '}', encodeQueryParameter(_serializers, order, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (beneficiary != null) r'beneficiary': encodeQueryParameter(_serializers, beneficiary, const FullType(PostClimateOrdersOrderRequestBeneficiary)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ClimateOrder? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ClimateOrder),
      ) as ClimateOrder;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ClimateOrder>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Cancel an order
  /// &lt;p&gt;Cancels a Climate order. You can cancel an order within 24 hours of creation. Stripe refunds the reservation &lt;code&gt;amount_subtotal&lt;/code&gt;, but not the &lt;code&gt;amount_fees&lt;/code&gt; for user-triggered cancellations. Frontier might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe provides 90 days advance notice and refunds the &lt;code&gt;amount_total&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [order] - Unique identifier of the order.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ClimateOrder] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ClimateOrder>> postClimateOrdersOrderCancel({ 
    required String order,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/climate/orders/{order}/cancel'.replaceAll('{' r'order' '}', encodeQueryParameter(_serializers, order, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ClimateOrder? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ClimateOrder),
      ) as ClimateOrder;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ClimateOrder>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a coupon
  /// &lt;p&gt;You can create coupons easily via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/coupons\&quot;&gt;coupon management&lt;/a&gt; page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.&lt;/p&gt;  &lt;p&gt;A coupon has either a &lt;code&gt;percent_off&lt;/code&gt; or an &lt;code&gt;amount_off&lt;/code&gt; and &lt;code&gt;currency&lt;/code&gt;. If you set an &lt;code&gt;amount_off&lt;/code&gt;, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of &lt;currency&gt;100&lt;/currency&gt; will have a final total of &lt;currency&gt;0&lt;/currency&gt; if a coupon with an &lt;code&gt;amount_off&lt;/code&gt; of &lt;amount&gt;200&lt;/amount&gt; is applied to it and an invoice with a subtotal of &lt;currency&gt;300&lt;/currency&gt; will have a final total of &lt;currency&gt;100&lt;/currency&gt; if a coupon with an &lt;code&gt;amount_off&lt;/code&gt; of &lt;amount&gt;200&lt;/amount&gt; is applied to it.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [amountOff] - A positive integer representing the amount to subtract from an invoice total (required if `percent_off` is not passed).
  /// * [appliesTo] 
  /// * [currency] - Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the `amount_off` parameter (required if `amount_off` is passed).
  /// * [currencyOptions] - Coupons defined in each available currency option (only supported if `amount_off` is passed). Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
  /// * [duration] - Specifies how long the discount will be in effect if used on a subscription. Defaults to `once`.
  /// * [durationInMonths] - Required only if `duration` is `repeating`, in which case it must be a positive integer that specifies the number of months the discount will be in effect.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [id] - Unique string of your choice that will be used to identify this coupon when applying it to a customer. If you don't want to specify a particular code, you can leave the ID blank and we'll generate a random code for you.
  /// * [maxRedemptions] - A positive integer specifying the number of times the coupon can be redeemed before it's no longer valid. For example, you might have a 50% off coupon that the first 20 readers of your blog can use.
  /// * [metadata] 
  /// * [name] - Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set.
  /// * [percentOff] - A positive float larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if `amount_off` is not passed).
  /// * [redeemBy] - Unix timestamp specifying the last time at which the coupon can be redeemed. After the redeem_by date, the coupon can no longer be applied to new customers.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Coupon] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Coupon>> postCoupons({ 
    int? amountOff,
    AppliesToParams? appliesTo,
    String? currency,
    BuiltMap<String, CurrencyOption2>? currencyOptions,
    String? duration,
    int? durationInMonths,
    BuiltList<String>? expand,
    String? id,
    int? maxRedemptions,
    PostAccountsRequestMetadata? metadata,
    String? name,
    num? percentOff,
    int? redeemBy,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/coupons';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amountOff != null) r'amount_off': encodeQueryParameter(_serializers, amountOff, const FullType(int)),
        if (appliesTo != null) r'applies_to': encodeQueryParameter(_serializers, appliesTo, const FullType(AppliesToParams)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (currencyOptions != null) r'currency_options': encodeQueryParameter(_serializers, currencyOptions, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (duration != null) r'duration': encodeQueryParameter(_serializers, duration, const FullType(String)),
        if (durationInMonths != null) r'duration_in_months': encodeQueryParameter(_serializers, durationInMonths, const FullType(int)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (id != null) r'id': encodeQueryParameter(_serializers, id, const FullType(String)),
        if (maxRedemptions != null) r'max_redemptions': encodeQueryParameter(_serializers, maxRedemptions, const FullType(int)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        if (percentOff != null) r'percent_off': encodeQueryParameter(_serializers, percentOff, const FullType(num)),
        if (redeemBy != null) r'redeem_by': encodeQueryParameter(_serializers, redeemBy, const FullType(int)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Coupon? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Coupon),
      ) as Coupon;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Coupon>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a coupon
  /// &lt;p&gt;Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [coupon] 
  /// * [currencyOptions] - Coupons defined in each available currency option (only supported if the coupon is amount-based). Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [name] - Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Coupon] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Coupon>> postCouponsCoupon({ 
    required String coupon,
    BuiltMap<String, CurrencyOption2>? currencyOptions,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    String? name,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/coupons/{coupon}'.replaceAll('{' r'coupon' '}', encodeQueryParameter(_serializers, coupon, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (currencyOptions != null) r'currency_options': encodeQueryParameter(_serializers, currencyOptions, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Coupon? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Coupon),
      ) as Coupon;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Coupon>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a credit note
  /// &lt;p&gt;Issue a credit note to adjust the amount of a finalized invoice. A credit note will first reduce the invoice’s &lt;code&gt;amount_remaining&lt;/code&gt; (and &lt;code&gt;amount_due&lt;/code&gt;), but not below zero. This amount is indicated by the credit note’s &lt;code&gt;pre_payment_amount&lt;/code&gt;. The excess amount is indicated by &lt;code&gt;post_payment_amount&lt;/code&gt;, and it can result in any combination of the following:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;Refunds: create a new refund (using &lt;code&gt;refund_amount&lt;/code&gt;) or link existing refunds (using &lt;code&gt;refunds&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Customer balance credit: credit the customer’s balance (using &lt;code&gt;credit_amount&lt;/code&gt;) which will be automatically applied to their next invoice when it’s finalized.&lt;/li&gt; &lt;li&gt;Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using &lt;code&gt;out_of_band_amount&lt;/code&gt;).&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;The sum of refunds, customer balance credits, and outside of Stripe credits must equal the &lt;code&gt;post_payment_amount&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;You may issue multiple credit notes for an invoice. Each credit note may increment the invoice’s &lt;code&gt;pre_payment_credit_notes_amount&lt;/code&gt;, &lt;code&gt;post_payment_credit_notes_amount&lt;/code&gt;, or both, depending on the invoice’s &lt;code&gt;amount_remaining&lt;/code&gt; at the time of credit note creation.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoice] - ID of the invoice.
  /// * [amount] - The integer amount in cents (or local equivalent) representing the total amount of the credit note. One of `amount`, `lines`, or `shipping_cost` must be provided.
  /// * [creditAmount] - The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice.
  /// * [effectiveAt] - The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF.
  /// * [emailType] - Type of email to send to the customer, one of `credit_note` or `none` and the default is `credit_note`.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [lines] - Line items that make up the credit note. One of `amount`, `lines`, or `shipping_cost` must be provided.
  /// * [memo] - The credit note's memo appears on the credit note PDF.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [outOfBandAmount] - The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe.
  /// * [reason] - Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
  /// * [refundAmount] - The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice.
  /// * [refunds] - Refunds to link to this credit note.
  /// * [shippingCost] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CreditNote] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CreditNote>> postCreditNotes({ 
    required String invoice,
    int? amount,
    int? creditAmount,
    int? effectiveAt,
    String? emailType,
    BuiltList<String>? expand,
    BuiltList<CreditNoteLineItemParams>? lines,
    String? memo,
    BuiltMap<String, String>? metadata,
    int? outOfBandAmount,
    String? reason,
    int? refundAmount,
    BuiltList<CreditNoteRefundParams>? refunds,
    CreditNoteShippingCost? shippingCost,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/credit_notes';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (creditAmount != null) r'credit_amount': encodeQueryParameter(_serializers, creditAmount, const FullType(int)),
        if (effectiveAt != null) r'effective_at': encodeQueryParameter(_serializers, effectiveAt, const FullType(int)),
        if (emailType != null) r'email_type': encodeQueryParameter(_serializers, emailType, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'invoice': encodeQueryParameter(_serializers, invoice, const FullType(String)),
        if (lines != null) r'lines': encodeCollectionQueryParameter<CreditNoteLineItemParams>(_serializers, lines, const FullType(BuiltList, [FullType(CreditNoteLineItemParams)]), format: ListFormat.csv,),
        if (memo != null) r'memo': encodeQueryParameter(_serializers, memo, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (outOfBandAmount != null) r'out_of_band_amount': encodeQueryParameter(_serializers, outOfBandAmount, const FullType(int)),
        if (reason != null) r'reason': encodeQueryParameter(_serializers, reason, const FullType(String)),
        if (refundAmount != null) r'refund_amount': encodeQueryParameter(_serializers, refundAmount, const FullType(int)),
        if (refunds != null) r'refunds': encodeCollectionQueryParameter<CreditNoteRefundParams>(_serializers, refunds, const FullType(BuiltList, [FullType(CreditNoteRefundParams)]), format: ListFormat.csv,),
        if (shippingCost != null) r'shipping_cost': encodeQueryParameter(_serializers, shippingCost, const FullType(CreditNoteShippingCost)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CreditNote? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CreditNote),
      ) as CreditNote;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CreditNote>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a credit note
  /// &lt;p&gt;Updates an existing credit note.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [memo] - Credit note memo.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CreditNote] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CreditNote>> postCreditNotesId({ 
    required String id,
    BuiltList<String>? expand,
    String? memo,
    BuiltMap<String, String>? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/credit_notes/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (memo != null) r'memo': encodeQueryParameter(_serializers, memo, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CreditNote? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CreditNote),
      ) as CreditNote;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CreditNote>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Void a credit note
  /// &lt;p&gt;Marks a credit note as void. Learn more about &lt;a href&#x3D;\&quot;/docs/billing/invoices/credit-notes#voiding\&quot;&gt;voiding credit notes&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CreditNote] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CreditNote>> postCreditNotesIdVoid({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/credit_notes/{id}/void'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CreditNote? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CreditNote),
      ) as CreditNote;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CreditNote>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a Customer Session
  /// &lt;p&gt;Creates a Customer Session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [components] 
  /// * [customer] - The ID of an existing customer for which to create the Customer Session.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CustomerSession] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CustomerSession>> postCustomerSessions({ 
    required Components components,
    required String customer,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customer_sessions';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'components': encodeQueryParameter(_serializers, components, const FullType(Components)),
        r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CustomerSession? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CustomerSession),
      ) as CustomerSession;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CustomerSession>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a customer
  /// &lt;p&gt;Creates a new customer object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [address] 
  /// * [balance] - An integer amount in cents (or local equivalent) that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice.
  /// * [cashBalance] 
  /// * [description] - An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.
  /// * [email] - Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [invoicePrefix] - The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers.
  /// * [invoiceSettings] 
  /// * [metadata] 
  /// * [name] - The customer's full name or business name.
  /// * [nextInvoiceSequence] - The sequence to be used on the customer's next invoice. Defaults to 1.
  /// * [paymentMethod] 
  /// * [phone] - The customer's phone number.
  /// * [preferredLocales] - Customer's preferred languages, ordered by preference.
  /// * [shipping] 
  /// * [source_] 
  /// * [tax] 
  /// * [taxExempt] - The customer's tax exemption. One of `none`, `exempt`, or `reverse`.
  /// * [taxIdData] - The customer's tax IDs.
  /// * [testClock] - ID of the test clock to attach to the customer.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Customer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Customer>> postCustomers({ 
    PostCustomersRequestAddress? address,
    int? balance,
    CashBalanceParam? cashBalance,
    String? description,
    String? email,
    BuiltList<String>? expand,
    String? invoicePrefix,
    CustomerParam? invoiceSettings,
    PostAccountsRequestMetadata? metadata,
    String? name,
    int? nextInvoiceSequence,
    String? paymentMethod,
    String? phone,
    BuiltList<String>? preferredLocales,
    PostCustomersRequestShipping? shipping,
    String? source_,
    SharedTaxCreateParam? tax,
    String? taxExempt,
    BuiltList<DataParams>? taxIdData,
    String? testClock,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (address != null) r'address': encodeQueryParameter(_serializers, address, const FullType(PostCustomersRequestAddress)),
        if (balance != null) r'balance': encodeQueryParameter(_serializers, balance, const FullType(int)),
        if (cashBalance != null) r'cash_balance': encodeQueryParameter(_serializers, cashBalance, const FullType(CashBalanceParam)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (email != null) r'email': encodeQueryParameter(_serializers, email, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (invoicePrefix != null) r'invoice_prefix': encodeQueryParameter(_serializers, invoicePrefix, const FullType(String)),
        if (invoiceSettings != null) r'invoice_settings': encodeQueryParameter(_serializers, invoiceSettings, const FullType(CustomerParam)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        if (nextInvoiceSequence != null) r'next_invoice_sequence': encodeQueryParameter(_serializers, nextInvoiceSequence, const FullType(int)),
        if (paymentMethod != null) r'payment_method': encodeQueryParameter(_serializers, paymentMethod, const FullType(String)),
        if (phone != null) r'phone': encodeQueryParameter(_serializers, phone, const FullType(String)),
        if (preferredLocales != null) r'preferred_locales': encodeCollectionQueryParameter<String>(_serializers, preferredLocales, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (shipping != null) r'shipping': encodeQueryParameter(_serializers, shipping, const FullType(PostCustomersRequestShipping)),
        if (source_ != null) r'source': encodeQueryParameter(_serializers, source_, const FullType(String)),
        if (tax != null) r'tax': encodeQueryParameter(_serializers, tax, const FullType(SharedTaxCreateParam)),
        if (taxExempt != null) r'tax_exempt': encodeQueryParameter(_serializers, taxExempt, const FullType(String)),
        if (taxIdData != null) r'tax_id_data': encodeCollectionQueryParameter<DataParams>(_serializers, taxIdData, const FullType(BuiltList, [FullType(DataParams)]), format: ListFormat.csv,),
        if (testClock != null) r'test_clock': encodeQueryParameter(_serializers, testClock, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Customer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Customer),
      ) as Customer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Customer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a customer
  /// &lt;p&gt;Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the &lt;strong&gt;source&lt;/strong&gt; parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the &lt;strong&gt;source&lt;/strong&gt; parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the &lt;code&gt;past_due&lt;/code&gt; state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the &lt;strong&gt;default_source&lt;/strong&gt; for a customer will not trigger this behavior.&lt;/p&gt;  &lt;p&gt;This request accepts mostly the same arguments as the customer creation call.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [address] 
  /// * [balance] - An integer amount in cents (or local equivalent) that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice.
  /// * [bankAccount] 
  /// * [card] 
  /// * [cashBalance] 
  /// * [defaultAlipayAccount] - ID of Alipay account to make the customer's new default for invoice payments.
  /// * [defaultBankAccount] - ID of bank account to make the customer's new default for invoice payments.
  /// * [defaultCard] - ID of card to make the customer's new default for invoice payments.
  /// * [defaultSource] - If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) parameter.  Provide the ID of a payment source already attached to this customer to make it this customer's default payment source.  If you want to add a new payment source and make it the default, see the [source](https://stripe.com/docs/api/customers/update#update_customer-source) property.
  /// * [description] - An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard.
  /// * [email] - Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [invoicePrefix] - The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers.
  /// * [invoiceSettings] 
  /// * [metadata] 
  /// * [name] - The customer's full name or business name.
  /// * [nextInvoiceSequence] - The sequence to be used on the customer's next invoice. Defaults to 1.
  /// * [phone] - The customer's phone number.
  /// * [preferredLocales] - Customer's preferred languages, ordered by preference.
  /// * [shipping] 
  /// * [source_] 
  /// * [tax] 
  /// * [taxExempt] - The customer's tax exemption. One of `none`, `exempt`, or `reverse`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Customer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Customer>> postCustomersCustomer({ 
    required String customer,
    PostCustomersRequestAddress? address,
    int? balance,
    PostCustomersCustomerRequestBankAccount? bankAccount,
    PostChargesRequestCard? card,
    CashBalanceParam? cashBalance,
    String? defaultAlipayAccount,
    String? defaultBankAccount,
    String? defaultCard,
    String? defaultSource,
    String? description,
    String? email,
    BuiltList<String>? expand,
    String? invoicePrefix,
    CustomerParam? invoiceSettings,
    PostAccountsRequestMetadata? metadata,
    String? name,
    int? nextInvoiceSequence,
    String? phone,
    BuiltList<String>? preferredLocales,
    PostCustomersRequestShipping? shipping,
    String? source_,
    SharedTaxUpdateParam? tax,
    String? taxExempt,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (address != null) r'address': encodeQueryParameter(_serializers, address, const FullType(PostCustomersRequestAddress)),
        if (balance != null) r'balance': encodeQueryParameter(_serializers, balance, const FullType(int)),
        if (bankAccount != null) r'bank_account': encodeQueryParameter(_serializers, bankAccount, const FullType(PostCustomersCustomerRequestBankAccount)),
        if (card != null) r'card': encodeQueryParameter(_serializers, card, const FullType(PostChargesRequestCard)),
        if (cashBalance != null) r'cash_balance': encodeQueryParameter(_serializers, cashBalance, const FullType(CashBalanceParam)),
        if (defaultAlipayAccount != null) r'default_alipay_account': encodeQueryParameter(_serializers, defaultAlipayAccount, const FullType(String)),
        if (defaultBankAccount != null) r'default_bank_account': encodeQueryParameter(_serializers, defaultBankAccount, const FullType(String)),
        if (defaultCard != null) r'default_card': encodeQueryParameter(_serializers, defaultCard, const FullType(String)),
        if (defaultSource != null) r'default_source': encodeQueryParameter(_serializers, defaultSource, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (email != null) r'email': encodeQueryParameter(_serializers, email, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (invoicePrefix != null) r'invoice_prefix': encodeQueryParameter(_serializers, invoicePrefix, const FullType(String)),
        if (invoiceSettings != null) r'invoice_settings': encodeQueryParameter(_serializers, invoiceSettings, const FullType(CustomerParam)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        if (nextInvoiceSequence != null) r'next_invoice_sequence': encodeQueryParameter(_serializers, nextInvoiceSequence, const FullType(int)),
        if (phone != null) r'phone': encodeQueryParameter(_serializers, phone, const FullType(String)),
        if (preferredLocales != null) r'preferred_locales': encodeCollectionQueryParameter<String>(_serializers, preferredLocales, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (shipping != null) r'shipping': encodeQueryParameter(_serializers, shipping, const FullType(PostCustomersRequestShipping)),
        if (source_ != null) r'source': encodeQueryParameter(_serializers, source_, const FullType(String)),
        if (tax != null) r'tax': encodeQueryParameter(_serializers, tax, const FullType(SharedTaxUpdateParam)),
        if (taxExempt != null) r'tax_exempt': encodeQueryParameter(_serializers, taxExempt, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Customer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Customer),
      ) as Customer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Customer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a customer balance transaction
  /// &lt;p&gt;Creates an immutable transaction that updates the customer’s credit &lt;a href&#x3D;\&quot;/docs/billing/customer/balance\&quot;&gt;balance&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [amount] - The integer amount in **cents (or local equivalent)** to apply to the customer's credit balance.
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). Specifies the [`invoice_credit_balance`](https://stripe.com/docs/api/customers/object#customer_object-invoice_credit_balance) that this transaction will apply to. If the customer's `currency` is not set, it will be updated to this value.
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CustomerBalanceTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CustomerBalanceTransaction>> postCustomersCustomerBalanceTransactions({ 
    required String customer,
    required int amount,
    required String currency,
    String? description,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/balance_transactions'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CustomerBalanceTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CustomerBalanceTransaction),
      ) as CustomerBalanceTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CustomerBalanceTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a customer credit balance transaction
  /// &lt;p&gt;Most credit balance transaction fields are immutable, but you may update its &lt;code&gt;description&lt;/code&gt; and &lt;code&gt;metadata&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [transaction] 
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CustomerBalanceTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CustomerBalanceTransaction>> postCustomersCustomerBalanceTransactionsTransaction({ 
    required String customer,
    required String transaction,
    String? description,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/balance_transactions/{transaction}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'transaction' '}', encodeQueryParameter(_serializers, transaction, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CustomerBalanceTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CustomerBalanceTransaction),
      ) as CustomerBalanceTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CustomerBalanceTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a card
  /// &lt;p&gt;When you create a new credit card, you must specify a customer or recipient on which to create it.&lt;/p&gt;  &lt;p&gt;If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should &lt;a href&#x3D;\&quot;/docs/api#update_customer\&quot;&gt;update the customer&lt;/a&gt; to have a new &lt;code&gt;default_source&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [alipayAccount] - A token returned by [Stripe.js](https://stripe.com/docs/js) representing the user’s Alipay account details.
  /// * [bankAccount] 
  /// * [card] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [source_] - Please refer to full [documentation](https://stripe.com/docs/api) instead.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentSource] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentSource>> postCustomersCustomerBankAccounts({ 
    required String customer,
    String? alipayAccount,
    PostCustomersCustomerRequestBankAccount? bankAccount,
    PostChargesRequestCard? card,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    String? source_,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/bank_accounts'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (alipayAccount != null) r'alipay_account': encodeQueryParameter(_serializers, alipayAccount, const FullType(String)),
        if (bankAccount != null) r'bank_account': encodeQueryParameter(_serializers, bankAccount, const FullType(PostCustomersCustomerRequestBankAccount)),
        if (card != null) r'card': encodeQueryParameter(_serializers, card, const FullType(PostChargesRequestCard)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (source_ != null) r'source': encodeQueryParameter(_serializers, source_, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentSource? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentSource),
      ) as PaymentSource;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentSource>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// postCustomersCustomerBankAccountsId
  /// &lt;p&gt;Update a specified source for a given customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [id] 
  /// * [accountHolderName] - The name of the person or business that owns the bank account.
  /// * [accountHolderType] - The type of entity that holds the account. This can be either `individual` or `company`.
  /// * [addressCity] - City/District/Suburb/Town/Village.
  /// * [addressCountry] - Billing address country, if provided when creating card.
  /// * [addressLine1] - Address line 1 (Street address/PO Box/Company name).
  /// * [addressLine2] - Address line 2 (Apartment/Suite/Unit/Building).
  /// * [addressState] - State/County/Province/Region.
  /// * [addressZip] - ZIP or postal code.
  /// * [expMonth] - Two digit number representing the card’s expiration month.
  /// * [expYear] - Four digit number representing the card’s expiration year.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [name] - Cardholder name.
  /// * [owner] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PostCustomersCustomerBankAccountsId200Response] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PostCustomersCustomerBankAccountsId200Response>> postCustomersCustomerBankAccountsId({ 
    required String customer,
    required String id,
    String? accountHolderName,
    String? accountHolderType,
    String? addressCity,
    String? addressCountry,
    String? addressLine1,
    String? addressLine2,
    String? addressState,
    String? addressZip,
    String? expMonth,
    String? expYear,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    String? name,
    Owner? owner,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/bank_accounts/{id}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (accountHolderName != null) r'account_holder_name': encodeQueryParameter(_serializers, accountHolderName, const FullType(String)),
        if (accountHolderType != null) r'account_holder_type': encodeQueryParameter(_serializers, accountHolderType, const FullType(String)),
        if (addressCity != null) r'address_city': encodeQueryParameter(_serializers, addressCity, const FullType(String)),
        if (addressCountry != null) r'address_country': encodeQueryParameter(_serializers, addressCountry, const FullType(String)),
        if (addressLine1 != null) r'address_line1': encodeQueryParameter(_serializers, addressLine1, const FullType(String)),
        if (addressLine2 != null) r'address_line2': encodeQueryParameter(_serializers, addressLine2, const FullType(String)),
        if (addressState != null) r'address_state': encodeQueryParameter(_serializers, addressState, const FullType(String)),
        if (addressZip != null) r'address_zip': encodeQueryParameter(_serializers, addressZip, const FullType(String)),
        if (expMonth != null) r'exp_month': encodeQueryParameter(_serializers, expMonth, const FullType(String)),
        if (expYear != null) r'exp_year': encodeQueryParameter(_serializers, expYear, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        if (owner != null) r'owner': encodeQueryParameter(_serializers, owner, const FullType(Owner)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PostCustomersCustomerBankAccountsId200Response? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PostCustomersCustomerBankAccountsId200Response),
      ) as PostCustomersCustomerBankAccountsId200Response;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PostCustomersCustomerBankAccountsId200Response>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Verify a bank account
  /// &lt;p&gt;Verify a specified bank account for a given customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [id] 
  /// * [amounts] - Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BankAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BankAccount>> postCustomersCustomerBankAccountsIdVerify({ 
    required String customer,
    required String id,
    BuiltList<int>? amounts,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/bank_accounts/{id}/verify'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amounts != null) r'amounts': encodeCollectionQueryParameter<int>(_serializers, amounts, const FullType(BuiltList, [FullType(int)]), format: ListFormat.csv,),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BankAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BankAccount),
      ) as BankAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BankAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a card
  /// &lt;p&gt;When you create a new credit card, you must specify a customer or recipient on which to create it.&lt;/p&gt;  &lt;p&gt;If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should &lt;a href&#x3D;\&quot;/docs/api#update_customer\&quot;&gt;update the customer&lt;/a&gt; to have a new &lt;code&gt;default_source&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [alipayAccount] - A token returned by [Stripe.js](https://stripe.com/docs/js) representing the user’s Alipay account details.
  /// * [bankAccount] 
  /// * [card] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [source_] - Please refer to full [documentation](https://stripe.com/docs/api) instead.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentSource] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentSource>> postCustomersCustomerCards({ 
    required String customer,
    String? alipayAccount,
    PostCustomersCustomerRequestBankAccount? bankAccount,
    PostChargesRequestCard? card,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    String? source_,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/cards'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (alipayAccount != null) r'alipay_account': encodeQueryParameter(_serializers, alipayAccount, const FullType(String)),
        if (bankAccount != null) r'bank_account': encodeQueryParameter(_serializers, bankAccount, const FullType(PostCustomersCustomerRequestBankAccount)),
        if (card != null) r'card': encodeQueryParameter(_serializers, card, const FullType(PostChargesRequestCard)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (source_ != null) r'source': encodeQueryParameter(_serializers, source_, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentSource? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentSource),
      ) as PaymentSource;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentSource>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// postCustomersCustomerCardsId
  /// &lt;p&gt;Update a specified source for a given customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [id] 
  /// * [accountHolderName] - The name of the person or business that owns the bank account.
  /// * [accountHolderType] - The type of entity that holds the account. This can be either `individual` or `company`.
  /// * [addressCity] - City/District/Suburb/Town/Village.
  /// * [addressCountry] - Billing address country, if provided when creating card.
  /// * [addressLine1] - Address line 1 (Street address/PO Box/Company name).
  /// * [addressLine2] - Address line 2 (Apartment/Suite/Unit/Building).
  /// * [addressState] - State/County/Province/Region.
  /// * [addressZip] - ZIP or postal code.
  /// * [expMonth] - Two digit number representing the card’s expiration month.
  /// * [expYear] - Four digit number representing the card’s expiration year.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [name] - Cardholder name.
  /// * [owner] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PostCustomersCustomerBankAccountsId200Response] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PostCustomersCustomerBankAccountsId200Response>> postCustomersCustomerCardsId({ 
    required String customer,
    required String id,
    String? accountHolderName,
    String? accountHolderType,
    String? addressCity,
    String? addressCountry,
    String? addressLine1,
    String? addressLine2,
    String? addressState,
    String? addressZip,
    String? expMonth,
    String? expYear,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    String? name,
    Owner? owner,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/cards/{id}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (accountHolderName != null) r'account_holder_name': encodeQueryParameter(_serializers, accountHolderName, const FullType(String)),
        if (accountHolderType != null) r'account_holder_type': encodeQueryParameter(_serializers, accountHolderType, const FullType(String)),
        if (addressCity != null) r'address_city': encodeQueryParameter(_serializers, addressCity, const FullType(String)),
        if (addressCountry != null) r'address_country': encodeQueryParameter(_serializers, addressCountry, const FullType(String)),
        if (addressLine1 != null) r'address_line1': encodeQueryParameter(_serializers, addressLine1, const FullType(String)),
        if (addressLine2 != null) r'address_line2': encodeQueryParameter(_serializers, addressLine2, const FullType(String)),
        if (addressState != null) r'address_state': encodeQueryParameter(_serializers, addressState, const FullType(String)),
        if (addressZip != null) r'address_zip': encodeQueryParameter(_serializers, addressZip, const FullType(String)),
        if (expMonth != null) r'exp_month': encodeQueryParameter(_serializers, expMonth, const FullType(String)),
        if (expYear != null) r'exp_year': encodeQueryParameter(_serializers, expYear, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        if (owner != null) r'owner': encodeQueryParameter(_serializers, owner, const FullType(Owner)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PostCustomersCustomerBankAccountsId200Response? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PostCustomersCustomerBankAccountsId200Response),
      ) as PostCustomersCustomerBankAccountsId200Response;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PostCustomersCustomerBankAccountsId200Response>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a cash balance&#39;s settings
  /// &lt;p&gt;Changes the settings on a customer’s cash balance.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [settings] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CashBalance] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CashBalance>> postCustomersCustomerCashBalance({ 
    required String customer,
    BuiltList<String>? expand,
    BalanceSettingsParam1? settings,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/cash_balance'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (settings != null) r'settings': encodeQueryParameter(_serializers, settings, const FullType(BalanceSettingsParam1)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CashBalance? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CashBalance),
      ) as CashBalance;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CashBalance>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create or retrieve funding instructions for a customer cash balance
  /// &lt;p&gt;Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new funding instructions will be created. If funding instructions have already been created for a given customer, the same funding instructions will be retrieved. In other words, we will return the same funding instructions each time.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [bankTransfer] 
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [fundingType] - The `funding_type` to get the instructions for.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FundingInstructions] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FundingInstructions>> postCustomersCustomerFundingInstructions({ 
    required String customer,
    required BankTransferParams bankTransfer,
    required String currency,
    required String fundingType,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/funding_instructions'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'bank_transfer': encodeQueryParameter(_serializers, bankTransfer, const FullType(BankTransferParams)),
        r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'funding_type': encodeQueryParameter(_serializers, fundingType, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FundingInstructions? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FundingInstructions),
      ) as FundingInstructions;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FundingInstructions>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a card
  /// &lt;p&gt;When you create a new credit card, you must specify a customer or recipient on which to create it.&lt;/p&gt;  &lt;p&gt;If the card’s owner has no default card, then the new card will become the default. However, if the owner already has a default, then it will not change. To change the default, you should &lt;a href&#x3D;\&quot;/docs/api#update_customer\&quot;&gt;update the customer&lt;/a&gt; to have a new &lt;code&gt;default_source&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [alipayAccount] - A token returned by [Stripe.js](https://stripe.com/docs/js) representing the user’s Alipay account details.
  /// * [bankAccount] 
  /// * [card] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [source_] - Please refer to full [documentation](https://stripe.com/docs/api) instead.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentSource] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentSource>> postCustomersCustomerSources({ 
    required String customer,
    String? alipayAccount,
    PostCustomersCustomerRequestBankAccount? bankAccount,
    PostChargesRequestCard? card,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    String? source_,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/sources'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (alipayAccount != null) r'alipay_account': encodeQueryParameter(_serializers, alipayAccount, const FullType(String)),
        if (bankAccount != null) r'bank_account': encodeQueryParameter(_serializers, bankAccount, const FullType(PostCustomersCustomerRequestBankAccount)),
        if (card != null) r'card': encodeQueryParameter(_serializers, card, const FullType(PostChargesRequestCard)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (source_ != null) r'source': encodeQueryParameter(_serializers, source_, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentSource? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentSource),
      ) as PaymentSource;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentSource>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// postCustomersCustomerSourcesId
  /// &lt;p&gt;Update a specified source for a given customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [id] 
  /// * [accountHolderName] - The name of the person or business that owns the bank account.
  /// * [accountHolderType] - The type of entity that holds the account. This can be either `individual` or `company`.
  /// * [addressCity] - City/District/Suburb/Town/Village.
  /// * [addressCountry] - Billing address country, if provided when creating card.
  /// * [addressLine1] - Address line 1 (Street address/PO Box/Company name).
  /// * [addressLine2] - Address line 2 (Apartment/Suite/Unit/Building).
  /// * [addressState] - State/County/Province/Region.
  /// * [addressZip] - ZIP or postal code.
  /// * [expMonth] - Two digit number representing the card’s expiration month.
  /// * [expYear] - Four digit number representing the card’s expiration year.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [name] - Cardholder name.
  /// * [owner] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PostCustomersCustomerBankAccountsId200Response] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PostCustomersCustomerBankAccountsId200Response>> postCustomersCustomerSourcesId({ 
    required String customer,
    required String id,
    String? accountHolderName,
    String? accountHolderType,
    String? addressCity,
    String? addressCountry,
    String? addressLine1,
    String? addressLine2,
    String? addressState,
    String? addressZip,
    String? expMonth,
    String? expYear,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    String? name,
    Owner? owner,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/sources/{id}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (accountHolderName != null) r'account_holder_name': encodeQueryParameter(_serializers, accountHolderName, const FullType(String)),
        if (accountHolderType != null) r'account_holder_type': encodeQueryParameter(_serializers, accountHolderType, const FullType(String)),
        if (addressCity != null) r'address_city': encodeQueryParameter(_serializers, addressCity, const FullType(String)),
        if (addressCountry != null) r'address_country': encodeQueryParameter(_serializers, addressCountry, const FullType(String)),
        if (addressLine1 != null) r'address_line1': encodeQueryParameter(_serializers, addressLine1, const FullType(String)),
        if (addressLine2 != null) r'address_line2': encodeQueryParameter(_serializers, addressLine2, const FullType(String)),
        if (addressState != null) r'address_state': encodeQueryParameter(_serializers, addressState, const FullType(String)),
        if (addressZip != null) r'address_zip': encodeQueryParameter(_serializers, addressZip, const FullType(String)),
        if (expMonth != null) r'exp_month': encodeQueryParameter(_serializers, expMonth, const FullType(String)),
        if (expYear != null) r'exp_year': encodeQueryParameter(_serializers, expYear, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        if (owner != null) r'owner': encodeQueryParameter(_serializers, owner, const FullType(Owner)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PostCustomersCustomerBankAccountsId200Response? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PostCustomersCustomerBankAccountsId200Response),
      ) as PostCustomersCustomerBankAccountsId200Response;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PostCustomersCustomerBankAccountsId200Response>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Verify a bank account
  /// &lt;p&gt;Verify a specified bank account for a given customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [id] 
  /// * [amounts] - Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [BankAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<BankAccount>> postCustomersCustomerSourcesIdVerify({ 
    required String customer,
    required String id,
    BuiltList<int>? amounts,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/sources/{id}/verify'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amounts != null) r'amounts': encodeCollectionQueryParameter<int>(_serializers, amounts, const FullType(BuiltList, [FullType(int)]), format: ListFormat.csv,),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    BankAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(BankAccount),
      ) as BankAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<BankAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a subscription
  /// &lt;p&gt;Creates a new subscription on an existing customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [addInvoiceItems] - A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items.
  /// * [applicationFeePercent] 
  /// * [automaticTax] 
  /// * [backdateStartDate] - A past timestamp to backdate the subscription's start date to. If set, the first invoice will contain line items for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor.
  /// * [billingCycleAnchor] - A future timestamp in UTC format to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). The anchor is the reference point that aligns future billing cycle dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals.
  /// * [billingThresholds] 
  /// * [cancelAt] 
  /// * [cancelAtPeriodEnd] - Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`.
  /// * [collectionMethod] - Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [daysUntilDue] - Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`.
  /// * [defaultPaymentMethod] - ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
  /// * [defaultSource] - ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
  /// * [defaultTaxRates] 
  /// * [discounts] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [invoiceSettings] 
  /// * [items] - A list of up to 20 subscription items, each with an attached price.
  /// * [metadata] 
  /// * [offSession] - Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session).
  /// * [paymentBehavior] - Only applies to subscriptions with `collection_method=charge_automatically`.  Use `allow_incomplete` to create Subscriptions with `status=incomplete` if the first invoice can't be paid. Creating Subscriptions with this status allows you to manage scenarios where additional customer actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.  Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the PaymentIntent on the first invoice. This allows simpler management of scenarios where additional customer actions are needed to pay a subscription’s invoice, such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the PaymentIntent is not confirmed within 23 hours Subscriptions transition to `status=incomplete_expired`, which is a terminal state.  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice can't be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further customer action is needed, this parameter doesn't create a Subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.  `pending_if_incomplete` is only used with updates and cannot be passed when creating a Subscription.  Subscriptions with `collection_method=send_invoice` are automatically activated regardless of the first Invoice status.
  /// * [paymentSettings] 
  /// * [pendingInvoiceItemInterval] 
  /// * [prorationBehavior] - Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) resulting from the `billing_cycle_anchor`. If no value is passed, the default is `create_prorations`.
  /// * [transferData] 
  /// * [trialEnd] 
  /// * [trialFromPlan] - Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
  /// * [trialPeriodDays] - Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
  /// * [trialSettings] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Subscription] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Subscription>> postCustomersCustomerSubscriptions({ 
    required String customer,
    BuiltList<AddInvoiceItemEntry>? addInvoiceItems,
    PostCustomersCustomerSubscriptionsRequestApplicationFeePercent? applicationFeePercent,
    AutomaticTaxConfig? automaticTax,
    int? backdateStartDate,
    int? billingCycleAnchor,
    PostCustomersCustomerSubscriptionsRequestBillingThresholds? billingThresholds,
    PostCustomersCustomerSubscriptionsRequestCancelAt? cancelAt,
    bool? cancelAtPeriodEnd,
    String? collectionMethod,
    String? currency,
    int? daysUntilDue,
    String? defaultPaymentMethod,
    String? defaultSource,
    PostCustomersCustomerSubscriptionsRequestDefaultTaxRates? defaultTaxRates,
    PostCustomersCustomerSubscriptionsRequestDiscounts? discounts,
    BuiltList<String>? expand,
    InvoiceSettingsParam? invoiceSettings,
    BuiltList<SubscriptionItemCreateParams>? items,
    PostAccountsRequestMetadata? metadata,
    bool? offSession,
    String? paymentBehavior,
    PaymentSettings? paymentSettings,
    PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? pendingInvoiceItemInterval,
    String? prorationBehavior,
    TransferDataSpecs3? transferData,
    PostCustomersCustomerSubscriptionsRequestTrialEnd? trialEnd,
    bool? trialFromPlan,
    int? trialPeriodDays,
    TrialSettingsConfig1? trialSettings,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/subscriptions'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (addInvoiceItems != null) r'add_invoice_items': encodeCollectionQueryParameter<AddInvoiceItemEntry>(_serializers, addInvoiceItems, const FullType(BuiltList, [FullType(AddInvoiceItemEntry)]), format: ListFormat.csv,),
        if (applicationFeePercent != null) r'application_fee_percent': encodeQueryParameter(_serializers, applicationFeePercent, const FullType(PostCustomersCustomerSubscriptionsRequestApplicationFeePercent)),
        if (automaticTax != null) r'automatic_tax': encodeQueryParameter(_serializers, automaticTax, const FullType(AutomaticTaxConfig)),
        if (backdateStartDate != null) r'backdate_start_date': encodeQueryParameter(_serializers, backdateStartDate, const FullType(int)),
        if (billingCycleAnchor != null) r'billing_cycle_anchor': encodeQueryParameter(_serializers, billingCycleAnchor, const FullType(int)),
        if (billingThresholds != null) r'billing_thresholds': encodeQueryParameter(_serializers, billingThresholds, const FullType(PostCustomersCustomerSubscriptionsRequestBillingThresholds)),
        if (cancelAt != null) r'cancel_at': encodeQueryParameter(_serializers, cancelAt, const FullType(PostCustomersCustomerSubscriptionsRequestCancelAt)),
        if (cancelAtPeriodEnd != null) r'cancel_at_period_end': encodeQueryParameter(_serializers, cancelAtPeriodEnd, const FullType(bool)),
        if (collectionMethod != null) r'collection_method': encodeQueryParameter(_serializers, collectionMethod, const FullType(String)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (daysUntilDue != null) r'days_until_due': encodeQueryParameter(_serializers, daysUntilDue, const FullType(int)),
        if (defaultPaymentMethod != null) r'default_payment_method': encodeQueryParameter(_serializers, defaultPaymentMethod, const FullType(String)),
        if (defaultSource != null) r'default_source': encodeQueryParameter(_serializers, defaultSource, const FullType(String)),
        if (defaultTaxRates != null) r'default_tax_rates': encodeQueryParameter(_serializers, defaultTaxRates, const FullType(PostCustomersCustomerSubscriptionsRequestDefaultTaxRates)),
        if (discounts != null) r'discounts': encodeQueryParameter(_serializers, discounts, const FullType(PostCustomersCustomerSubscriptionsRequestDiscounts)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (invoiceSettings != null) r'invoice_settings': encodeQueryParameter(_serializers, invoiceSettings, const FullType(InvoiceSettingsParam)),
        if (items != null) r'items': encodeCollectionQueryParameter<SubscriptionItemCreateParams>(_serializers, items, const FullType(BuiltList, [FullType(SubscriptionItemCreateParams)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (offSession != null) r'off_session': encodeQueryParameter(_serializers, offSession, const FullType(bool)),
        if (paymentBehavior != null) r'payment_behavior': encodeQueryParameter(_serializers, paymentBehavior, const FullType(String)),
        if (paymentSettings != null) r'payment_settings': encodeQueryParameter(_serializers, paymentSettings, const FullType(PaymentSettings)),
        if (pendingInvoiceItemInterval != null) r'pending_invoice_item_interval': encodeQueryParameter(_serializers, pendingInvoiceItemInterval, const FullType(PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval)),
        if (prorationBehavior != null) r'proration_behavior': encodeQueryParameter(_serializers, prorationBehavior, const FullType(String)),
        if (transferData != null) r'transfer_data': encodeQueryParameter(_serializers, transferData, const FullType(TransferDataSpecs3)),
        if (trialEnd != null) r'trial_end': encodeQueryParameter(_serializers, trialEnd, const FullType(PostCustomersCustomerSubscriptionsRequestTrialEnd)),
        if (trialFromPlan != null) r'trial_from_plan': encodeQueryParameter(_serializers, trialFromPlan, const FullType(bool)),
        if (trialPeriodDays != null) r'trial_period_days': encodeQueryParameter(_serializers, trialPeriodDays, const FullType(int)),
        if (trialSettings != null) r'trial_settings': encodeQueryParameter(_serializers, trialSettings, const FullType(TrialSettingsConfig1)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Subscription? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Subscription),
      ) as Subscription;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Subscription>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a subscription on a customer
  /// &lt;p&gt;Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the &lt;a href&#x3D;\&quot;#upcoming_invoice\&quot;&gt;upcoming invoice&lt;/a&gt; endpoint.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [subscriptionExposedId] 
  /// * [addInvoiceItems] - A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items.
  /// * [applicationFeePercent] 
  /// * [automaticTax] 
  /// * [billingCycleAnchor] - Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
  /// * [billingThresholds] 
  /// * [cancelAt] 
  /// * [cancelAtPeriodEnd] - Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`.
  /// * [cancellationDetails] 
  /// * [collectionMethod] - Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
  /// * [daysUntilDue] - Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`.
  /// * [defaultPaymentMethod] - ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
  /// * [defaultSource] 
  /// * [defaultTaxRates] 
  /// * [discounts] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [invoiceSettings] 
  /// * [items] - A list of up to 20 subscription items, each with an attached price.
  /// * [metadata] 
  /// * [offSession] - Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session).
  /// * [pauseCollection] 
  /// * [paymentBehavior] - Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.  Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.  Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/changelog/2019-03-14) to learn more.
  /// * [paymentSettings] 
  /// * [pendingInvoiceItemInterval] 
  /// * [prorationBehavior] - Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`.
  /// * [prorationDate] - If set, prorations will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same prorations that were previewed with the [create preview](https://stripe.com/docs/api/invoices/create_preview) endpoint. `proration_date` can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations.
  /// * [transferData] 
  /// * [trialEnd] 
  /// * [trialFromPlan] - Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
  /// * [trialSettings] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Subscription] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Subscription>> postCustomersCustomerSubscriptionsSubscriptionExposedId({ 
    required String customer,
    required String subscriptionExposedId,
    BuiltList<AddInvoiceItemEntry>? addInvoiceItems,
    PostCustomersCustomerSubscriptionsRequestApplicationFeePercent? applicationFeePercent,
    AutomaticTaxConfig1? automaticTax,
    String? billingCycleAnchor,
    PostCustomersCustomerSubscriptionsRequestBillingThresholds? billingThresholds,
    PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestCancelAt? cancelAt,
    bool? cancelAtPeriodEnd,
    CancellationDetailsParam? cancellationDetails,
    String? collectionMethod,
    int? daysUntilDue,
    String? defaultPaymentMethod,
    PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestDefaultSource? defaultSource,
    PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates? defaultTaxRates,
    PostCustomersCustomerSubscriptionsRequestDiscounts? discounts,
    BuiltList<String>? expand,
    InvoiceSettingsParam? invoiceSettings,
    BuiltList<SubscriptionItemUpdateParams>? items,
    PostAccountsRequestMetadata? metadata,
    bool? offSession,
    PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestPauseCollection? pauseCollection,
    String? paymentBehavior,
    PaymentSettings? paymentSettings,
    PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? pendingInvoiceItemInterval,
    String? prorationBehavior,
    int? prorationDate,
    PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestTransferData? transferData,
    PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestTrialEnd? trialEnd,
    bool? trialFromPlan,
    TrialSettingsConfig1? trialSettings,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/subscriptions/{subscription_exposed_id}'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString()).replaceAll('{' r'subscription_exposed_id' '}', encodeQueryParameter(_serializers, subscriptionExposedId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (addInvoiceItems != null) r'add_invoice_items': encodeCollectionQueryParameter<AddInvoiceItemEntry>(_serializers, addInvoiceItems, const FullType(BuiltList, [FullType(AddInvoiceItemEntry)]), format: ListFormat.csv,),
        if (applicationFeePercent != null) r'application_fee_percent': encodeQueryParameter(_serializers, applicationFeePercent, const FullType(PostCustomersCustomerSubscriptionsRequestApplicationFeePercent)),
        if (automaticTax != null) r'automatic_tax': encodeQueryParameter(_serializers, automaticTax, const FullType(AutomaticTaxConfig1)),
        if (billingCycleAnchor != null) r'billing_cycle_anchor': encodeQueryParameter(_serializers, billingCycleAnchor, const FullType(String)),
        if (billingThresholds != null) r'billing_thresholds': encodeQueryParameter(_serializers, billingThresholds, const FullType(PostCustomersCustomerSubscriptionsRequestBillingThresholds)),
        if (cancelAt != null) r'cancel_at': encodeQueryParameter(_serializers, cancelAt, const FullType(PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestCancelAt)),
        if (cancelAtPeriodEnd != null) r'cancel_at_period_end': encodeQueryParameter(_serializers, cancelAtPeriodEnd, const FullType(bool)),
        if (cancellationDetails != null) r'cancellation_details': encodeQueryParameter(_serializers, cancellationDetails, const FullType(CancellationDetailsParam)),
        if (collectionMethod != null) r'collection_method': encodeQueryParameter(_serializers, collectionMethod, const FullType(String)),
        if (daysUntilDue != null) r'days_until_due': encodeQueryParameter(_serializers, daysUntilDue, const FullType(int)),
        if (defaultPaymentMethod != null) r'default_payment_method': encodeQueryParameter(_serializers, defaultPaymentMethod, const FullType(String)),
        if (defaultSource != null) r'default_source': encodeQueryParameter(_serializers, defaultSource, const FullType(PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestDefaultSource)),
        if (defaultTaxRates != null) r'default_tax_rates': encodeQueryParameter(_serializers, defaultTaxRates, const FullType(PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates)),
        if (discounts != null) r'discounts': encodeQueryParameter(_serializers, discounts, const FullType(PostCustomersCustomerSubscriptionsRequestDiscounts)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (invoiceSettings != null) r'invoice_settings': encodeQueryParameter(_serializers, invoiceSettings, const FullType(InvoiceSettingsParam)),
        if (items != null) r'items': encodeCollectionQueryParameter<SubscriptionItemUpdateParams>(_serializers, items, const FullType(BuiltList, [FullType(SubscriptionItemUpdateParams)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (offSession != null) r'off_session': encodeQueryParameter(_serializers, offSession, const FullType(bool)),
        if (pauseCollection != null) r'pause_collection': encodeQueryParameter(_serializers, pauseCollection, const FullType(PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestPauseCollection)),
        if (paymentBehavior != null) r'payment_behavior': encodeQueryParameter(_serializers, paymentBehavior, const FullType(String)),
        if (paymentSettings != null) r'payment_settings': encodeQueryParameter(_serializers, paymentSettings, const FullType(PaymentSettings)),
        if (pendingInvoiceItemInterval != null) r'pending_invoice_item_interval': encodeQueryParameter(_serializers, pendingInvoiceItemInterval, const FullType(PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval)),
        if (prorationBehavior != null) r'proration_behavior': encodeQueryParameter(_serializers, prorationBehavior, const FullType(String)),
        if (prorationDate != null) r'proration_date': encodeQueryParameter(_serializers, prorationDate, const FullType(int)),
        if (transferData != null) r'transfer_data': encodeQueryParameter(_serializers, transferData, const FullType(PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestTransferData)),
        if (trialEnd != null) r'trial_end': encodeQueryParameter(_serializers, trialEnd, const FullType(PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestTrialEnd)),
        if (trialFromPlan != null) r'trial_from_plan': encodeQueryParameter(_serializers, trialFromPlan, const FullType(bool)),
        if (trialSettings != null) r'trial_settings': encodeQueryParameter(_serializers, trialSettings, const FullType(TrialSettingsConfig1)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Subscription? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Subscription),
      ) as Subscription;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Subscription>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a Customer tax ID
  /// &lt;p&gt;Creates a new &lt;code&gt;tax_id&lt;/code&gt; object for a customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [type] - Type of the tax ID, one of `ad_nrt`, `ae_trn`, `al_tin`, `am_tin`, `ao_tin`, `ar_cuit`, `au_abn`, `au_arn`, `aw_tin`, `az_tin`, `ba_tin`, `bb_tin`, `bd_bin`, `bf_ifu`, `bg_uic`, `bh_vat`, `bj_ifu`, `bo_tin`, `br_cnpj`, `br_cpf`, `bs_tin`, `by_tin`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `cd_nif`, `ch_uid`, `ch_vat`, `cl_tin`, `cm_niu`, `cn_tin`, `co_nit`, `cr_tin`, `cv_nif`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `et_tin`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `gn_nif`, `hk_br`, `hr_oib`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kg_tin`, `kh_tin`, `kr_brn`, `kz_bin`, `la_tin`, `li_uid`, `li_vat`, `ma_vat`, `md_vat`, `me_pib`, `mk_vat`, `mr_nif`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `np_pan`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sn_ninea`, `sr_fin`, `sv_nit`, `th_vat`, `tj_tin`, `tr_tin`, `tw_vat`, `tz_vat`, `ua_vat`, `ug_tin`, `us_ein`, `uy_ruc`, `uz_tin`, `uz_vat`, `ve_rif`, `vn_tin`, `za_vat`, `zm_tin`, or `zw_tin`
  /// * [value] - Value of the tax ID.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxId] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxId>> postCustomersCustomerTaxIds({ 
    required String customer,
    required String type,
    required String value,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/customers/{customer}/tax_ids'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
        r'value': encodeQueryParameter(_serializers, value, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxId? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxId),
      ) as TaxId;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxId>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a dispute
  /// &lt;p&gt;When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/disputes\&quot;&gt;dashboard&lt;/a&gt;, but if you prefer, you can use the API to submit evidence programmatically.&lt;/p&gt;  &lt;p&gt;Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our &lt;a href&#x3D;\&quot;/docs/disputes/categories\&quot;&gt;guide to dispute types&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [dispute] 
  /// * [evidence] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [submit] - Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default).
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Dispute] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Dispute>> postDisputesDispute({ 
    required String dispute,
    DisputeEvidenceParams? evidence,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    bool? submit,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/disputes/{dispute}'.replaceAll('{' r'dispute' '}', encodeQueryParameter(_serializers, dispute, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (evidence != null) r'evidence': encodeQueryParameter(_serializers, evidence, const FullType(DisputeEvidenceParams)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (submit != null) r'submit': encodeQueryParameter(_serializers, submit, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Dispute? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Dispute),
      ) as Dispute;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Dispute>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Close a dispute
  /// &lt;p&gt;Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.&lt;/p&gt;  &lt;p&gt;The status of the dispute will change from &lt;code&gt;needs_response&lt;/code&gt; to &lt;code&gt;lost&lt;/code&gt;. &lt;em&gt;Closing a dispute is irreversible&lt;/em&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [dispute] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Dispute] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Dispute>> postDisputesDisputeClose({ 
    required String dispute,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/disputes/{dispute}/close'.replaceAll('{' r'dispute' '}', encodeQueryParameter(_serializers, dispute, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Dispute? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Dispute),
      ) as Dispute;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Dispute>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a feature
  /// &lt;p&gt;Creates a feature&lt;/p&gt;
  ///
  /// Parameters:
  /// * [lookupKey] - A unique key you provide as your own system identifier. This may be up to 80 characters.
  /// * [name] - The feature's name, for your own purpose, not meant to be displayable to the customer.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [EntitlementsFeature] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<EntitlementsFeature>> postEntitlementsFeatures({ 
    required String lookupKey,
    required String name,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/entitlements/features';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'lookup_key': encodeQueryParameter(_serializers, lookupKey, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    EntitlementsFeature? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(EntitlementsFeature),
      ) as EntitlementsFeature;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<EntitlementsFeature>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Updates a feature
  /// &lt;p&gt;Update a feature’s metadata or permanently deactivate it.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [active] - Inactive features cannot be attached to new products and will not be returned from the features list endpoint.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [name] - The feature's name, for your own purpose, not meant to be displayable to the customer.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [EntitlementsFeature] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<EntitlementsFeature>> postEntitlementsFeaturesId({ 
    required String id,
    bool? active,
    BuiltList<String>? expand,
    PostEntitlementsFeaturesIdRequestMetadata? metadata,
    String? name,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/entitlements/features/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostEntitlementsFeaturesIdRequestMetadata)),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    EntitlementsFeature? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(EntitlementsFeature),
      ) as EntitlementsFeature;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<EntitlementsFeature>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create an ephemeral key
  /// &lt;p&gt;Creates a short-lived API key for a given resource.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] - The ID of the Customer you'd like to modify using the resulting ephemeral key.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [issuingCard] - The ID of the Issuing Card you'd like to access using the resulting ephemeral key.
  /// * [nonce] - A single-use token, created by Stripe.js, used for creating ephemeral keys for Issuing Cards without exchanging sensitive information.
  /// * [verificationSession] - The ID of the Identity VerificationSession you'd like to access using the resulting ephemeral key
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [EphemeralKey] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<EphemeralKey>> postEphemeralKeys({ 
    String? customer,
    BuiltList<String>? expand,
    String? issuingCard,
    String? nonce,
    String? verificationSession,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/ephemeral_keys';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (issuingCard != null) r'issuing_card': encodeQueryParameter(_serializers, issuingCard, const FullType(String)),
        if (nonce != null) r'nonce': encodeQueryParameter(_serializers, nonce, const FullType(String)),
        if (verificationSession != null) r'verification_session': encodeQueryParameter(_serializers, verificationSession, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    EphemeralKey? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(EphemeralKey),
      ) as EphemeralKey;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<EphemeralKey>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// postExternalAccountsId
  /// &lt;p&gt;Updates the metadata, account holder name, account holder type of a bank account belonging to a connected account and optionally sets it as the default for its currency. Other bank account details are not editable by design.&lt;/p&gt;  &lt;p&gt;You can only update bank accounts when &lt;a href&#x3D;\&quot;/api/accounts/object#account_object-controller-requirement_collection\&quot;&gt;account.controller.requirement_collection&lt;/a&gt; is &lt;code&gt;application&lt;/code&gt;, which includes &lt;a href&#x3D;\&quot;/connect/custom-accounts\&quot;&gt;Custom accounts&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [accountHolderName] - The name of the person or business that owns the bank account.
  /// * [accountHolderType] - The type of entity that holds the account. This can be either `individual` or `company`.
  /// * [accountType] - The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
  /// * [addressCity] - City/District/Suburb/Town/Village.
  /// * [addressCountry] - Billing address country, if provided when creating card.
  /// * [addressLine1] - Address line 1 (Street address/PO Box/Company name).
  /// * [addressLine2] - Address line 2 (Apartment/Suite/Unit/Building).
  /// * [addressState] - State/County/Province/Region.
  /// * [addressZip] - ZIP or postal code.
  /// * [defaultForCurrency] - When set to true, this becomes the default external account for its currency.
  /// * [documents] 
  /// * [expMonth] - Two digit number representing the card’s expiration month.
  /// * [expYear] - Four digit number representing the card’s expiration year.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [name] - Cardholder name.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ExternalAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ExternalAccount>> postExternalAccountsId({ 
    required String id,
    String? accountHolderName,
    String? accountHolderType,
    String? accountType,
    String? addressCity,
    String? addressCountry,
    String? addressLine1,
    String? addressLine2,
    String? addressState,
    String? addressZip,
    bool? defaultForCurrency,
    ExternalAccountDocumentsParam1? documents,
    String? expMonth,
    String? expYear,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    String? name,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/external_accounts/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (accountHolderName != null) r'account_holder_name': encodeQueryParameter(_serializers, accountHolderName, const FullType(String)),
        if (accountHolderType != null) r'account_holder_type': encodeQueryParameter(_serializers, accountHolderType, const FullType(String)),
        if (accountType != null) r'account_type': encodeQueryParameter(_serializers, accountType, const FullType(String)),
        if (addressCity != null) r'address_city': encodeQueryParameter(_serializers, addressCity, const FullType(String)),
        if (addressCountry != null) r'address_country': encodeQueryParameter(_serializers, addressCountry, const FullType(String)),
        if (addressLine1 != null) r'address_line1': encodeQueryParameter(_serializers, addressLine1, const FullType(String)),
        if (addressLine2 != null) r'address_line2': encodeQueryParameter(_serializers, addressLine2, const FullType(String)),
        if (addressState != null) r'address_state': encodeQueryParameter(_serializers, addressState, const FullType(String)),
        if (addressZip != null) r'address_zip': encodeQueryParameter(_serializers, addressZip, const FullType(String)),
        if (defaultForCurrency != null) r'default_for_currency': encodeQueryParameter(_serializers, defaultForCurrency, const FullType(bool)),
        if (documents != null) r'documents': encodeQueryParameter(_serializers, documents, const FullType(ExternalAccountDocumentsParam1)),
        if (expMonth != null) r'exp_month': encodeQueryParameter(_serializers, expMonth, const FullType(String)),
        if (expYear != null) r'exp_year': encodeQueryParameter(_serializers, expYear, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ExternalAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ExternalAccount),
      ) as ExternalAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ExternalAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a file link
  /// &lt;p&gt;Creates a new file link object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [file] - The ID of the file. The file's `purpose` must be one of the following: `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `financial_account_statement`, `identity_document_downloadable`, `issuing_regulatory_reporting`, `pci_document`, `selfie`, `sigma_scheduled_query`, `tax_document_user_upload`, or `terminal_reader_splashscreen`.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [expiresAt] - The link isn't usable after this future timestamp.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FileLink] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FileLink>> postFileLinks({ 
    required String file,
    BuiltList<String>? expand,
    int? expiresAt,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/file_links';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (expiresAt != null) r'expires_at': encodeQueryParameter(_serializers, expiresAt, const FullType(int)),
        r'file': encodeQueryParameter(_serializers, file, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FileLink? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FileLink),
      ) as FileLink;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FileLink>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a file link
  /// &lt;p&gt;Updates an existing file link object. Expired links can no longer be updated.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [link] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [expiresAt] 
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FileLink] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FileLink>> postFileLinksLink({ 
    required String link,
    BuiltList<String>? expand,
    PostFileLinksLinkRequestExpiresAt? expiresAt,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/file_links/{link}'.replaceAll('{' r'link' '}', encodeQueryParameter(_serializers, link, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (expiresAt != null) r'expires_at': encodeQueryParameter(_serializers, expiresAt, const FullType(PostFileLinksLinkRequestExpiresAt)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FileLink? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FileLink),
      ) as FileLink;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FileLink>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a file
  /// &lt;p&gt;To upload a file to Stripe, you need to send a request of type &lt;code&gt;multipart/form-data&lt;/code&gt;. Include the file you want to upload in the request, and the parameters for creating a file.&lt;/p&gt;  &lt;p&gt;All of Stripe’s officially supported Client libraries support sending &lt;code&gt;multipart/form-data&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [file] - A file to upload. Make sure that the specifications follow RFC 2388, which defines file transfers for the `multipart/form-data` protocol.
  /// * [purpose] - The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [fileLinkData] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Uint8List] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Uint8List>> postFiles({ 
    required MultipartFile file,
    required String purpose,
    BuiltList<String>? expand,
    FileLinkCreationParams? fileLinkData,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/files';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'multipart/form-data',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = FormData.fromMap(<String, dynamic>{
        if (expand != null) r'expand': encodeFormParameter(_serializers, expand, const FullType(BuiltList, [FullType(String)])),
        r'file': file,
        if (fileLinkData != null) r'file_link_data': encodeFormParameter(_serializers, fileLinkData, const FullType(FileLinkCreationParams)),
        r'purpose': encodeFormParameter(_serializers, purpose, const FullType(String)),
      });

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Uint8List? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Uint8List),
      ) as Uint8List;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Uint8List>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Disconnect an Account
  /// &lt;p&gt;Disables your access to a Financial Connections &lt;code&gt;Account&lt;/code&gt;. You will no longer be able to access data associated with the account (e.g. balances, transactions).&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FinancialConnectionsAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FinancialConnectionsAccount>> postFinancialConnectionsAccountsAccountDisconnect({ 
    required String account,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/financial_connections/accounts/{account}/disconnect'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FinancialConnectionsAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FinancialConnectionsAccount),
      ) as FinancialConnectionsAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FinancialConnectionsAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Refresh Account data
  /// &lt;p&gt;Refreshes the data associated with a Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [features] - The list of account features that you would like to refresh.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FinancialConnectionsAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FinancialConnectionsAccount>> postFinancialConnectionsAccountsAccountRefresh({ 
    required String account,
    required BuiltList<String> features,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/financial_connections/accounts/{account}/refresh'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'features': encodeCollectionQueryParameter<String>(_serializers, features, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FinancialConnectionsAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FinancialConnectionsAccount),
      ) as FinancialConnectionsAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FinancialConnectionsAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Subscribe to data refreshes for an Account
  /// &lt;p&gt;Subscribes to periodic refreshes of data associated with a Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [features] - The list of account features to which you would like to subscribe.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FinancialConnectionsAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FinancialConnectionsAccount>> postFinancialConnectionsAccountsAccountSubscribe({ 
    required String account,
    required BuiltList<String> features,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/financial_connections/accounts/{account}/subscribe'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'features': encodeCollectionQueryParameter<String>(_serializers, features, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FinancialConnectionsAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FinancialConnectionsAccount),
      ) as FinancialConnectionsAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FinancialConnectionsAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Unsubscribe from data refreshes for an Account
  /// &lt;p&gt;Unsubscribes from periodic refreshes of data associated with a Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [features] - The list of account features from which you would like to unsubscribe.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FinancialConnectionsAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FinancialConnectionsAccount>> postFinancialConnectionsAccountsAccountUnsubscribe({ 
    required String account,
    required BuiltList<String> features,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/financial_connections/accounts/{account}/unsubscribe'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'features': encodeCollectionQueryParameter<String>(_serializers, features, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FinancialConnectionsAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FinancialConnectionsAccount),
      ) as FinancialConnectionsAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FinancialConnectionsAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a Session
  /// &lt;p&gt;To launch the Financial Connections authorization flow, create a &lt;code&gt;Session&lt;/code&gt;. The session’s &lt;code&gt;client_secret&lt;/code&gt; can be used to launch the flow using Stripe.js.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [accountHolder] 
  /// * [permissions] - List of data features that you would like to request access to.  Possible values are `balances`, `transactions`, `ownership`, and `payment_method`.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [filters] 
  /// * [prefetch] - List of data features that you would like to retrieve upon account creation.
  /// * [returnUrl] - For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FinancialConnectionsSession] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FinancialConnectionsSession>> postFinancialConnectionsSessions({ 
    required AccountholderParams1 accountHolder,
    required BuiltList<String> permissions,
    BuiltList<String>? expand,
    FiltersParams? filters,
    BuiltList<String>? prefetch,
    String? returnUrl,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/financial_connections/sessions';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'account_holder': encodeQueryParameter(_serializers, accountHolder, const FullType(AccountholderParams1)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (filters != null) r'filters': encodeQueryParameter(_serializers, filters, const FullType(FiltersParams)),
        r'permissions': encodeCollectionQueryParameter<String>(_serializers, permissions, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (prefetch != null) r'prefetch': encodeCollectionQueryParameter<String>(_serializers, prefetch, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (returnUrl != null) r'return_url': encodeQueryParameter(_serializers, returnUrl, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FinancialConnectionsSession? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FinancialConnectionsSession),
      ) as FinancialConnectionsSession;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FinancialConnectionsSession>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a ForwardingRequest
  /// &lt;p&gt;Creates a ForwardingRequest object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [paymentMethod] - The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed.
  /// * [replacements] - The field kinds to be replaced in the forwarded request.
  /// * [url] - The destination URL for the forwarded request. Must be supported by the config.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [request] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ForwardingRequest] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ForwardingRequest>> postForwardingRequests({ 
    required String paymentMethod,
    required BuiltList<String> replacements,
    required String url,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    RequestParam? request,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/forwarding/requests';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        r'payment_method': encodeQueryParameter(_serializers, paymentMethod, const FullType(String)),
        r'replacements': encodeCollectionQueryParameter<String>(_serializers, replacements, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (request != null) r'request': encodeQueryParameter(_serializers, request, const FullType(RequestParam)),
        r'url': encodeQueryParameter(_serializers, url, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ForwardingRequest? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ForwardingRequest),
      ) as ForwardingRequest;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ForwardingRequest>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a VerificationSession
  /// &lt;p&gt;Creates a VerificationSession object.&lt;/p&gt;  &lt;p&gt;After the VerificationSession is created, display a verification modal using the session &lt;code&gt;client_secret&lt;/code&gt; or send your users to the session’s &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.&lt;/p&gt;  &lt;p&gt;Related guide: &lt;a href&#x3D;\&quot;/docs/identity/verify-identity-documents\&quot;&gt;Verify your users’ identity documents&lt;/a&gt;&lt;/p&gt;
  ///
  /// Parameters:
  /// * [clientReferenceId] - A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [options] 
  /// * [providedDetails] 
  /// * [relatedCustomer] - Customer ID
  /// * [relatedPerson] 
  /// * [returnUrl] - The URL that the user will be redirected to upon completing the verification flow.
  /// * [type] - The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed. You must provide a `type` if not passing `verification_flow`.
  /// * [verificationFlow] - The ID of a verification flow from the Dashboard. See https://docs.stripe.com/identity/verification-flows.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IdentityVerificationSession] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IdentityVerificationSession>> postIdentityVerificationSessions({ 
    String? clientReferenceId,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    SessionOptionsParam? options,
    ProvidedDetailsParam? providedDetails,
    String? relatedCustomer,
    RelatedPersonParam? relatedPerson,
    String? returnUrl,
    String? type,
    String? verificationFlow,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/identity/verification_sessions';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (clientReferenceId != null) r'client_reference_id': encodeQueryParameter(_serializers, clientReferenceId, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (options != null) r'options': encodeQueryParameter(_serializers, options, const FullType(SessionOptionsParam)),
        if (providedDetails != null) r'provided_details': encodeQueryParameter(_serializers, providedDetails, const FullType(ProvidedDetailsParam)),
        if (relatedCustomer != null) r'related_customer': encodeQueryParameter(_serializers, relatedCustomer, const FullType(String)),
        if (relatedPerson != null) r'related_person': encodeQueryParameter(_serializers, relatedPerson, const FullType(RelatedPersonParam)),
        if (returnUrl != null) r'return_url': encodeQueryParameter(_serializers, returnUrl, const FullType(String)),
        if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
        if (verificationFlow != null) r'verification_flow': encodeQueryParameter(_serializers, verificationFlow, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IdentityVerificationSession? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IdentityVerificationSession),
      ) as IdentityVerificationSession;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IdentityVerificationSession>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a VerificationSession
  /// &lt;p&gt;Updates a VerificationSession object.&lt;/p&gt;  &lt;p&gt;When the session status is &lt;code&gt;requires_input&lt;/code&gt;, you can use this method to update the verification check and options.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [session] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [options] 
  /// * [providedDetails] 
  /// * [type] - The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IdentityVerificationSession] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IdentityVerificationSession>> postIdentityVerificationSessionsSession({ 
    required String session,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    SessionOptionsParam? options,
    ProvidedDetailsParam? providedDetails,
    String? type,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/identity/verification_sessions/{session}'.replaceAll('{' r'session' '}', encodeQueryParameter(_serializers, session, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (options != null) r'options': encodeQueryParameter(_serializers, options, const FullType(SessionOptionsParam)),
        if (providedDetails != null) r'provided_details': encodeQueryParameter(_serializers, providedDetails, const FullType(ProvidedDetailsParam)),
        if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IdentityVerificationSession? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IdentityVerificationSession),
      ) as IdentityVerificationSession;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IdentityVerificationSession>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Cancel a VerificationSession
  /// &lt;p&gt;A VerificationSession object can be canceled when it is in &lt;code&gt;requires_input&lt;/code&gt; &lt;a href&#x3D;\&quot;/docs/identity/how-sessions-work\&quot;&gt;status&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Once canceled, future submission attempts are disabled. This cannot be undone. &lt;a href&#x3D;\&quot;/docs/identity/verification-sessions#cancel\&quot;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [session] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IdentityVerificationSession] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IdentityVerificationSession>> postIdentityVerificationSessionsSessionCancel({ 
    required String session,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/identity/verification_sessions/{session}/cancel'.replaceAll('{' r'session' '}', encodeQueryParameter(_serializers, session, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IdentityVerificationSession? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IdentityVerificationSession),
      ) as IdentityVerificationSession;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IdentityVerificationSession>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Redact a VerificationSession
  /// &lt;p&gt;Redact a VerificationSession to remove all collected information from Stripe. This will redact the VerificationSession and all objects related to it, including VerificationReports, Events, request logs, etc.&lt;/p&gt;  &lt;p&gt;A VerificationSession object can be redacted when it is in &lt;code&gt;requires_input&lt;/code&gt; or &lt;code&gt;verified&lt;/code&gt; &lt;a href&#x3D;\&quot;/docs/identity/how-sessions-work\&quot;&gt;status&lt;/a&gt;. Redacting a VerificationSession in &lt;code&gt;requires_action&lt;/code&gt; state will automatically cancel it.&lt;/p&gt;  &lt;p&gt;The redaction process may take up to four days. When the redaction process is in progress, the VerificationSession’s &lt;code&gt;redaction.status&lt;/code&gt; field will be set to &lt;code&gt;processing&lt;/code&gt;; when the process is finished, it will change to &lt;code&gt;redacted&lt;/code&gt; and an &lt;code&gt;identity.verification_session.redacted&lt;/code&gt; event will be emitted.&lt;/p&gt;  &lt;p&gt;Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the fields that contain personal data will be replaced by the string &lt;code&gt;[redacted]&lt;/code&gt; or a similar placeholder. The &lt;code&gt;metadata&lt;/code&gt; field will also be erased. Redacted objects cannot be updated or used for any purpose.&lt;/p&gt;  &lt;p&gt;&lt;a href&#x3D;\&quot;/docs/identity/verification-sessions#redact\&quot;&gt;Learn more&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [session] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IdentityVerificationSession] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IdentityVerificationSession>> postIdentityVerificationSessionsSessionRedact({ 
    required String session,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/identity/verification_sessions/{session}/redact'.replaceAll('{' r'session' '}', encodeQueryParameter(_serializers, session, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IdentityVerificationSession? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IdentityVerificationSession),
      ) as IdentityVerificationSession;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IdentityVerificationSession>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Archive an invoice rendering template
  /// &lt;p&gt;Updates the status of an invoice rendering template to ‘archived’ so no new Stripe objects (customers, invoices, etc.) can reference it. The template can also no longer be updated. However, if the template is already set on a Stripe object, it will continue to be applied on invoices generated by it.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [template] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [InvoiceRenderingTemplate] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<InvoiceRenderingTemplate>> postInvoiceRenderingTemplatesTemplateArchive({ 
    required String template,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoice_rendering_templates/{template}/archive'.replaceAll('{' r'template' '}', encodeQueryParameter(_serializers, template, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    InvoiceRenderingTemplate? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(InvoiceRenderingTemplate),
      ) as InvoiceRenderingTemplate;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<InvoiceRenderingTemplate>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Unarchive an invoice rendering template
  /// &lt;p&gt;Unarchive an invoice rendering template so it can be used on new Stripe objects again.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [template] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [InvoiceRenderingTemplate] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<InvoiceRenderingTemplate>> postInvoiceRenderingTemplatesTemplateUnarchive({ 
    required String template,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoice_rendering_templates/{template}/unarchive'.replaceAll('{' r'template' '}', encodeQueryParameter(_serializers, template, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    InvoiceRenderingTemplate? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(InvoiceRenderingTemplate),
      ) as InvoiceRenderingTemplate;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<InvoiceRenderingTemplate>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create an invoice item
  /// &lt;p&gt;Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] - The ID of the customer who will be billed when this invoice item is billed.
  /// * [amount] - The integer amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. Passing in a negative `amount` will reduce the `amount_due` on the invoice.
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [description] - An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.
  /// * [discountable] - Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items.
  /// * [discounts] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [invoice] - The ID of an existing invoice to add this invoice item to. For subscription invoices, when left blank, the invoice item will be added to the next upcoming scheduled invoice. For standalone invoices, the invoice item won't be automatically added unless you pass `pending_invoice_item_behavior: 'include'` when creating the invoice. This is useful when adding invoice items in response to an invoice.created webhook. You can only add invoice items to draft invoices and there is a maximum of 250 items per invoice.
  /// * [metadata] 
  /// * [period] 
  /// * [priceData] 
  /// * [pricing] 
  /// * [quantity] - Non-negative integer. The quantity of units for the invoice item.
  /// * [subscription] - The ID of a subscription to add this invoice item to. When left blank, the invoice item is added to the next upcoming scheduled invoice. When set, scheduled invoices for subscriptions other than the specified subscription will ignore the invoice item. Use this when you want to express that an invoice item has been accrued within the context of a particular subscription.
  /// * [taxBehavior] - Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
  /// * [taxCode] 
  /// * [taxRates] - The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item.
  /// * [unitAmountDecimal] - The decimal unit amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. This `unit_amount_decimal` will be multiplied by the quantity to get the full amount. Passing in a negative `unit_amount_decimal` will reduce the `amount_due` on the invoice. Accepts at most 12 decimal places.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Invoiceitem] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Invoiceitem>> postInvoiceitems({ 
    required String customer,
    int? amount,
    String? currency,
    String? description,
    bool? discountable,
    PostInvoiceitemsRequestDiscounts? discounts,
    BuiltList<String>? expand,
    String? invoice,
    PostAccountsRequestMetadata? metadata,
    Period? period,
    OneTimePriceData? priceData,
    PricingParam? pricing,
    int? quantity,
    String? subscription,
    String? taxBehavior,
    PostInvoiceitemsRequestTaxCode? taxCode,
    BuiltList<String>? taxRates,
    double? unitAmountDecimal,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoiceitems';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (discountable != null) r'discountable': encodeQueryParameter(_serializers, discountable, const FullType(bool)),
        if (discounts != null) r'discounts': encodeQueryParameter(_serializers, discounts, const FullType(PostInvoiceitemsRequestDiscounts)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (invoice != null) r'invoice': encodeQueryParameter(_serializers, invoice, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (period != null) r'period': encodeQueryParameter(_serializers, period, const FullType(Period)),
        if (priceData != null) r'price_data': encodeQueryParameter(_serializers, priceData, const FullType(OneTimePriceData)),
        if (pricing != null) r'pricing': encodeQueryParameter(_serializers, pricing, const FullType(PricingParam)),
        if (quantity != null) r'quantity': encodeQueryParameter(_serializers, quantity, const FullType(int)),
        if (subscription != null) r'subscription': encodeQueryParameter(_serializers, subscription, const FullType(String)),
        if (taxBehavior != null) r'tax_behavior': encodeQueryParameter(_serializers, taxBehavior, const FullType(String)),
        if (taxCode != null) r'tax_code': encodeQueryParameter(_serializers, taxCode, const FullType(PostInvoiceitemsRequestTaxCode)),
        if (taxRates != null) r'tax_rates': encodeCollectionQueryParameter<String>(_serializers, taxRates, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (unitAmountDecimal != null) r'unit_amount_decimal': encodeQueryParameter(_serializers, unitAmountDecimal, const FullType(double)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Invoiceitem? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Invoiceitem),
      ) as Invoiceitem;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Invoiceitem>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update an invoice item
  /// &lt;p&gt;Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoiceitem] 
  /// * [amount] - The integer amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer's account, pass a negative amount.
  /// * [description] - An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.
  /// * [discountable] - Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items. Cannot be set to true for prorations.
  /// * [discounts] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [period] 
  /// * [priceData] 
  /// * [pricing] 
  /// * [quantity] - Non-negative integer. The quantity of units for the invoice item.
  /// * [taxBehavior] - Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
  /// * [taxCode] 
  /// * [taxRates] 
  /// * [unitAmountDecimal] - The decimal unit amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. This `unit_amount_decimal` will be multiplied by the quantity to get the full amount. Passing in a negative `unit_amount_decimal` will reduce the `amount_due` on the invoice. Accepts at most 12 decimal places.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Invoiceitem] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Invoiceitem>> postInvoiceitemsInvoiceitem({ 
    required String invoiceitem,
    int? amount,
    String? description,
    bool? discountable,
    PostInvoiceitemsInvoiceitemRequestDiscounts? discounts,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    Period? period,
    OneTimePriceData? priceData,
    PricingParam? pricing,
    int? quantity,
    String? taxBehavior,
    PostInvoiceitemsRequestTaxCode? taxCode,
    PostInvoiceitemsInvoiceitemRequestTaxRates? taxRates,
    double? unitAmountDecimal,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoiceitems/{invoiceitem}'.replaceAll('{' r'invoiceitem' '}', encodeQueryParameter(_serializers, invoiceitem, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (discountable != null) r'discountable': encodeQueryParameter(_serializers, discountable, const FullType(bool)),
        if (discounts != null) r'discounts': encodeQueryParameter(_serializers, discounts, const FullType(PostInvoiceitemsInvoiceitemRequestDiscounts)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (period != null) r'period': encodeQueryParameter(_serializers, period, const FullType(Period)),
        if (priceData != null) r'price_data': encodeQueryParameter(_serializers, priceData, const FullType(OneTimePriceData)),
        if (pricing != null) r'pricing': encodeQueryParameter(_serializers, pricing, const FullType(PricingParam)),
        if (quantity != null) r'quantity': encodeQueryParameter(_serializers, quantity, const FullType(int)),
        if (taxBehavior != null) r'tax_behavior': encodeQueryParameter(_serializers, taxBehavior, const FullType(String)),
        if (taxCode != null) r'tax_code': encodeQueryParameter(_serializers, taxCode, const FullType(PostInvoiceitemsRequestTaxCode)),
        if (taxRates != null) r'tax_rates': encodeQueryParameter(_serializers, taxRates, const FullType(PostInvoiceitemsInvoiceitemRequestTaxRates)),
        if (unitAmountDecimal != null) r'unit_amount_decimal': encodeQueryParameter(_serializers, unitAmountDecimal, const FullType(double)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Invoiceitem? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Invoiceitem),
      ) as Invoiceitem;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Invoiceitem>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create an invoice
  /// &lt;p&gt;This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you &lt;a href&#x3D;\&quot;#finalize_invoice\&quot;&gt;finalize&lt;/a&gt; the invoice, which allows you to &lt;a href&#x3D;\&quot;#pay_invoice\&quot;&gt;pay&lt;/a&gt; or &lt;a href&#x3D;\&quot;#send_invoice\&quot;&gt;send&lt;/a&gt; the invoice to your customers.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [accountTaxIds] 
  /// * [applicationFeeAmount] - A fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees).
  /// * [autoAdvance] - Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action. Defaults to false.
  /// * [automaticTax] 
  /// * [automaticallyFinalizesAt] - The time when this invoice should be scheduled to finalize (up to 5 years in the future). The invoice is finalized at this time if it's still in draft state.
  /// * [collectionMethod] - Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.
  /// * [currency] - The currency to create this invoice in. Defaults to that of `customer` if not specified.
  /// * [customFields] 
  /// * [customer] - The ID of the customer who will be billed.
  /// * [daysUntilDue] - The number of days from when the invoice is created until it is due. Valid only for invoices where `collection_method=send_invoice`.
  /// * [defaultPaymentMethod] - ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.
  /// * [defaultSource] - ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
  /// * [defaultTaxRates] - The tax rates that will apply to any line item that does not have `tax_rates` set.
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
  /// * [discounts] 
  /// * [dueDate] - The date on which payment for this invoice is due. Valid only for invoices where `collection_method=send_invoice`.
  /// * [effectiveAt] - The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [footer] - Footer to be displayed on the invoice.
  /// * [fromInvoice] 
  /// * [issuer] 
  /// * [metadata] 
  /// * [number] - Set the number for this invoice. If no number is present then a number will be assigned automatically when the invoice is finalized. In many markets, regulations require invoices to be unique, sequential and / or gapless. You are responsible for ensuring this is true across all your different invoicing systems in the event that you edit the invoice number using our API. If you use only Stripe for your invoices and do not change invoice numbers, Stripe handles this aspect of compliance for you automatically.
  /// * [onBehalfOf] - The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
  /// * [paymentSettings] 
  /// * [pendingInvoiceItemsBehavior] - How to handle pending invoice items on invoice creation. Defaults to `exclude` if the parameter is omitted.
  /// * [rendering] 
  /// * [shippingCost] 
  /// * [shippingDetails] 
  /// * [statementDescriptor] - Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`.
  /// * [subscription] - The ID of the subscription to invoice, if any. If set, the created invoice will only include pending invoice items for that subscription. The subscription's billing cycle and regular subscription events won't be affected.
  /// * [transferData] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Invoice] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Invoice>> postInvoices({ 
    PostInvoicesRequestAccountTaxIds? accountTaxIds,
    int? applicationFeeAmount,
    bool? autoAdvance,
    AutomaticTaxParam? automaticTax,
    int? automaticallyFinalizesAt,
    String? collectionMethod,
    String? currency,
    PostInvoicesRequestCustomFields? customFields,
    String? customer,
    int? daysUntilDue,
    String? defaultPaymentMethod,
    String? defaultSource,
    BuiltList<String>? defaultTaxRates,
    String? description,
    PostInvoicesRequestDiscounts? discounts,
    int? dueDate,
    int? effectiveAt,
    BuiltList<String>? expand,
    String? footer,
    FromInvoice? fromInvoice,
    Param1? issuer,
    PostAccountsRequestMetadata? metadata,
    String? number,
    String? onBehalfOf,
    PaymentSettings1? paymentSettings,
    String? pendingInvoiceItemsBehavior,
    RenderingParam? rendering,
    ShippingCost? shippingCost,
    RecipientShippingWithOptionalFieldsAddress? shippingDetails,
    String? statementDescriptor,
    String? subscription,
    TransferDataSpecs4? transferData,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (accountTaxIds != null) r'account_tax_ids': encodeQueryParameter(_serializers, accountTaxIds, const FullType(PostInvoicesRequestAccountTaxIds)),
        if (applicationFeeAmount != null) r'application_fee_amount': encodeQueryParameter(_serializers, applicationFeeAmount, const FullType(int)),
        if (autoAdvance != null) r'auto_advance': encodeQueryParameter(_serializers, autoAdvance, const FullType(bool)),
        if (automaticTax != null) r'automatic_tax': encodeQueryParameter(_serializers, automaticTax, const FullType(AutomaticTaxParam)),
        if (automaticallyFinalizesAt != null) r'automatically_finalizes_at': encodeQueryParameter(_serializers, automaticallyFinalizesAt, const FullType(int)),
        if (collectionMethod != null) r'collection_method': encodeQueryParameter(_serializers, collectionMethod, const FullType(String)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (customFields != null) r'custom_fields': encodeQueryParameter(_serializers, customFields, const FullType(PostInvoicesRequestCustomFields)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (daysUntilDue != null) r'days_until_due': encodeQueryParameter(_serializers, daysUntilDue, const FullType(int)),
        if (defaultPaymentMethod != null) r'default_payment_method': encodeQueryParameter(_serializers, defaultPaymentMethod, const FullType(String)),
        if (defaultSource != null) r'default_source': encodeQueryParameter(_serializers, defaultSource, const FullType(String)),
        if (defaultTaxRates != null) r'default_tax_rates': encodeCollectionQueryParameter<String>(_serializers, defaultTaxRates, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (discounts != null) r'discounts': encodeQueryParameter(_serializers, discounts, const FullType(PostInvoicesRequestDiscounts)),
        if (dueDate != null) r'due_date': encodeQueryParameter(_serializers, dueDate, const FullType(int)),
        if (effectiveAt != null) r'effective_at': encodeQueryParameter(_serializers, effectiveAt, const FullType(int)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (footer != null) r'footer': encodeQueryParameter(_serializers, footer, const FullType(String)),
        if (fromInvoice != null) r'from_invoice': encodeQueryParameter(_serializers, fromInvoice, const FullType(FromInvoice)),
        if (issuer != null) r'issuer': encodeQueryParameter(_serializers, issuer, const FullType(Param1)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (number != null) r'number': encodeQueryParameter(_serializers, number, const FullType(String)),
        if (onBehalfOf != null) r'on_behalf_of': encodeQueryParameter(_serializers, onBehalfOf, const FullType(String)),
        if (paymentSettings != null) r'payment_settings': encodeQueryParameter(_serializers, paymentSettings, const FullType(PaymentSettings1)),
        if (pendingInvoiceItemsBehavior != null) r'pending_invoice_items_behavior': encodeQueryParameter(_serializers, pendingInvoiceItemsBehavior, const FullType(String)),
        if (rendering != null) r'rendering': encodeQueryParameter(_serializers, rendering, const FullType(RenderingParam)),
        if (shippingCost != null) r'shipping_cost': encodeQueryParameter(_serializers, shippingCost, const FullType(ShippingCost)),
        if (shippingDetails != null) r'shipping_details': encodeQueryParameter(_serializers, shippingDetails, const FullType(RecipientShippingWithOptionalFieldsAddress)),
        if (statementDescriptor != null) r'statement_descriptor': encodeQueryParameter(_serializers, statementDescriptor, const FullType(String)),
        if (subscription != null) r'subscription': encodeQueryParameter(_serializers, subscription, const FullType(String)),
        if (transferData != null) r'transfer_data': encodeQueryParameter(_serializers, transferData, const FullType(TransferDataSpecs4)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Invoice? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Invoice),
      ) as Invoice;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Invoice>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a preview invoice
  /// &lt;p&gt;At any time, you can preview the upcoming invoice for a subscription or subscription schedule. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.&lt;/p&gt;  &lt;p&gt;You can also preview the effects of creating or updating a subscription or subscription schedule, including a preview of any prorations that will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the &lt;code&gt;subscription_details.proration_date&lt;/code&gt; parameter when doing the actual subscription update.&lt;/p&gt;  &lt;p&gt;The recommended way to get only the prorations being previewed on the invoice is to consider line items where &lt;code&gt;parent.subscription_item_details.proration&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.&lt;/p&gt;  &lt;p&gt;Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. &lt;a href&#x3D;\&quot;https://docs.stripe.com/currencies/conversions\&quot;&gt;Learn more&lt;/a&gt;&lt;/p&gt;
  ///
  /// Parameters:
  /// * [automaticTax] 
  /// * [currency] - The currency to preview this invoice in. Defaults to that of `customer` if not specified.
  /// * [customer] - The identifier of the customer whose upcoming invoice you'd like to retrieve. If `automatic_tax` is enabled then one of `customer`, `customer_details`, `subscription`, or `schedule` must be set.
  /// * [customerDetails] 
  /// * [discounts] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [invoiceItems] - List of invoice items to add or update in the upcoming invoice preview (up to 250).
  /// * [issuer] 
  /// * [onBehalfOf] 
  /// * [previewMode] - Customizes the types of values to include when calculating the invoice. Defaults to `next` if unspecified.
  /// * [schedule] - The identifier of the schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields.
  /// * [scheduleDetails] 
  /// * [subscription] - The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_details.items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_details.items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions.
  /// * [subscriptionDetails] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Invoice] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Invoice>> postInvoicesCreatePreview({ 
    AutomaticTaxParam1? automaticTax,
    String? currency,
    String? customer,
    CustomerDetailsParam? customerDetails,
    PostInvoicesCreatePreviewRequestDiscounts? discounts,
    BuiltList<String>? expand,
    BuiltList<InvoiceItemPreviewParams>? invoiceItems,
    Param1? issuer,
    PostInvoicesCreatePreviewRequestOnBehalfOf? onBehalfOf,
    String? previewMode,
    String? schedule,
    ScheduleDetailsParams? scheduleDetails,
    String? subscription,
    SubscriptionDetailsParams? subscriptionDetails,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices/create_preview';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (automaticTax != null) r'automatic_tax': encodeQueryParameter(_serializers, automaticTax, const FullType(AutomaticTaxParam1)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (customerDetails != null) r'customer_details': encodeQueryParameter(_serializers, customerDetails, const FullType(CustomerDetailsParam)),
        if (discounts != null) r'discounts': encodeQueryParameter(_serializers, discounts, const FullType(PostInvoicesCreatePreviewRequestDiscounts)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (invoiceItems != null) r'invoice_items': encodeCollectionQueryParameter<InvoiceItemPreviewParams>(_serializers, invoiceItems, const FullType(BuiltList, [FullType(InvoiceItemPreviewParams)]), format: ListFormat.csv,),
        if (issuer != null) r'issuer': encodeQueryParameter(_serializers, issuer, const FullType(Param1)),
        if (onBehalfOf != null) r'on_behalf_of': encodeQueryParameter(_serializers, onBehalfOf, const FullType(PostInvoicesCreatePreviewRequestOnBehalfOf)),
        if (previewMode != null) r'preview_mode': encodeQueryParameter(_serializers, previewMode, const FullType(String)),
        if (schedule != null) r'schedule': encodeQueryParameter(_serializers, schedule, const FullType(String)),
        if (scheduleDetails != null) r'schedule_details': encodeQueryParameter(_serializers, scheduleDetails, const FullType(ScheduleDetailsParams)),
        if (subscription != null) r'subscription': encodeQueryParameter(_serializers, subscription, const FullType(String)),
        if (subscriptionDetails != null) r'subscription_details': encodeQueryParameter(_serializers, subscriptionDetails, const FullType(SubscriptionDetailsParams)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Invoice? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Invoice),
      ) as Invoice;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Invoice>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update an invoice
  /// &lt;p&gt;Draft invoices are fully editable. Once an invoice is &lt;a href&#x3D;\&quot;/docs/billing/invoices/workflow#finalized\&quot;&gt;finalized&lt;/a&gt;, monetary values, as well as &lt;code&gt;collection_method&lt;/code&gt;, become uneditable.&lt;/p&gt;  &lt;p&gt;If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on, sending reminders for, or &lt;a href&#x3D;\&quot;/docs/billing/invoices/reconciliation\&quot;&gt;automatically reconciling&lt;/a&gt; invoices, pass &lt;code&gt;auto_advance&#x3D;false&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoice] 
  /// * [accountTaxIds] 
  /// * [applicationFeeAmount] - A fee in cents (or local equivalent) that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees).
  /// * [autoAdvance] - Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice.
  /// * [automaticTax] 
  /// * [automaticallyFinalizesAt] - The time when this invoice should be scheduled to finalize (up to 5 years in the future). The invoice is finalized at this time if it's still in draft state. To turn off automatic finalization, set `auto_advance` to false.
  /// * [collectionMethod] - Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.
  /// * [customFields] 
  /// * [daysUntilDue] - The number of days from which the invoice is created until it is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices.
  /// * [defaultPaymentMethod] - ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.
  /// * [defaultSource] 
  /// * [defaultTaxRates] 
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
  /// * [discounts] 
  /// * [dueDate] - The date on which payment for this invoice is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices.
  /// * [effectiveAt] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [footer] - Footer to be displayed on the invoice.
  /// * [issuer] 
  /// * [metadata] 
  /// * [number] 
  /// * [onBehalfOf] 
  /// * [paymentSettings] 
  /// * [rendering] 
  /// * [shippingCost] 
  /// * [shippingDetails] 
  /// * [statementDescriptor] - Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`.
  /// * [transferData] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Invoice] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Invoice>> postInvoicesInvoice({ 
    required String invoice,
    PostInvoicesRequestAccountTaxIds? accountTaxIds,
    int? applicationFeeAmount,
    bool? autoAdvance,
    AutomaticTaxParam? automaticTax,
    int? automaticallyFinalizesAt,
    String? collectionMethod,
    PostInvoicesInvoiceRequestCustomFields? customFields,
    int? daysUntilDue,
    String? defaultPaymentMethod,
    PostInvoicesInvoiceRequestDefaultSource? defaultSource,
    PostInvoicesInvoiceRequestDefaultTaxRates? defaultTaxRates,
    String? description,
    PostInvoicesInvoiceRequestDiscounts? discounts,
    int? dueDate,
    PostInvoicesInvoiceRequestEffectiveAt? effectiveAt,
    BuiltList<String>? expand,
    String? footer,
    Param1? issuer,
    PostAccountsRequestMetadata? metadata,
    PostInvoicesInvoiceRequestNumber? number,
    PostInvoicesCreatePreviewRequestOnBehalfOf? onBehalfOf,
    PaymentSettings1? paymentSettings,
    RenderingParam? rendering,
    PostInvoicesInvoiceRequestShippingCost? shippingCost,
    PostInvoicesInvoiceRequestShippingDetails? shippingDetails,
    String? statementDescriptor,
    PostInvoicesInvoiceRequestTransferData? transferData,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices/{invoice}'.replaceAll('{' r'invoice' '}', encodeQueryParameter(_serializers, invoice, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (accountTaxIds != null) r'account_tax_ids': encodeQueryParameter(_serializers, accountTaxIds, const FullType(PostInvoicesRequestAccountTaxIds)),
        if (applicationFeeAmount != null) r'application_fee_amount': encodeQueryParameter(_serializers, applicationFeeAmount, const FullType(int)),
        if (autoAdvance != null) r'auto_advance': encodeQueryParameter(_serializers, autoAdvance, const FullType(bool)),
        if (automaticTax != null) r'automatic_tax': encodeQueryParameter(_serializers, automaticTax, const FullType(AutomaticTaxParam)),
        if (automaticallyFinalizesAt != null) r'automatically_finalizes_at': encodeQueryParameter(_serializers, automaticallyFinalizesAt, const FullType(int)),
        if (collectionMethod != null) r'collection_method': encodeQueryParameter(_serializers, collectionMethod, const FullType(String)),
        if (customFields != null) r'custom_fields': encodeQueryParameter(_serializers, customFields, const FullType(PostInvoicesInvoiceRequestCustomFields)),
        if (daysUntilDue != null) r'days_until_due': encodeQueryParameter(_serializers, daysUntilDue, const FullType(int)),
        if (defaultPaymentMethod != null) r'default_payment_method': encodeQueryParameter(_serializers, defaultPaymentMethod, const FullType(String)),
        if (defaultSource != null) r'default_source': encodeQueryParameter(_serializers, defaultSource, const FullType(PostInvoicesInvoiceRequestDefaultSource)),
        if (defaultTaxRates != null) r'default_tax_rates': encodeQueryParameter(_serializers, defaultTaxRates, const FullType(PostInvoicesInvoiceRequestDefaultTaxRates)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (discounts != null) r'discounts': encodeQueryParameter(_serializers, discounts, const FullType(PostInvoicesInvoiceRequestDiscounts)),
        if (dueDate != null) r'due_date': encodeQueryParameter(_serializers, dueDate, const FullType(int)),
        if (effectiveAt != null) r'effective_at': encodeQueryParameter(_serializers, effectiveAt, const FullType(PostInvoicesInvoiceRequestEffectiveAt)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (footer != null) r'footer': encodeQueryParameter(_serializers, footer, const FullType(String)),
        if (issuer != null) r'issuer': encodeQueryParameter(_serializers, issuer, const FullType(Param1)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (number != null) r'number': encodeQueryParameter(_serializers, number, const FullType(PostInvoicesInvoiceRequestNumber)),
        if (onBehalfOf != null) r'on_behalf_of': encodeQueryParameter(_serializers, onBehalfOf, const FullType(PostInvoicesCreatePreviewRequestOnBehalfOf)),
        if (paymentSettings != null) r'payment_settings': encodeQueryParameter(_serializers, paymentSettings, const FullType(PaymentSettings1)),
        if (rendering != null) r'rendering': encodeQueryParameter(_serializers, rendering, const FullType(RenderingParam)),
        if (shippingCost != null) r'shipping_cost': encodeQueryParameter(_serializers, shippingCost, const FullType(PostInvoicesInvoiceRequestShippingCost)),
        if (shippingDetails != null) r'shipping_details': encodeQueryParameter(_serializers, shippingDetails, const FullType(PostInvoicesInvoiceRequestShippingDetails)),
        if (statementDescriptor != null) r'statement_descriptor': encodeQueryParameter(_serializers, statementDescriptor, const FullType(String)),
        if (transferData != null) r'transfer_data': encodeQueryParameter(_serializers, transferData, const FullType(PostInvoicesInvoiceRequestTransferData)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Invoice? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Invoice),
      ) as Invoice;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Invoice>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Bulk add invoice line items
  /// &lt;p&gt;Adds multiple line items to an invoice. This is only possible when an invoice is still a draft.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoice] 
  /// * [lines] - The line items to add.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [invoiceMetadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Invoice] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Invoice>> postInvoicesInvoiceAddLines({ 
    required String invoice,
    required BuiltList<LinesDataParam> lines,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? invoiceMetadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices/{invoice}/add_lines'.replaceAll('{' r'invoice' '}', encodeQueryParameter(_serializers, invoice, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (invoiceMetadata != null) r'invoice_metadata': encodeQueryParameter(_serializers, invoiceMetadata, const FullType(PostAccountsRequestMetadata)),
        r'lines': encodeCollectionQueryParameter<LinesDataParam>(_serializers, lines, const FullType(BuiltList, [FullType(LinesDataParam)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Invoice? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Invoice),
      ) as Invoice;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Invoice>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Attach a payment to an Invoice
  /// &lt;p&gt;Attaches a PaymentIntent or an Out of Band Payment to the invoice, adding it to the list of &lt;code&gt;payments&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;For the PaymentIntent, when the PaymentIntent’s status changes to &lt;code&gt;succeeded&lt;/code&gt;, the payment is credited to the invoice, increasing its &lt;code&gt;amount_paid&lt;/code&gt;. When the invoice is fully paid, the invoice’s status becomes &lt;code&gt;paid&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;If the PaymentIntent’s status is already &lt;code&gt;succeeded&lt;/code&gt; when it’s attached, it’s credited to the invoice immediately.&lt;/p&gt;  &lt;p&gt;See: &lt;a href&#x3D;\&quot;/docs/invoicing/partial-payments\&quot;&gt;Partial payments&lt;/a&gt; to learn more.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoice] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [paymentIntent] - The ID of the PaymentIntent to attach to the invoice.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Invoice] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Invoice>> postInvoicesInvoiceAttachPayment({ 
    required String invoice,
    BuiltList<String>? expand,
    String? paymentIntent,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices/{invoice}/attach_payment'.replaceAll('{' r'invoice' '}', encodeQueryParameter(_serializers, invoice, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (paymentIntent != null) r'payment_intent': encodeQueryParameter(_serializers, paymentIntent, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Invoice? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Invoice),
      ) as Invoice;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Invoice>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Finalize an invoice
  /// &lt;p&gt;Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoice] 
  /// * [autoAdvance] - Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Invoice] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Invoice>> postInvoicesInvoiceFinalize({ 
    required String invoice,
    bool? autoAdvance,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices/{invoice}/finalize'.replaceAll('{' r'invoice' '}', encodeQueryParameter(_serializers, invoice, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (autoAdvance != null) r'auto_advance': encodeQueryParameter(_serializers, autoAdvance, const FullType(bool)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Invoice? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Invoice),
      ) as Invoice;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Invoice>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update an invoice&#39;s line item
  /// &lt;p&gt;Updates an invoice’s line item. Some fields, such as &lt;code&gt;tax_amounts&lt;/code&gt;, only live on the invoice line item, so they can only be updated through this endpoint. Other fields, such as &lt;code&gt;amount&lt;/code&gt;, live on both the invoice item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well. Updating an invoice’s line item is only possible before the invoice is finalized.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoice] - Invoice ID of line item
  /// * [lineItemId] - Invoice line item ID
  /// * [amount] - The integer amount in cents (or local equivalent) of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer's account, pass a negative amount.
  /// * [description] - An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking.
  /// * [discountable] - Controls whether discounts apply to this line item. Defaults to false for prorations or negative line items, and true for all other line items. Cannot be set to true for prorations.
  /// * [discounts] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [period] 
  /// * [priceData] 
  /// * [pricing] 
  /// * [quantity] - Non-negative integer. The quantity of units for the line item.
  /// * [taxAmounts] 
  /// * [taxRates] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [LineItem] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<LineItem>> postInvoicesInvoiceLinesLineItemId({ 
    required String invoice,
    required String lineItemId,
    int? amount,
    String? description,
    bool? discountable,
    PostInvoicesInvoiceLinesLineItemIdRequestDiscounts? discounts,
    BuiltList<String>? expand,
    PostInvoicesInvoiceLinesLineItemIdRequestMetadata? metadata,
    Period? period,
    OneTimePriceDataWithProductData1? priceData,
    PricingParam? pricing,
    int? quantity,
    PostInvoicesInvoiceLinesLineItemIdRequestTaxAmounts? taxAmounts,
    PostInvoicesInvoiceLinesLineItemIdRequestTaxRates? taxRates,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices/{invoice}/lines/{line_item_id}'.replaceAll('{' r'invoice' '}', encodeQueryParameter(_serializers, invoice, const FullType(String)).toString()).replaceAll('{' r'line_item_id' '}', encodeQueryParameter(_serializers, lineItemId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (discountable != null) r'discountable': encodeQueryParameter(_serializers, discountable, const FullType(bool)),
        if (discounts != null) r'discounts': encodeQueryParameter(_serializers, discounts, const FullType(PostInvoicesInvoiceLinesLineItemIdRequestDiscounts)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostInvoicesInvoiceLinesLineItemIdRequestMetadata)),
        if (period != null) r'period': encodeQueryParameter(_serializers, period, const FullType(Period)),
        if (priceData != null) r'price_data': encodeQueryParameter(_serializers, priceData, const FullType(OneTimePriceDataWithProductData1)),
        if (pricing != null) r'pricing': encodeQueryParameter(_serializers, pricing, const FullType(PricingParam)),
        if (quantity != null) r'quantity': encodeQueryParameter(_serializers, quantity, const FullType(int)),
        if (taxAmounts != null) r'tax_amounts': encodeQueryParameter(_serializers, taxAmounts, const FullType(PostInvoicesInvoiceLinesLineItemIdRequestTaxAmounts)),
        if (taxRates != null) r'tax_rates': encodeQueryParameter(_serializers, taxRates, const FullType(PostInvoicesInvoiceLinesLineItemIdRequestTaxRates)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    LineItem? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(LineItem),
      ) as LineItem;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<LineItem>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Mark an invoice as uncollectible
  /// &lt;p&gt;Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoice] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Invoice] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Invoice>> postInvoicesInvoiceMarkUncollectible({ 
    required String invoice,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices/{invoice}/mark_uncollectible'.replaceAll('{' r'invoice' '}', encodeQueryParameter(_serializers, invoice, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Invoice? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Invoice),
      ) as Invoice;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Invoice>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Pay an invoice
  /// &lt;p&gt;Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/billing/automatic\&quot;&gt;subscriptions settings&lt;/a&gt;. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoice] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [forgive] - In cases where the source used to pay the invoice has insufficient funds, passing `forgive=true` controls whether a charge should be attempted for the full amount available on the source, up to the amount to fully pay the invoice. This effectively forgives the difference between the amount available on the source and the amount due.   Passing `forgive=false` will fail the charge if the source hasn't been pre-funded with the right amount. An example for this case is with ACH Credit Transfers and wires: if the amount wired is less than the amount due by a small amount, you might want to forgive the difference. Defaults to `false`.
  /// * [mandate] 
  /// * [offSession] - Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `true` (off-session).
  /// * [paidOutOfBand] - Boolean representing whether an invoice is paid outside of Stripe. This will result in no charge being made. Defaults to `false`.
  /// * [paymentMethod] - A PaymentMethod to be charged. The PaymentMethod must be the ID of a PaymentMethod belonging to the customer associated with the invoice being paid.
  /// * [source_] - A payment source to be charged. The source must be the ID of a source belonging to the customer associated with the invoice being paid.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Invoice] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Invoice>> postInvoicesInvoicePay({ 
    required String invoice,
    BuiltList<String>? expand,
    bool? forgive,
    PostInvoicesInvoicePayRequestMandate? mandate,
    bool? offSession,
    bool? paidOutOfBand,
    String? paymentMethod,
    String? source_,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices/{invoice}/pay'.replaceAll('{' r'invoice' '}', encodeQueryParameter(_serializers, invoice, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (forgive != null) r'forgive': encodeQueryParameter(_serializers, forgive, const FullType(bool)),
        if (mandate != null) r'mandate': encodeQueryParameter(_serializers, mandate, const FullType(PostInvoicesInvoicePayRequestMandate)),
        if (offSession != null) r'off_session': encodeQueryParameter(_serializers, offSession, const FullType(bool)),
        if (paidOutOfBand != null) r'paid_out_of_band': encodeQueryParameter(_serializers, paidOutOfBand, const FullType(bool)),
        if (paymentMethod != null) r'payment_method': encodeQueryParameter(_serializers, paymentMethod, const FullType(String)),
        if (source_ != null) r'source': encodeQueryParameter(_serializers, source_, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Invoice? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Invoice),
      ) as Invoice;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Invoice>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Bulk remove invoice line items
  /// &lt;p&gt;Removes multiple line items from an invoice. This is only possible when an invoice is still a draft.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoice] 
  /// * [lines] - The line items to remove.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [invoiceMetadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Invoice] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Invoice>> postInvoicesInvoiceRemoveLines({ 
    required String invoice,
    required BuiltList<LinesDataParam1> lines,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? invoiceMetadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices/{invoice}/remove_lines'.replaceAll('{' r'invoice' '}', encodeQueryParameter(_serializers, invoice, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (invoiceMetadata != null) r'invoice_metadata': encodeQueryParameter(_serializers, invoiceMetadata, const FullType(PostAccountsRequestMetadata)),
        r'lines': encodeCollectionQueryParameter<LinesDataParam1>(_serializers, lines, const FullType(BuiltList, [FullType(LinesDataParam1)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Invoice? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Invoice),
      ) as Invoice;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Invoice>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Send an invoice for manual payment
  /// &lt;p&gt;Stripe will automatically send invoices to customers according to your &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/billing/automatic\&quot;&gt;subscriptions settings&lt;/a&gt;. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.&lt;/p&gt;  &lt;p&gt;Requests made in test-mode result in no emails being sent, despite sending an &lt;code&gt;invoice.sent&lt;/code&gt; event.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoice] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Invoice] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Invoice>> postInvoicesInvoiceSend({ 
    required String invoice,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices/{invoice}/send'.replaceAll('{' r'invoice' '}', encodeQueryParameter(_serializers, invoice, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Invoice? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Invoice),
      ) as Invoice;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Invoice>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Bulk update invoice line items
  /// &lt;p&gt;Updates multiple line items on an invoice. This is only possible when an invoice is still a draft.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoice] 
  /// * [lines] - The line items to update.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [invoiceMetadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Invoice] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Invoice>> postInvoicesInvoiceUpdateLines({ 
    required String invoice,
    required BuiltList<LinesDataParam2> lines,
    BuiltList<String>? expand,
    PostInvoicesInvoiceLinesLineItemIdRequestMetadata? invoiceMetadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices/{invoice}/update_lines'.replaceAll('{' r'invoice' '}', encodeQueryParameter(_serializers, invoice, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (invoiceMetadata != null) r'invoice_metadata': encodeQueryParameter(_serializers, invoiceMetadata, const FullType(PostInvoicesInvoiceLinesLineItemIdRequestMetadata)),
        r'lines': encodeCollectionQueryParameter<LinesDataParam2>(_serializers, lines, const FullType(BuiltList, [FullType(LinesDataParam2)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Invoice? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Invoice),
      ) as Invoice;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Invoice>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Void an invoice
  /// &lt;p&gt;Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to &lt;a href&#x3D;\&quot;#delete_invoice\&quot;&gt;deletion&lt;/a&gt;, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.&lt;/p&gt;  &lt;p&gt;Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to &lt;a href&#x3D;\&quot;#create_invoice\&quot;&gt;issue another invoice&lt;/a&gt; or &lt;a href&#x3D;\&quot;#create_credit_note\&quot;&gt;credit note&lt;/a&gt; instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [invoice] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Invoice] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Invoice>> postInvoicesInvoiceVoid({ 
    required String invoice,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/invoices/{invoice}/void'.replaceAll('{' r'invoice' '}', encodeQueryParameter(_serializers, invoice, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Invoice? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Invoice),
      ) as Invoice;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Invoice>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update an authorization
  /// &lt;p&gt;Updates the specified Issuing &lt;code&gt;Authorization&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingAuthorization] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingAuthorization>> postIssuingAuthorizationsAuthorization({ 
    required String authorization,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/authorizations/{authorization}'.replaceAll('{' r'authorization' '}', encodeQueryParameter(_serializers, authorization, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingAuthorization? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingAuthorization),
      ) as IssuingAuthorization;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingAuthorization>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Approve an authorization
  /// &lt;p&gt;[Deprecated] Approves a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real-time authorization&lt;/a&gt; flow.  This method is deprecated. Instead, &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations#authorization-handling\&quot;&gt;respond directly to the webhook request to approve an authorization&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [amount] - If the authorization's `pending_request.is_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://stripe.com/docs/api/issuing/authorizations/decline) to decline an authorization request).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingAuthorization] as data
  /// Throws [DioException] if API call or serialization fails
  @Deprecated('This operation has been deprecated')
  Future<Response<IssuingAuthorization>> postIssuingAuthorizationsAuthorizationApprove({ 
    required String authorization,
    int? amount,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/authorizations/{authorization}/approve'.replaceAll('{' r'authorization' '}', encodeQueryParameter(_serializers, authorization, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingAuthorization? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingAuthorization),
      ) as IssuingAuthorization;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingAuthorization>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Decline an authorization
  /// &lt;p&gt;[Deprecated] Declines a pending Issuing &lt;code&gt;Authorization&lt;/code&gt; object. This request should be made within the timeout window of the &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations\&quot;&gt;real time authorization&lt;/a&gt; flow. This method is deprecated. Instead, &lt;a href&#x3D;\&quot;/docs/issuing/controls/real-time-authorizations#authorization-handling\&quot;&gt;respond directly to the webhook request to decline an authorization&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingAuthorization] as data
  /// Throws [DioException] if API call or serialization fails
  @Deprecated('This operation has been deprecated')
  Future<Response<IssuingAuthorization>> postIssuingAuthorizationsAuthorizationDecline({ 
    required String authorization,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/authorizations/{authorization}/decline'.replaceAll('{' r'authorization' '}', encodeQueryParameter(_serializers, authorization, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingAuthorization? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingAuthorization),
      ) as IssuingAuthorization;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingAuthorization>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a cardholder
  /// &lt;p&gt;Creates a new Issuing &lt;code&gt;Cardholder&lt;/code&gt; object that can be issued cards.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [billing] 
  /// * [name] - The cardholder's name. This will be printed on cards issued to them. The maximum length of this field is 24 characters. This field cannot contain any special characters or numbers.
  /// * [company] 
  /// * [email] - The cardholder's email address.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [individual] 
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [phoneNumber] - The cardholder's phone number. This will be transformed to [E.164](https://en.wikipedia.org/wiki/E.164) if it is not provided in that format already. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details.
  /// * [preferredLocales] - The cardholder’s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.  This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder.
  /// * [spendingControls] 
  /// * [status] - Specifies whether to permit authorizations on this cardholder's cards. Defaults to `active`.
  /// * [type] - One of `individual` or `company`. See [Choose a cardholder type](https://stripe.com/docs/issuing/other/choose-cardholder) for more details.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingCardholder] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingCardholder>> postIssuingCardholders({ 
    required BillingSpecs billing,
    required String name,
    CompanyParam? company,
    String? email,
    BuiltList<String>? expand,
    IndividualParam? individual,
    BuiltMap<String, String>? metadata,
    String? phoneNumber,
    BuiltList<String>? preferredLocales,
    AuthorizationControlsParamV2? spendingControls,
    String? status,
    String? type,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/cardholders';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'billing': encodeQueryParameter(_serializers, billing, const FullType(BillingSpecs)),
        if (company != null) r'company': encodeQueryParameter(_serializers, company, const FullType(CompanyParam)),
        if (email != null) r'email': encodeQueryParameter(_serializers, email, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (individual != null) r'individual': encodeQueryParameter(_serializers, individual, const FullType(IndividualParam)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        if (phoneNumber != null) r'phone_number': encodeQueryParameter(_serializers, phoneNumber, const FullType(String)),
        if (preferredLocales != null) r'preferred_locales': encodeCollectionQueryParameter<String>(_serializers, preferredLocales, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (spendingControls != null) r'spending_controls': encodeQueryParameter(_serializers, spendingControls, const FullType(AuthorizationControlsParamV2)),
        if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
        if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingCardholder? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingCardholder),
      ) as IssuingCardholder;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingCardholder>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a cardholder
  /// &lt;p&gt;Updates the specified Issuing &lt;code&gt;Cardholder&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [cardholder] 
  /// * [billing] 
  /// * [company] 
  /// * [email] - The cardholder's email address.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [individual] 
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [phoneNumber] - The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure) for more details.
  /// * [preferredLocales] - The cardholder’s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.  This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder.
  /// * [spendingControls] 
  /// * [status] - Specifies whether to permit authorizations on this cardholder's cards.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingCardholder] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingCardholder>> postIssuingCardholdersCardholder({ 
    required String cardholder,
    BillingSpecs? billing,
    CompanyParam? company,
    String? email,
    BuiltList<String>? expand,
    IndividualParam? individual,
    BuiltMap<String, String>? metadata,
    String? phoneNumber,
    BuiltList<String>? preferredLocales,
    AuthorizationControlsParamV2? spendingControls,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/cardholders/{cardholder}'.replaceAll('{' r'cardholder' '}', encodeQueryParameter(_serializers, cardholder, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (billing != null) r'billing': encodeQueryParameter(_serializers, billing, const FullType(BillingSpecs)),
        if (company != null) r'company': encodeQueryParameter(_serializers, company, const FullType(CompanyParam)),
        if (email != null) r'email': encodeQueryParameter(_serializers, email, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (individual != null) r'individual': encodeQueryParameter(_serializers, individual, const FullType(IndividualParam)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (phoneNumber != null) r'phone_number': encodeQueryParameter(_serializers, phoneNumber, const FullType(String)),
        if (preferredLocales != null) r'preferred_locales': encodeCollectionQueryParameter<String>(_serializers, preferredLocales, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (spendingControls != null) r'spending_controls': encodeQueryParameter(_serializers, spendingControls, const FullType(AuthorizationControlsParamV2)),
        if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingCardholder? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingCardholder),
      ) as IssuingCardholder;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingCardholder>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a card
  /// &lt;p&gt;Creates an Issuing &lt;code&gt;Card&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [currency] - The currency for the card.
  /// * [type] - The type of card to issue. Possible values are `physical` or `virtual`.
  /// * [cardholder] - The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object with which the card will be associated.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [financialAccount] - The new financial account ID the card will be associated with. This field allows a card to be reassigned to a different financial account.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [personalizationDesign] - The personalization design object belonging to this card.
  /// * [pin] 
  /// * [replacementFor] - The card this is meant to be a replacement for (if any).
  /// * [replacementReason] - If `replacement_for` is specified, this should indicate why that card is being replaced.
  /// * [secondLine] 
  /// * [shipping] 
  /// * [spendingControls] 
  /// * [status] - Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingCard] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingCard>> postIssuingCards({ 
    required String currency,
    required String type,
    String? cardholder,
    BuiltList<String>? expand,
    String? financialAccount,
    BuiltMap<String, String>? metadata,
    String? personalizationDesign,
    EncryptedPinParam? pin,
    String? replacementFor,
    String? replacementReason,
    PostIssuingCardsRequestSecondLine? secondLine,
    ShippingSpecs? shipping,
    AuthorizationControlsParam? spendingControls,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/cards';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (cardholder != null) r'cardholder': encodeQueryParameter(_serializers, cardholder, const FullType(String)),
        r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (financialAccount != null) r'financial_account': encodeQueryParameter(_serializers, financialAccount, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (personalizationDesign != null) r'personalization_design': encodeQueryParameter(_serializers, personalizationDesign, const FullType(String)),
        if (pin != null) r'pin': encodeQueryParameter(_serializers, pin, const FullType(EncryptedPinParam)),
        if (replacementFor != null) r'replacement_for': encodeQueryParameter(_serializers, replacementFor, const FullType(String)),
        if (replacementReason != null) r'replacement_reason': encodeQueryParameter(_serializers, replacementReason, const FullType(String)),
        if (secondLine != null) r'second_line': encodeQueryParameter(_serializers, secondLine, const FullType(PostIssuingCardsRequestSecondLine)),
        if (shipping != null) r'shipping': encodeQueryParameter(_serializers, shipping, const FullType(ShippingSpecs)),
        if (spendingControls != null) r'spending_controls': encodeQueryParameter(_serializers, spendingControls, const FullType(AuthorizationControlsParam)),
        if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
        r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingCard? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingCard),
      ) as IssuingCard;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingCard>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a card
  /// &lt;p&gt;Updates the specified Issuing &lt;code&gt;Card&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [card] 
  /// * [cancellationReason] - Reason why the `status` of this card is `canceled`.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [personalizationDesign] 
  /// * [pin] 
  /// * [shipping] 
  /// * [spendingControls] 
  /// * [status] - Dictates whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`. If this card is being canceled because it was lost or stolen, this information should be provided as `cancellation_reason`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingCard] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingCard>> postIssuingCardsCard({ 
    required String card,
    String? cancellationReason,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    String? personalizationDesign,
    EncryptedPinParam1? pin,
    ShippingSpecs1? shipping,
    AuthorizationControlsParam? spendingControls,
    String? status,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/cards/{card}'.replaceAll('{' r'card' '}', encodeQueryParameter(_serializers, card, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (cancellationReason != null) r'cancellation_reason': encodeQueryParameter(_serializers, cancellationReason, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (personalizationDesign != null) r'personalization_design': encodeQueryParameter(_serializers, personalizationDesign, const FullType(String)),
        if (pin != null) r'pin': encodeQueryParameter(_serializers, pin, const FullType(EncryptedPinParam1)),
        if (shipping != null) r'shipping': encodeQueryParameter(_serializers, shipping, const FullType(ShippingSpecs1)),
        if (spendingControls != null) r'spending_controls': encodeQueryParameter(_serializers, spendingControls, const FullType(AuthorizationControlsParam)),
        if (status != null) r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingCard? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingCard),
      ) as IssuingCard;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingCard>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a dispute
  /// &lt;p&gt;Creates an Issuing &lt;code&gt;Dispute&lt;/code&gt; object. Individual pieces of evidence within the &lt;code&gt;evidence&lt;/code&gt; object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt; for more details about evidence requirements.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [amount] - The dispute amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If not set, defaults to the full transaction amount.
  /// * [evidence] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [transaction] - The ID of the issuing transaction to create a dispute for. For transaction on Treasury FinancialAccounts, use `treasury.received_debit`.
  /// * [treasury] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingDispute] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingDispute>> postIssuingDisputes({ 
    int? amount,
    EvidenceParam? evidence,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    String? transaction,
    TreasuryParam? treasury,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/disputes';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (evidence != null) r'evidence': encodeQueryParameter(_serializers, evidence, const FullType(EvidenceParam)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (transaction != null) r'transaction': encodeQueryParameter(_serializers, transaction, const FullType(String)),
        if (treasury != null) r'treasury': encodeQueryParameter(_serializers, treasury, const FullType(TreasuryParam)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingDispute? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingDispute),
      ) as IssuingDispute;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingDispute>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a dispute
  /// &lt;p&gt;Updates the specified Issuing &lt;code&gt;Dispute&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the &lt;code&gt;evidence&lt;/code&gt; object can be unset by passing in an empty string.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [dispute] 
  /// * [amount] - The dispute amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  /// * [evidence] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingDispute] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingDispute>> postIssuingDisputesDispute({ 
    required String dispute,
    int? amount,
    EvidenceParam? evidence,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/disputes/{dispute}'.replaceAll('{' r'dispute' '}', encodeQueryParameter(_serializers, dispute, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (evidence != null) r'evidence': encodeQueryParameter(_serializers, evidence, const FullType(EvidenceParam)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingDispute? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingDispute),
      ) as IssuingDispute;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingDispute>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Submit a dispute
  /// &lt;p&gt;Submits an Issuing &lt;code&gt;Dispute&lt;/code&gt; to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see &lt;a href&#x3D;\&quot;/docs/issuing/purchases/disputes#dispute-reasons-and-evidence\&quot;&gt;Dispute reasons and evidence&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [dispute] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingDispute] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingDispute>> postIssuingDisputesDisputeSubmit({ 
    required String dispute,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/disputes/{dispute}/submit'.replaceAll('{' r'dispute' '}', encodeQueryParameter(_serializers, dispute, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingDispute? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingDispute),
      ) as IssuingDispute;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingDispute>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a personalization design
  /// &lt;p&gt;Creates a personalization design object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [physicalBundle] - The physical bundle object belonging to this personalization design.
  /// * [cardLogo] - The file for the card logo, for use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.
  /// * [carrierText] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [lookupKey] - A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [name] - Friendly display name.
  /// * [preferences] 
  /// * [transferLookupKey] - If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingPersonalizationDesign] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingPersonalizationDesign>> postIssuingPersonalizationDesigns({ 
    required String physicalBundle,
    String? cardLogo,
    CarrierTextParam? carrierText,
    BuiltList<String>? expand,
    String? lookupKey,
    BuiltMap<String, String>? metadata,
    String? name,
    PreferencesParam? preferences,
    bool? transferLookupKey,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/personalization_designs';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (cardLogo != null) r'card_logo': encodeQueryParameter(_serializers, cardLogo, const FullType(String)),
        if (carrierText != null) r'carrier_text': encodeQueryParameter(_serializers, carrierText, const FullType(CarrierTextParam)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (lookupKey != null) r'lookup_key': encodeQueryParameter(_serializers, lookupKey, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        r'physical_bundle': encodeQueryParameter(_serializers, physicalBundle, const FullType(String)),
        if (preferences != null) r'preferences': encodeQueryParameter(_serializers, preferences, const FullType(PreferencesParam)),
        if (transferLookupKey != null) r'transfer_lookup_key': encodeQueryParameter(_serializers, transferLookupKey, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingPersonalizationDesign? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingPersonalizationDesign),
      ) as IssuingPersonalizationDesign;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingPersonalizationDesign>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a personalization design
  /// &lt;p&gt;Updates a card personalization object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [personalizationDesign] 
  /// * [cardLogo] 
  /// * [carrierText] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [lookupKey] 
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [name] 
  /// * [physicalBundle] - The physical bundle object belonging to this personalization design.
  /// * [preferences] 
  /// * [transferLookupKey] - If set to true, will atomically remove the lookup key from the existing personalization design, and assign it to this personalization design.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingPersonalizationDesign] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingPersonalizationDesign>> postIssuingPersonalizationDesignsPersonalizationDesign({ 
    required String personalizationDesign,
    PostIssuingPersonalizationDesignsPersonalizationDesignRequestCardLogo? cardLogo,
    PostIssuingPersonalizationDesignsPersonalizationDesignRequestCarrierText? carrierText,
    BuiltList<String>? expand,
    PostIssuingPersonalizationDesignsPersonalizationDesignRequestLookupKey? lookupKey,
    BuiltMap<String, String>? metadata,
    PostIssuingPersonalizationDesignsPersonalizationDesignRequestName? name,
    String? physicalBundle,
    PreferencesParam? preferences,
    bool? transferLookupKey,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/personalization_designs/{personalization_design}'.replaceAll('{' r'personalization_design' '}', encodeQueryParameter(_serializers, personalizationDesign, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (cardLogo != null) r'card_logo': encodeQueryParameter(_serializers, cardLogo, const FullType(PostIssuingPersonalizationDesignsPersonalizationDesignRequestCardLogo)),
        if (carrierText != null) r'carrier_text': encodeQueryParameter(_serializers, carrierText, const FullType(PostIssuingPersonalizationDesignsPersonalizationDesignRequestCarrierText)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (lookupKey != null) r'lookup_key': encodeQueryParameter(_serializers, lookupKey, const FullType(PostIssuingPersonalizationDesignsPersonalizationDesignRequestLookupKey)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(PostIssuingPersonalizationDesignsPersonalizationDesignRequestName)),
        if (physicalBundle != null) r'physical_bundle': encodeQueryParameter(_serializers, physicalBundle, const FullType(String)),
        if (preferences != null) r'preferences': encodeQueryParameter(_serializers, preferences, const FullType(PreferencesParam)),
        if (transferLookupKey != null) r'transfer_lookup_key': encodeQueryParameter(_serializers, transferLookupKey, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingPersonalizationDesign? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingPersonalizationDesign),
      ) as IssuingPersonalizationDesign;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingPersonalizationDesign>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a settlement
  /// &lt;p&gt;Updates the specified Issuing &lt;code&gt;Settlement&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [settlement] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingSettlement] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingSettlement>> postIssuingSettlementsSettlement({ 
    required String settlement,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/settlements/{settlement}'.replaceAll('{' r'settlement' '}', encodeQueryParameter(_serializers, settlement, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingSettlement? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingSettlement),
      ) as IssuingSettlement;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingSettlement>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a token status
  /// &lt;p&gt;Attempts to update the specified Issuing &lt;code&gt;Token&lt;/code&gt; object to the status specified.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [token] 
  /// * [status] - Specifies which status the token should be updated to.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingToken] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingToken>> postIssuingTokensToken({ 
    required String token,
    required String status,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/tokens/{token}'.replaceAll('{' r'token' '}', encodeQueryParameter(_serializers, token, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'status': encodeQueryParameter(_serializers, status, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingToken? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingToken),
      ) as IssuingToken;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingToken>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a transaction
  /// &lt;p&gt;Updates the specified Issuing &lt;code&gt;Transaction&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [transaction] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingTransaction>> postIssuingTransactionsTransaction({ 
    required String transaction,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/issuing/transactions/{transaction}'.replaceAll('{' r'transaction' '}', encodeQueryParameter(_serializers, transaction, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingTransaction),
      ) as IssuingTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a Session
  /// &lt;p&gt;To launch the Financial Connections authorization flow, create a &lt;code&gt;Session&lt;/code&gt;. The session’s &lt;code&gt;client_secret&lt;/code&gt; can be used to launch the flow using Stripe.js.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [accountHolder] 
  /// * [permissions] - List of data features that you would like to request access to.  Possible values are `balances`, `transactions`, `ownership`, and `payment_method`.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [filters] 
  /// * [prefetch] - List of data features that you would like to retrieve upon account creation.
  /// * [returnUrl] - For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FinancialConnectionsSession] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FinancialConnectionsSession>> postLinkAccountSessions({ 
    required AccountholderParams1 accountHolder,
    required BuiltList<String> permissions,
    BuiltList<String>? expand,
    FiltersParams? filters,
    BuiltList<String>? prefetch,
    String? returnUrl,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/link_account_sessions';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'account_holder': encodeQueryParameter(_serializers, accountHolder, const FullType(AccountholderParams1)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (filters != null) r'filters': encodeQueryParameter(_serializers, filters, const FullType(FiltersParams)),
        r'permissions': encodeCollectionQueryParameter<String>(_serializers, permissions, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (prefetch != null) r'prefetch': encodeCollectionQueryParameter<String>(_serializers, prefetch, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (returnUrl != null) r'return_url': encodeQueryParameter(_serializers, returnUrl, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FinancialConnectionsSession? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FinancialConnectionsSession),
      ) as FinancialConnectionsSession;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FinancialConnectionsSession>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Disconnect an Account
  /// &lt;p&gt;Disables your access to a Financial Connections &lt;code&gt;Account&lt;/code&gt;. You will no longer be able to access data associated with the account (e.g. balances, transactions).&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FinancialConnectionsAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FinancialConnectionsAccount>> postLinkedAccountsAccountDisconnect({ 
    required String account,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/linked_accounts/{account}/disconnect'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FinancialConnectionsAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FinancialConnectionsAccount),
      ) as FinancialConnectionsAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FinancialConnectionsAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Refresh Account data
  /// &lt;p&gt;Refreshes the data associated with a Financial Connections &lt;code&gt;Account&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [features] - The list of account features that you would like to refresh.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [FinancialConnectionsAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<FinancialConnectionsAccount>> postLinkedAccountsAccountRefresh({ 
    required String account,
    required BuiltList<String> features,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/linked_accounts/{account}/refresh'.replaceAll('{' r'account' '}', encodeQueryParameter(_serializers, account, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'features': encodeCollectionQueryParameter<String>(_serializers, features, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    FinancialConnectionsAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(FinancialConnectionsAccount),
      ) as FinancialConnectionsAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<FinancialConnectionsAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a PaymentIntent
  /// &lt;p&gt;Creates a PaymentIntent object.&lt;/p&gt;  &lt;p&gt;After the PaymentIntent is created, attach a payment method and &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm&lt;/a&gt; to continue the payment. Learn more about &lt;a href&#x3D;\&quot;/docs/payments/payment-intents\&quot;&gt;the available payment flows with the Payment Intents API&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;When you use &lt;code&gt;confirm&#x3D;true&lt;/code&gt; during creation, it’s equivalent to creating and confirming the PaymentIntent in the same call. You can use any parameters available in the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; when you supply &lt;code&gt;confirm&#x3D;true&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [amount] - Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [applicationFeeAmount] - The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total amount captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  /// * [automaticPaymentMethods] 
  /// * [captureMethod] - Controls when the funds will be captured from the customer's account.
  /// * [confirm] - Set to `true` to attempt to [confirm this PaymentIntent](https://stripe.com/docs/api/payment_intents/confirm) immediately. This parameter defaults to `false`. When creating and confirming a PaymentIntent at the same time, you can also provide the parameters available in the [Confirm API](https://stripe.com/docs/api/payment_intents/confirm).
  /// * [confirmationMethod] - Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
  /// * [confirmationToken] - ID of the ConfirmationToken used to confirm this PaymentIntent.  If the provided ConfirmationToken contains properties that are also being provided in this request, such as `payment_method`, then the values in this request will take precedence.
  /// * [customer] - ID of the Customer this PaymentIntent belongs to, if one exists.  Payment methods attached to other Customers cannot be used with this PaymentIntent.  If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead.
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
  /// * [errorOnRequiresAction] - Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. Use this parameter for simpler integrations that don't handle customer actions, such as [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [mandate] - ID of the mandate that's used for this payment. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
  /// * [mandateData] 
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [offSession] 
  /// * [onBehalfOf] - The Stripe account ID that these funds are intended for. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  /// * [paymentMethod] - ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.  If you omit this parameter with `confirm=true`, `customer.default_source` attaches as this PaymentIntent's payment instrument to improve migration for users of the Charges API. We recommend that you explicitly provide the `payment_method` moving forward. If the payment method is attached to a Customer, you must also provide the ID of that Customer as the [customer](https://stripe.com/docs/api#create_payment_intent-customer) parameter of this PaymentIntent.
  /// * [paymentMethodConfiguration] - The ID of the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) to use with this PaymentIntent.
  /// * [paymentMethodData] 
  /// * [paymentMethodOptions] 
  /// * [paymentMethodTypes] - The list of payment method types (for example, a card) that this PaymentIntent can use. If you don't provide this, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods). A list of valid payment method types can be found [here](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).
  /// * [radarOptions] 
  /// * [receiptEmail] - Email address to send the receipt to. If you specify `receipt_email` for a payment in live mode, you send a receipt regardless of your [email settings](https://dashboard.stripe.com/account/emails).
  /// * [returnUrl] - The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
  /// * [setupFutureUsage] - Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  /// * [shipping] 
  /// * [statementDescriptor] - Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
  /// * [statementDescriptorSuffix] - Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
  /// * [transferData] 
  /// * [transferGroup] - A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers).
  /// * [useStripeSdk] - Set to `true` when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentIntent] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentIntent>> postPaymentIntents({ 
    required int amount,
    required String currency,
    int? applicationFeeAmount,
    AutomaticPaymentMethodsParam? automaticPaymentMethods,
    String? captureMethod,
    bool? confirm,
    String? confirmationMethod,
    String? confirmationToken,
    String? customer,
    String? description,
    bool? errorOnRequiresAction,
    BuiltList<String>? expand,
    String? mandate,
    PostPaymentIntentsRequestMandateData? mandateData,
    BuiltMap<String, String>? metadata,
    PostPaymentIntentsRequestOffSession? offSession,
    String? onBehalfOf,
    String? paymentMethod,
    String? paymentMethodConfiguration,
    PaymentMethodDataParams? paymentMethodData,
    PaymentMethodOptionsParam19? paymentMethodOptions,
    BuiltList<String>? paymentMethodTypes,
    RadarOptionsWithHiddenOptions2? radarOptions,
    String? receiptEmail,
    String? returnUrl,
    String? setupFutureUsage,
    OptionalFieldsShipping1? shipping,
    String? statementDescriptor,
    String? statementDescriptorSuffix,
    TransferDataCreationParams? transferData,
    String? transferGroup,
    bool? useStripeSdk,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_intents';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (applicationFeeAmount != null) r'application_fee_amount': encodeQueryParameter(_serializers, applicationFeeAmount, const FullType(int)),
        if (automaticPaymentMethods != null) r'automatic_payment_methods': encodeQueryParameter(_serializers, automaticPaymentMethods, const FullType(AutomaticPaymentMethodsParam)),
        if (captureMethod != null) r'capture_method': encodeQueryParameter(_serializers, captureMethod, const FullType(String)),
        if (confirm != null) r'confirm': encodeQueryParameter(_serializers, confirm, const FullType(bool)),
        if (confirmationMethod != null) r'confirmation_method': encodeQueryParameter(_serializers, confirmationMethod, const FullType(String)),
        if (confirmationToken != null) r'confirmation_token': encodeQueryParameter(_serializers, confirmationToken, const FullType(String)),
        r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (errorOnRequiresAction != null) r'error_on_requires_action': encodeQueryParameter(_serializers, errorOnRequiresAction, const FullType(bool)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (mandate != null) r'mandate': encodeQueryParameter(_serializers, mandate, const FullType(String)),
        if (mandateData != null) r'mandate_data': encodeQueryParameter(_serializers, mandateData, const FullType(PostPaymentIntentsRequestMandateData)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (offSession != null) r'off_session': encodeQueryParameter(_serializers, offSession, const FullType(PostPaymentIntentsRequestOffSession)),
        if (onBehalfOf != null) r'on_behalf_of': encodeQueryParameter(_serializers, onBehalfOf, const FullType(String)),
        if (paymentMethod != null) r'payment_method': encodeQueryParameter(_serializers, paymentMethod, const FullType(String)),
        if (paymentMethodConfiguration != null) r'payment_method_configuration': encodeQueryParameter(_serializers, paymentMethodConfiguration, const FullType(String)),
        if (paymentMethodData != null) r'payment_method_data': encodeQueryParameter(_serializers, paymentMethodData, const FullType(PaymentMethodDataParams)),
        if (paymentMethodOptions != null) r'payment_method_options': encodeQueryParameter(_serializers, paymentMethodOptions, const FullType(PaymentMethodOptionsParam19)),
        if (paymentMethodTypes != null) r'payment_method_types': encodeCollectionQueryParameter<String>(_serializers, paymentMethodTypes, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (radarOptions != null) r'radar_options': encodeQueryParameter(_serializers, radarOptions, const FullType(RadarOptionsWithHiddenOptions2)),
        if (receiptEmail != null) r'receipt_email': encodeQueryParameter(_serializers, receiptEmail, const FullType(String)),
        if (returnUrl != null) r'return_url': encodeQueryParameter(_serializers, returnUrl, const FullType(String)),
        if (setupFutureUsage != null) r'setup_future_usage': encodeQueryParameter(_serializers, setupFutureUsage, const FullType(String)),
        if (shipping != null) r'shipping': encodeQueryParameter(_serializers, shipping, const FullType(OptionalFieldsShipping1)),
        if (statementDescriptor != null) r'statement_descriptor': encodeQueryParameter(_serializers, statementDescriptor, const FullType(String)),
        if (statementDescriptorSuffix != null) r'statement_descriptor_suffix': encodeQueryParameter(_serializers, statementDescriptorSuffix, const FullType(String)),
        if (transferData != null) r'transfer_data': encodeQueryParameter(_serializers, transferData, const FullType(TransferDataCreationParams)),
        if (transferGroup != null) r'transfer_group': encodeQueryParameter(_serializers, transferGroup, const FullType(String)),
        if (useStripeSdk != null) r'use_stripe_sdk': encodeQueryParameter(_serializers, useStripeSdk, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentIntent? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentIntent),
      ) as PaymentIntent;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentIntent>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a PaymentIntent
  /// &lt;p&gt;Updates properties on a PaymentIntent object without confirming.&lt;/p&gt;  &lt;p&gt;Depending on which properties you update, you might need to confirm the PaymentIntent again. For example, updating the &lt;code&gt;payment_method&lt;/code&gt; always requires you to confirm the PaymentIntent again. If you prefer to update and confirm at the same time, we recommend updating properties through the &lt;a href&#x3D;\&quot;/docs/api/payment_intents/confirm\&quot;&gt;confirm API&lt;/a&gt; instead.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [intent] 
  /// * [amount] - Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  /// * [applicationFeeAmount] 
  /// * [captureMethod] - Controls when the funds will be captured from the customer's account.
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [customer] - ID of the Customer this PaymentIntent belongs to, if one exists.  Payment methods attached to other Customers cannot be used with this PaymentIntent.  If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead.
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [paymentMethod] - ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent. To unset this field to null, pass in an empty string.
  /// * [paymentMethodConfiguration] - The ID of the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) to use with this PaymentIntent.
  /// * [paymentMethodData] 
  /// * [paymentMethodOptions] 
  /// * [paymentMethodTypes] - The list of payment method types (for example, card) that this PaymentIntent can use. Use `automatic_payment_methods` to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods). A list of valid payment method types can be found [here](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).
  /// * [receiptEmail] 
  /// * [setupFutureUsage] - Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).  If you've already set `setup_future_usage` and you're performing a request using a publishable key, you can only update the value from `on_session` to `off_session`.
  /// * [shipping] 
  /// * [statementDescriptor] - Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
  /// * [statementDescriptorSuffix] - Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
  /// * [transferData] 
  /// * [transferGroup] - A string that identifies the resulting payment as part of a group. You can only provide `transfer_group` if it hasn't been set. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentIntent] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentIntent>> postPaymentIntentsIntent({ 
    required String intent,
    int? amount,
    PostPaymentIntentsIntentRequestApplicationFeeAmount? applicationFeeAmount,
    String? captureMethod,
    String? currency,
    String? customer,
    String? description,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    String? paymentMethod,
    String? paymentMethodConfiguration,
    PaymentMethodDataParams? paymentMethodData,
    PaymentMethodOptionsParam35? paymentMethodOptions,
    BuiltList<String>? paymentMethodTypes,
    PostPaymentIntentsIntentRequestReceiptEmail? receiptEmail,
    String? setupFutureUsage,
    PostPaymentIntentsIntentRequestShipping? shipping,
    String? statementDescriptor,
    String? statementDescriptorSuffix,
    TransferDataUpdateParams? transferData,
    String? transferGroup,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_intents/{intent}'.replaceAll('{' r'intent' '}', encodeQueryParameter(_serializers, intent, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (applicationFeeAmount != null) r'application_fee_amount': encodeQueryParameter(_serializers, applicationFeeAmount, const FullType(PostPaymentIntentsIntentRequestApplicationFeeAmount)),
        if (captureMethod != null) r'capture_method': encodeQueryParameter(_serializers, captureMethod, const FullType(String)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (paymentMethod != null) r'payment_method': encodeQueryParameter(_serializers, paymentMethod, const FullType(String)),
        if (paymentMethodConfiguration != null) r'payment_method_configuration': encodeQueryParameter(_serializers, paymentMethodConfiguration, const FullType(String)),
        if (paymentMethodData != null) r'payment_method_data': encodeQueryParameter(_serializers, paymentMethodData, const FullType(PaymentMethodDataParams)),
        if (paymentMethodOptions != null) r'payment_method_options': encodeQueryParameter(_serializers, paymentMethodOptions, const FullType(PaymentMethodOptionsParam35)),
        if (paymentMethodTypes != null) r'payment_method_types': encodeCollectionQueryParameter<String>(_serializers, paymentMethodTypes, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (receiptEmail != null) r'receipt_email': encodeQueryParameter(_serializers, receiptEmail, const FullType(PostPaymentIntentsIntentRequestReceiptEmail)),
        if (setupFutureUsage != null) r'setup_future_usage': encodeQueryParameter(_serializers, setupFutureUsage, const FullType(String)),
        if (shipping != null) r'shipping': encodeQueryParameter(_serializers, shipping, const FullType(PostPaymentIntentsIntentRequestShipping)),
        if (statementDescriptor != null) r'statement_descriptor': encodeQueryParameter(_serializers, statementDescriptor, const FullType(String)),
        if (statementDescriptorSuffix != null) r'statement_descriptor_suffix': encodeQueryParameter(_serializers, statementDescriptorSuffix, const FullType(String)),
        if (transferData != null) r'transfer_data': encodeQueryParameter(_serializers, transferData, const FullType(TransferDataUpdateParams)),
        if (transferGroup != null) r'transfer_group': encodeQueryParameter(_serializers, transferGroup, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentIntent? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentIntent),
      ) as PaymentIntent;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentIntent>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Reconcile a customer_balance PaymentIntent
  /// &lt;p&gt;Manually reconcile the remaining amount for a &lt;code&gt;customer_balance&lt;/code&gt; PaymentIntent.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [intent] 
  /// * [amount] - Amount that you intend to apply to this PaymentIntent from the customer’s cash balance. If the PaymentIntent was created by an Invoice, the full amount of the PaymentIntent is applied regardless of this parameter.  A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (for example, 100 cents to charge 1 USD or 100 to charge 100 JPY, a zero-decimal currency). The maximum amount is the amount of the PaymentIntent.  When you omit the amount, it defaults to the remaining amount requested on the PaymentIntent.
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentIntent] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentIntent>> postPaymentIntentsIntentApplyCustomerBalance({ 
    required String intent,
    int? amount,
    String? currency,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_intents/{intent}/apply_customer_balance'.replaceAll('{' r'intent' '}', encodeQueryParameter(_serializers, intent, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentIntent? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentIntent),
      ) as PaymentIntent;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentIntent>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Cancel a PaymentIntent
  /// &lt;p&gt;You can cancel a PaymentIntent object when it’s in one of these statuses: &lt;code&gt;requires_payment_method&lt;/code&gt;, &lt;code&gt;requires_capture&lt;/code&gt;, &lt;code&gt;requires_confirmation&lt;/code&gt;, &lt;code&gt;requires_action&lt;/code&gt; or, &lt;a href&#x3D;\&quot;/docs/payments/intents\&quot;&gt;in rare cases&lt;/a&gt;, &lt;code&gt;processing&lt;/code&gt;. &lt;/p&gt;  &lt;p&gt;After it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a &lt;code&gt;status&lt;/code&gt; of &lt;code&gt;requires_capture&lt;/code&gt;, the remaining &lt;code&gt;amount_capturable&lt;/code&gt; is automatically refunded. &lt;/p&gt;  &lt;p&gt;You can’t cancel the PaymentIntent for a Checkout Session. &lt;a href&#x3D;\&quot;/docs/api/checkout/sessions/expire\&quot;&gt;Expire the Checkout Session&lt;/a&gt; instead.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [intent] 
  /// * [cancellationReason] - Reason for canceling this PaymentIntent. Possible values are: `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentIntent] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentIntent>> postPaymentIntentsIntentCancel({ 
    required String intent,
    String? cancellationReason,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_intents/{intent}/cancel'.replaceAll('{' r'intent' '}', encodeQueryParameter(_serializers, intent, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (cancellationReason != null) r'cancellation_reason': encodeQueryParameter(_serializers, cancellationReason, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentIntent? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentIntent),
      ) as PaymentIntent;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentIntent>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Capture a PaymentIntent
  /// &lt;p&gt;Capture the funds of an existing uncaptured PaymentIntent when its status is &lt;code&gt;requires_capture&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/payments/capture-later\&quot;&gt;separate authorization and capture&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [intent] 
  /// * [amountToCapture] - The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Defaults to the full `amount_capturable` if it's not provided.
  /// * [applicationFeeAmount] - The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total amount captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [finalCapture] - Defaults to `true`. When capturing a PaymentIntent, setting `final_capture` to `false` notifies Stripe to not release the remaining uncaptured funds to make sure that they're captured in future requests. You can only use this setting when [multicapture](https://stripe.com/docs/payments/multicapture) is available for PaymentIntents.
  /// * [metadata] 
  /// * [statementDescriptor] - Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
  /// * [statementDescriptorSuffix] - Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
  /// * [transferData] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentIntent] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentIntent>> postPaymentIntentsIntentCapture({ 
    required String intent,
    int? amountToCapture,
    int? applicationFeeAmount,
    BuiltList<String>? expand,
    bool? finalCapture,
    PostAccountsRequestMetadata? metadata,
    String? statementDescriptor,
    String? statementDescriptorSuffix,
    TransferDataCaptureParams? transferData,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_intents/{intent}/capture'.replaceAll('{' r'intent' '}', encodeQueryParameter(_serializers, intent, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amountToCapture != null) r'amount_to_capture': encodeQueryParameter(_serializers, amountToCapture, const FullType(int)),
        if (applicationFeeAmount != null) r'application_fee_amount': encodeQueryParameter(_serializers, applicationFeeAmount, const FullType(int)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (finalCapture != null) r'final_capture': encodeQueryParameter(_serializers, finalCapture, const FullType(bool)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (statementDescriptor != null) r'statement_descriptor': encodeQueryParameter(_serializers, statementDescriptor, const FullType(String)),
        if (statementDescriptorSuffix != null) r'statement_descriptor_suffix': encodeQueryParameter(_serializers, statementDescriptorSuffix, const FullType(String)),
        if (transferData != null) r'transfer_data': encodeQueryParameter(_serializers, transferData, const FullType(TransferDataCaptureParams)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentIntent? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentIntent),
      ) as PaymentIntent;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentIntent>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Confirm a PaymentIntent
  /// &lt;p&gt;Confirm that your customer intends to pay with current or provided payment method. Upon confirmation, the PaymentIntent will attempt to initiate a payment.&lt;/p&gt;  &lt;p&gt;If the selected payment method requires additional authentication steps, the PaymentIntent will transition to the &lt;code&gt;requires_action&lt;/code&gt; status and suggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If payment fails, the PaymentIntent transitions to the &lt;code&gt;requires_payment_method&lt;/code&gt; status or the &lt;code&gt;canceled&lt;/code&gt; status if the confirmation limit is reached. If payment succeeds, the PaymentIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt; status (or &lt;code&gt;requires_capture&lt;/code&gt;, if &lt;code&gt;capture_method&lt;/code&gt; is set to &lt;code&gt;manual&lt;/code&gt;).&lt;/p&gt;  &lt;p&gt;If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;automatic&lt;/code&gt;, payment may be attempted using our &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-handle-card-payment\&quot;&gt;client SDKs&lt;/a&gt; and the PaymentIntent’s &lt;a href&#x3D;\&quot;#payment_intent_object-client_secret\&quot;&gt;client_secret&lt;/a&gt;. After &lt;code&gt;next_action&lt;/code&gt;s are handled by the client, no additional confirmation is required to complete the payment.&lt;/p&gt;  &lt;p&gt;If the &lt;code&gt;confirmation_method&lt;/code&gt; is &lt;code&gt;manual&lt;/code&gt;, all payment attempts must be initiated using a secret key.&lt;/p&gt;  &lt;p&gt;If any actions are required for the payment, the PaymentIntent will return to the &lt;code&gt;requires_confirmation&lt;/code&gt; state after those actions are completed. Your server needs to then explicitly re-confirm the PaymentIntent to initiate the next payment attempt.&lt;/p&gt;  &lt;p&gt;There is a variable upper limit on how many times a PaymentIntent can be confirmed. After this limit is reached, any further calls to this endpoint will transition the PaymentIntent to the &lt;code&gt;canceled&lt;/code&gt; state.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [intent] 
  /// * [captureMethod] - Controls when the funds will be captured from the customer's account.
  /// * [clientSecret] - The client secret of the PaymentIntent.
  /// * [confirmationToken] - ID of the ConfirmationToken used to confirm this PaymentIntent.  If the provided ConfirmationToken contains properties that are also being provided in this request, such as `payment_method`, then the values in this request will take precedence.
  /// * [errorOnRequiresAction] - Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [mandate] - ID of the mandate that's used for this payment.
  /// * [mandateData] 
  /// * [offSession] 
  /// * [paymentMethod] - ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent. If the payment method is attached to a Customer, it must match the [customer](https://stripe.com/docs/api#create_payment_intent-customer) that is set on this PaymentIntent.
  /// * [paymentMethodData] 
  /// * [paymentMethodOptions] 
  /// * [paymentMethodTypes] - The list of payment method types (for example, a card) that this PaymentIntent can use. Use `automatic_payment_methods` to manage payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods). A list of valid payment method types can be found [here](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).
  /// * [radarOptions] 
  /// * [receiptEmail] 
  /// * [returnUrl] - The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter is only used for cards and other redirect-based payment methods.
  /// * [setupFutureUsage] - Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).  If you've already set `setup_future_usage` and you're performing a request using a publishable key, you can only update the value from `on_session` to `off_session`.
  /// * [shipping] 
  /// * [useStripeSdk] - Set to `true` when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentIntent] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentIntent>> postPaymentIntentsIntentConfirm({ 
    required String intent,
    String? captureMethod,
    String? clientSecret,
    String? confirmationToken,
    bool? errorOnRequiresAction,
    BuiltList<String>? expand,
    String? mandate,
    PostPaymentIntentsIntentConfirmRequestMandateData? mandateData,
    PostPaymentIntentsIntentConfirmRequestOffSession? offSession,
    String? paymentMethod,
    PaymentMethodDataParams? paymentMethodData,
    PaymentMethodOptionsParam19? paymentMethodOptions,
    BuiltList<String>? paymentMethodTypes,
    RadarOptionsWithHiddenOptions2? radarOptions,
    PostPaymentIntentsIntentRequestReceiptEmail? receiptEmail,
    String? returnUrl,
    String? setupFutureUsage,
    PostPaymentIntentsIntentRequestShipping? shipping,
    bool? useStripeSdk,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_intents/{intent}/confirm'.replaceAll('{' r'intent' '}', encodeQueryParameter(_serializers, intent, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (captureMethod != null) r'capture_method': encodeQueryParameter(_serializers, captureMethod, const FullType(String)),
        if (clientSecret != null) r'client_secret': encodeQueryParameter(_serializers, clientSecret, const FullType(String)),
        if (confirmationToken != null) r'confirmation_token': encodeQueryParameter(_serializers, confirmationToken, const FullType(String)),
        if (errorOnRequiresAction != null) r'error_on_requires_action': encodeQueryParameter(_serializers, errorOnRequiresAction, const FullType(bool)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (mandate != null) r'mandate': encodeQueryParameter(_serializers, mandate, const FullType(String)),
        if (mandateData != null) r'mandate_data': encodeQueryParameter(_serializers, mandateData, const FullType(PostPaymentIntentsIntentConfirmRequestMandateData)),
        if (offSession != null) r'off_session': encodeQueryParameter(_serializers, offSession, const FullType(PostPaymentIntentsIntentConfirmRequestOffSession)),
        if (paymentMethod != null) r'payment_method': encodeQueryParameter(_serializers, paymentMethod, const FullType(String)),
        if (paymentMethodData != null) r'payment_method_data': encodeQueryParameter(_serializers, paymentMethodData, const FullType(PaymentMethodDataParams)),
        if (paymentMethodOptions != null) r'payment_method_options': encodeQueryParameter(_serializers, paymentMethodOptions, const FullType(PaymentMethodOptionsParam19)),
        if (paymentMethodTypes != null) r'payment_method_types': encodeCollectionQueryParameter<String>(_serializers, paymentMethodTypes, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (radarOptions != null) r'radar_options': encodeQueryParameter(_serializers, radarOptions, const FullType(RadarOptionsWithHiddenOptions2)),
        if (receiptEmail != null) r'receipt_email': encodeQueryParameter(_serializers, receiptEmail, const FullType(PostPaymentIntentsIntentRequestReceiptEmail)),
        if (returnUrl != null) r'return_url': encodeQueryParameter(_serializers, returnUrl, const FullType(String)),
        if (setupFutureUsage != null) r'setup_future_usage': encodeQueryParameter(_serializers, setupFutureUsage, const FullType(String)),
        if (shipping != null) r'shipping': encodeQueryParameter(_serializers, shipping, const FullType(PostPaymentIntentsIntentRequestShipping)),
        if (useStripeSdk != null) r'use_stripe_sdk': encodeQueryParameter(_serializers, useStripeSdk, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentIntent? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentIntent),
      ) as PaymentIntent;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentIntent>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Increment an authorization
  /// &lt;p&gt;Perform an incremental authorization on an eligible &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object\&quot;&gt;PaymentIntent&lt;/a&gt;. To be eligible, the PaymentIntent’s status must be &lt;code&gt;requires_capture&lt;/code&gt; and &lt;a href&#x3D;\&quot;/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported\&quot;&gt;incremental_authorization_supported&lt;/a&gt; must be &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;Incremental authorizations attempt to increase the authorized amount on your customer’s card to the new, higher &lt;code&gt;amount&lt;/code&gt; provided. Similar to the initial authorization, incremental authorizations can be declined. A single PaymentIntent can call this endpoint multiple times to further increase the authorized amount.&lt;/p&gt;  &lt;p&gt;If the incremental authorization succeeds, the PaymentIntent object returns with the updated &lt;a href&#x3D;\&quot;/docs/api/payment_intents/object#payment_intent_object-amount\&quot;&gt;amount&lt;/a&gt;. If the incremental authorization fails, a &lt;a href&#x3D;\&quot;/docs/error-codes#card-declined\&quot;&gt;card_declined&lt;/a&gt; error returns, and no other fields on the PaymentIntent or Charge update. The PaymentIntent object remains capturable for the previously authorized amount.&lt;/p&gt;  &lt;p&gt;Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines. After it’s captured, a PaymentIntent can no longer be incremented.&lt;/p&gt;  &lt;p&gt;Learn more about &lt;a href&#x3D;\&quot;/docs/terminal/features/incremental-authorizations\&quot;&gt;incremental authorizations&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [intent] 
  /// * [amount] - The updated total amount that you intend to collect from the cardholder. This amount must be greater than the currently authorized amount.
  /// * [applicationFeeAmount] - The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total amount captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [statementDescriptor] - Text that appears on the customer's statement as the statement descriptor for a non-card or card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
  /// * [transferData] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentIntent] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentIntent>> postPaymentIntentsIntentIncrementAuthorization({ 
    required String intent,
    required int amount,
    int? applicationFeeAmount,
    String? description,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    String? statementDescriptor,
    TransferDataUpdateParams1? transferData,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_intents/{intent}/increment_authorization'.replaceAll('{' r'intent' '}', encodeQueryParameter(_serializers, intent, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (applicationFeeAmount != null) r'application_fee_amount': encodeQueryParameter(_serializers, applicationFeeAmount, const FullType(int)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (statementDescriptor != null) r'statement_descriptor': encodeQueryParameter(_serializers, statementDescriptor, const FullType(String)),
        if (transferData != null) r'transfer_data': encodeQueryParameter(_serializers, transferData, const FullType(TransferDataUpdateParams1)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentIntent? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentIntent),
      ) as PaymentIntent;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentIntent>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Verify microdeposits on a PaymentIntent
  /// &lt;p&gt;Verifies microdeposits on a PaymentIntent object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [intent] 
  /// * [amounts] - Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.
  /// * [clientSecret] - The client secret of the PaymentIntent.
  /// * [descriptorCode] - A six-character code starting with SM present in the microdeposit sent to the bank account.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentIntent] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentIntent>> postPaymentIntentsIntentVerifyMicrodeposits({ 
    required String intent,
    BuiltList<int>? amounts,
    String? clientSecret,
    String? descriptorCode,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_intents/{intent}/verify_microdeposits'.replaceAll('{' r'intent' '}', encodeQueryParameter(_serializers, intent, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amounts != null) r'amounts': encodeCollectionQueryParameter<int>(_serializers, amounts, const FullType(BuiltList, [FullType(int)]), format: ListFormat.csv,),
        if (clientSecret != null) r'client_secret': encodeQueryParameter(_serializers, clientSecret, const FullType(String)),
        if (descriptorCode != null) r'descriptor_code': encodeQueryParameter(_serializers, descriptorCode, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentIntent? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentIntent),
      ) as PaymentIntent;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentIntent>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a payment link
  /// &lt;p&gt;Creates a payment link.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [lineItems] - The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.
  /// * [afterCompletion] 
  /// * [allowPromotionCodes] - Enables user redeemable promotion codes.
  /// * [applicationFeeAmount] - The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Can only be applied when there are no line items with recurring prices.
  /// * [applicationFeePercent] - A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field.
  /// * [automaticTax] 
  /// * [billingAddressCollection] - Configuration for collecting the customer's billing address. Defaults to `auto`.
  /// * [consentCollection] 
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies) and supported by each line item's price.
  /// * [customFields] - Collect additional information from your customer using custom fields. Up to 3 fields are supported.
  /// * [customText] 
  /// * [customerCreation] - Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [inactiveMessage] - The custom message to be displayed to a customer when a payment link is no longer active.
  /// * [invoiceCreation] 
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link.
  /// * [onBehalfOf] - The account on behalf of which to charge.
  /// * [optionalItems] - A list of optional items the customer can add to their order at checkout. Use this parameter to pass one-time or recurring [Prices](https://stripe.com/docs/api/prices). There is a maximum of 10 optional items allowed on a payment link, and the existing limits on the number of line items allowed on a payment link apply to the combined number of line items and optional items. There is a maximum of 20 combined line items and optional items.
  /// * [paymentIntentData] 
  /// * [paymentMethodCollection] - Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in `subscription` mode. Defaults to `always`.  If you'd like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
  /// * [paymentMethodTypes] - The list of payment method types that customers can use. If no value is passed, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods) (20+ payment methods [supported](https://stripe.com/docs/payments/payment-methods/integration-options#payment-method-product-support)).
  /// * [phoneNumberCollection] 
  /// * [restrictions] 
  /// * [shippingAddressCollection] 
  /// * [shippingOptions] - The shipping rate options to apply to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link.
  /// * [submitType] - Describes the type of transaction being performed in order to customize relevant text on the page, such as the submit button. Changing this value will also affect the hostname in the [url](https://stripe.com/docs/api/payment_links/payment_links/object#url) property (example: `donate.stripe.com`).
  /// * [subscriptionData] 
  /// * [taxIdCollection] 
  /// * [transferData] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentLink] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentLink>> postPaymentLinks({ 
    required BuiltList<LineItemsCreateParams> lineItems,
    AfterCompletionParams? afterCompletion,
    bool? allowPromotionCodes,
    int? applicationFeeAmount,
    num? applicationFeePercent,
    AutomaticTaxParams1? automaticTax,
    String? billingAddressCollection,
    ConsentCollectionParams1? consentCollection,
    String? currency,
    BuiltList<CustomFieldParam>? customFields,
    CustomTextParam? customText,
    String? customerCreation,
    BuiltList<String>? expand,
    String? inactiveMessage,
    InvoiceCreationCreateParams? invoiceCreation,
    BuiltMap<String, String>? metadata,
    String? onBehalfOf,
    BuiltList<OptionalItemParams>? optionalItems,
    PaymentIntentDataParams1? paymentIntentData,
    String? paymentMethodCollection,
    BuiltList<String>? paymentMethodTypes,
    PhoneNumberCollectionParams1? phoneNumberCollection,
    RestrictionsParams? restrictions,
    ShippingAddressCollectionParams1? shippingAddressCollection,
    BuiltList<ShippingOptionParams1>? shippingOptions,
    String? submitType,
    SubscriptionDataParams1? subscriptionData,
    TaxIdCollectionParams? taxIdCollection,
    TransferDataParams1? transferData,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_links';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (afterCompletion != null) r'after_completion': encodeQueryParameter(_serializers, afterCompletion, const FullType(AfterCompletionParams)),
        if (allowPromotionCodes != null) r'allow_promotion_codes': encodeQueryParameter(_serializers, allowPromotionCodes, const FullType(bool)),
        if (applicationFeeAmount != null) r'application_fee_amount': encodeQueryParameter(_serializers, applicationFeeAmount, const FullType(int)),
        if (applicationFeePercent != null) r'application_fee_percent': encodeQueryParameter(_serializers, applicationFeePercent, const FullType(num)),
        if (automaticTax != null) r'automatic_tax': encodeQueryParameter(_serializers, automaticTax, const FullType(AutomaticTaxParams1)),
        if (billingAddressCollection != null) r'billing_address_collection': encodeQueryParameter(_serializers, billingAddressCollection, const FullType(String)),
        if (consentCollection != null) r'consent_collection': encodeQueryParameter(_serializers, consentCollection, const FullType(ConsentCollectionParams1)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (customFields != null) r'custom_fields': encodeCollectionQueryParameter<CustomFieldParam>(_serializers, customFields, const FullType(BuiltList, [FullType(CustomFieldParam)]), format: ListFormat.csv,),
        if (customText != null) r'custom_text': encodeQueryParameter(_serializers, customText, const FullType(CustomTextParam)),
        if (customerCreation != null) r'customer_creation': encodeQueryParameter(_serializers, customerCreation, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (inactiveMessage != null) r'inactive_message': encodeQueryParameter(_serializers, inactiveMessage, const FullType(String)),
        if (invoiceCreation != null) r'invoice_creation': encodeQueryParameter(_serializers, invoiceCreation, const FullType(InvoiceCreationCreateParams)),
        r'line_items': encodeCollectionQueryParameter<LineItemsCreateParams>(_serializers, lineItems, const FullType(BuiltList, [FullType(LineItemsCreateParams)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (onBehalfOf != null) r'on_behalf_of': encodeQueryParameter(_serializers, onBehalfOf, const FullType(String)),
        if (optionalItems != null) r'optional_items': encodeCollectionQueryParameter<OptionalItemParams>(_serializers, optionalItems, const FullType(BuiltList, [FullType(OptionalItemParams)]), format: ListFormat.csv,),
        if (paymentIntentData != null) r'payment_intent_data': encodeQueryParameter(_serializers, paymentIntentData, const FullType(PaymentIntentDataParams1)),
        if (paymentMethodCollection != null) r'payment_method_collection': encodeQueryParameter(_serializers, paymentMethodCollection, const FullType(String)),
        if (paymentMethodTypes != null) r'payment_method_types': encodeCollectionQueryParameter<String>(_serializers, paymentMethodTypes, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (phoneNumberCollection != null) r'phone_number_collection': encodeQueryParameter(_serializers, phoneNumberCollection, const FullType(PhoneNumberCollectionParams1)),
        if (restrictions != null) r'restrictions': encodeQueryParameter(_serializers, restrictions, const FullType(RestrictionsParams)),
        if (shippingAddressCollection != null) r'shipping_address_collection': encodeQueryParameter(_serializers, shippingAddressCollection, const FullType(ShippingAddressCollectionParams1)),
        if (shippingOptions != null) r'shipping_options': encodeCollectionQueryParameter<ShippingOptionParams1>(_serializers, shippingOptions, const FullType(BuiltList, [FullType(ShippingOptionParams1)]), format: ListFormat.csv,),
        if (submitType != null) r'submit_type': encodeQueryParameter(_serializers, submitType, const FullType(String)),
        if (subscriptionData != null) r'subscription_data': encodeQueryParameter(_serializers, subscriptionData, const FullType(SubscriptionDataParams1)),
        if (taxIdCollection != null) r'tax_id_collection': encodeQueryParameter(_serializers, taxIdCollection, const FullType(TaxIdCollectionParams)),
        if (transferData != null) r'transfer_data': encodeQueryParameter(_serializers, transferData, const FullType(TransferDataParams1)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentLink? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentLink),
      ) as PaymentLink;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentLink>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a payment link
  /// &lt;p&gt;Updates a payment link.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [paymentLink] 
  /// * [active] - Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.
  /// * [afterCompletion] 
  /// * [allowPromotionCodes] - Enables user redeemable promotion codes.
  /// * [automaticTax] 
  /// * [billingAddressCollection] - Configuration for collecting the customer's billing address. Defaults to `auto`.
  /// * [customFields] 
  /// * [customText] 
  /// * [customerCreation] - Configures whether [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link create a [Customer](https://stripe.com/docs/api/customers).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [inactiveMessage] 
  /// * [invoiceCreation] 
  /// * [lineItems] - The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link.
  /// * [paymentIntentData] 
  /// * [paymentMethodCollection] - Specify whether Checkout should collect a payment method. When set to `if_required`, Checkout will not collect a payment method when the total due for the session is 0.This may occur if the Checkout Session includes a free trial or a discount.  Can only be set in `subscription` mode. Defaults to `always`.  If you'd like information on how to collect a payment method outside of Checkout, read the guide on [configuring subscriptions with a free trial](https://stripe.com/docs/payments/checkout/free-trials).
  /// * [paymentMethodTypes] 
  /// * [phoneNumberCollection] 
  /// * [restrictions] 
  /// * [shippingAddressCollection] 
  /// * [submitType] - Describes the type of transaction being performed in order to customize relevant text on the page, such as the submit button. Changing this value will also affect the hostname in the [url](https://stripe.com/docs/api/payment_links/payment_links/object#url) property (example: `donate.stripe.com`).
  /// * [subscriptionData] 
  /// * [taxIdCollection] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentLink] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentLink>> postPaymentLinksPaymentLink({ 
    required String paymentLink,
    bool? active,
    AfterCompletionParams? afterCompletion,
    bool? allowPromotionCodes,
    AutomaticTaxParams1? automaticTax,
    String? billingAddressCollection,
    PostPaymentLinksPaymentLinkRequestCustomFields? customFields,
    CustomTextParam? customText,
    String? customerCreation,
    BuiltList<String>? expand,
    PostPaymentLinksPaymentLinkRequestInactiveMessage? inactiveMessage,
    InvoiceCreationUpdateParams? invoiceCreation,
    BuiltList<LineItemsUpdateParams>? lineItems,
    BuiltMap<String, String>? metadata,
    PaymentIntentDataUpdateParams? paymentIntentData,
    String? paymentMethodCollection,
    PostPaymentLinksPaymentLinkRequestPaymentMethodTypes? paymentMethodTypes,
    PhoneNumberCollectionParams1? phoneNumberCollection,
    PostPaymentLinksPaymentLinkRequestRestrictions? restrictions,
    PostPaymentLinksPaymentLinkRequestShippingAddressCollection? shippingAddressCollection,
    String? submitType,
    SubscriptionDataUpdateParams? subscriptionData,
    TaxIdCollectionParams? taxIdCollection,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_links/{payment_link}'.replaceAll('{' r'payment_link' '}', encodeQueryParameter(_serializers, paymentLink, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
        if (afterCompletion != null) r'after_completion': encodeQueryParameter(_serializers, afterCompletion, const FullType(AfterCompletionParams)),
        if (allowPromotionCodes != null) r'allow_promotion_codes': encodeQueryParameter(_serializers, allowPromotionCodes, const FullType(bool)),
        if (automaticTax != null) r'automatic_tax': encodeQueryParameter(_serializers, automaticTax, const FullType(AutomaticTaxParams1)),
        if (billingAddressCollection != null) r'billing_address_collection': encodeQueryParameter(_serializers, billingAddressCollection, const FullType(String)),
        if (customFields != null) r'custom_fields': encodeQueryParameter(_serializers, customFields, const FullType(PostPaymentLinksPaymentLinkRequestCustomFields)),
        if (customText != null) r'custom_text': encodeQueryParameter(_serializers, customText, const FullType(CustomTextParam)),
        if (customerCreation != null) r'customer_creation': encodeQueryParameter(_serializers, customerCreation, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (inactiveMessage != null) r'inactive_message': encodeQueryParameter(_serializers, inactiveMessage, const FullType(PostPaymentLinksPaymentLinkRequestInactiveMessage)),
        if (invoiceCreation != null) r'invoice_creation': encodeQueryParameter(_serializers, invoiceCreation, const FullType(InvoiceCreationUpdateParams)),
        if (lineItems != null) r'line_items': encodeCollectionQueryParameter<LineItemsUpdateParams>(_serializers, lineItems, const FullType(BuiltList, [FullType(LineItemsUpdateParams)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (paymentIntentData != null) r'payment_intent_data': encodeQueryParameter(_serializers, paymentIntentData, const FullType(PaymentIntentDataUpdateParams)),
        if (paymentMethodCollection != null) r'payment_method_collection': encodeQueryParameter(_serializers, paymentMethodCollection, const FullType(String)),
        if (paymentMethodTypes != null) r'payment_method_types': encodeQueryParameter(_serializers, paymentMethodTypes, const FullType(PostPaymentLinksPaymentLinkRequestPaymentMethodTypes)),
        if (phoneNumberCollection != null) r'phone_number_collection': encodeQueryParameter(_serializers, phoneNumberCollection, const FullType(PhoneNumberCollectionParams1)),
        if (restrictions != null) r'restrictions': encodeQueryParameter(_serializers, restrictions, const FullType(PostPaymentLinksPaymentLinkRequestRestrictions)),
        if (shippingAddressCollection != null) r'shipping_address_collection': encodeQueryParameter(_serializers, shippingAddressCollection, const FullType(PostPaymentLinksPaymentLinkRequestShippingAddressCollection)),
        if (submitType != null) r'submit_type': encodeQueryParameter(_serializers, submitType, const FullType(String)),
        if (subscriptionData != null) r'subscription_data': encodeQueryParameter(_serializers, subscriptionData, const FullType(SubscriptionDataUpdateParams)),
        if (taxIdCollection != null) r'tax_id_collection': encodeQueryParameter(_serializers, taxIdCollection, const FullType(TaxIdCollectionParams)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentLink? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentLink),
      ) as PaymentLink;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentLink>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a payment method configuration
  /// &lt;p&gt;Creates a payment method configuration&lt;/p&gt;
  ///
  /// Parameters:
  /// * [acssDebit] 
  /// * [affirm] 
  /// * [afterpayClearpay] 
  /// * [alipay] 
  /// * [alma] 
  /// * [amazonPay] 
  /// * [applePay] 
  /// * [applePayLater] 
  /// * [auBecsDebit] 
  /// * [bacsDebit] 
  /// * [bancontact] 
  /// * [billie] 
  /// * [blik] 
  /// * [boleto] 
  /// * [card] 
  /// * [cartesBancaires] 
  /// * [cashapp] 
  /// * [customerBalance] 
  /// * [eps] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [fpx] 
  /// * [giropay] 
  /// * [googlePay] 
  /// * [grabpay] 
  /// * [ideal] 
  /// * [jcb] 
  /// * [kakaoPay] 
  /// * [klarna] 
  /// * [konbini] 
  /// * [krCard] 
  /// * [link] 
  /// * [mobilepay] 
  /// * [multibanco] 
  /// * [name] - Configuration name.
  /// * [naverPay] 
  /// * [nzBankAccount] 
  /// * [oxxo] 
  /// * [p24] 
  /// * [parent] - Configuration's parent configuration. Specify to create a child configuration.
  /// * [payByBank] 
  /// * [payco] 
  /// * [paynow] 
  /// * [paypal] 
  /// * [pix] 
  /// * [promptpay] 
  /// * [revolutPay] 
  /// * [samsungPay] 
  /// * [satispay] 
  /// * [sepaDebit] 
  /// * [sofort] 
  /// * [swish] 
  /// * [twint] 
  /// * [usBankAccount] 
  /// * [wechatPay] 
  /// * [zip] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentMethodConfiguration] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentMethodConfiguration>> postPaymentMethodConfigurations({ 
    PaymentMethodParam2? acssDebit,
    PaymentMethodParam3? affirm,
    PaymentMethodParam4? afterpayClearpay,
    PaymentMethodParam5? alipay,
    PaymentMethodParam6? alma,
    PaymentMethodParam7? amazonPay,
    PaymentMethodParam8? applePay,
    PaymentMethodParam9? applePayLater,
    PaymentMethodParam10? auBecsDebit,
    PaymentMethodParam11? bacsDebit,
    PaymentMethodParam12? bancontact,
    PaymentMethodParam13? billie,
    PaymentMethodParam14? blik,
    PaymentMethodParam15? boleto,
    PaymentMethodParam16? card,
    PaymentMethodParam17? cartesBancaires,
    PaymentMethodParam18? cashapp,
    PaymentMethodParam19? customerBalance,
    PaymentMethodParam20? eps,
    BuiltList<String>? expand,
    PaymentMethodParam21? fpx,
    PaymentMethodParam22? giropay,
    PaymentMethodParam23? googlePay,
    PaymentMethodParam24? grabpay,
    PaymentMethodParam25? ideal,
    PaymentMethodParam26? jcb,
    PaymentMethodParam27? kakaoPay,
    PaymentMethodParam28? klarna,
    PaymentMethodParam29? konbini,
    PaymentMethodParam30? krCard,
    PaymentMethodParam31? link,
    PaymentMethodParam32? mobilepay,
    PaymentMethodParam33? multibanco,
    String? name,
    PaymentMethodParam34? naverPay,
    PaymentMethodParam35? nzBankAccount,
    PaymentMethodParam36? oxxo,
    PaymentMethodParam37? p24,
    String? parent,
    PaymentMethodParam38? payByBank,
    PaymentMethodParam39? payco,
    PaymentMethodParam40? paynow,
    PaymentMethodParam41? paypal,
    PaymentMethodParam42? pix,
    PaymentMethodParam43? promptpay,
    PaymentMethodParam44? revolutPay,
    PaymentMethodParam45? samsungPay,
    PaymentMethodParam46? satispay,
    PaymentMethodParam47? sepaDebit,
    PaymentMethodParam48? sofort,
    PaymentMethodParam49? swish,
    PaymentMethodParam50? twint,
    PaymentMethodParam51? usBankAccount,
    PaymentMethodParam52? wechatPay,
    PaymentMethodParam53? zip,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_method_configurations';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (acssDebit != null) r'acss_debit': encodeQueryParameter(_serializers, acssDebit, const FullType(PaymentMethodParam2)),
        if (affirm != null) r'affirm': encodeQueryParameter(_serializers, affirm, const FullType(PaymentMethodParam3)),
        if (afterpayClearpay != null) r'afterpay_clearpay': encodeQueryParameter(_serializers, afterpayClearpay, const FullType(PaymentMethodParam4)),
        if (alipay != null) r'alipay': encodeQueryParameter(_serializers, alipay, const FullType(PaymentMethodParam5)),
        if (alma != null) r'alma': encodeQueryParameter(_serializers, alma, const FullType(PaymentMethodParam6)),
        if (amazonPay != null) r'amazon_pay': encodeQueryParameter(_serializers, amazonPay, const FullType(PaymentMethodParam7)),
        if (applePay != null) r'apple_pay': encodeQueryParameter(_serializers, applePay, const FullType(PaymentMethodParam8)),
        if (applePayLater != null) r'apple_pay_later': encodeQueryParameter(_serializers, applePayLater, const FullType(PaymentMethodParam9)),
        if (auBecsDebit != null) r'au_becs_debit': encodeQueryParameter(_serializers, auBecsDebit, const FullType(PaymentMethodParam10)),
        if (bacsDebit != null) r'bacs_debit': encodeQueryParameter(_serializers, bacsDebit, const FullType(PaymentMethodParam11)),
        if (bancontact != null) r'bancontact': encodeQueryParameter(_serializers, bancontact, const FullType(PaymentMethodParam12)),
        if (billie != null) r'billie': encodeQueryParameter(_serializers, billie, const FullType(PaymentMethodParam13)),
        if (blik != null) r'blik': encodeQueryParameter(_serializers, blik, const FullType(PaymentMethodParam14)),
        if (boleto != null) r'boleto': encodeQueryParameter(_serializers, boleto, const FullType(PaymentMethodParam15)),
        if (card != null) r'card': encodeQueryParameter(_serializers, card, const FullType(PaymentMethodParam16)),
        if (cartesBancaires != null) r'cartes_bancaires': encodeQueryParameter(_serializers, cartesBancaires, const FullType(PaymentMethodParam17)),
        if (cashapp != null) r'cashapp': encodeQueryParameter(_serializers, cashapp, const FullType(PaymentMethodParam18)),
        if (customerBalance != null) r'customer_balance': encodeQueryParameter(_serializers, customerBalance, const FullType(PaymentMethodParam19)),
        if (eps != null) r'eps': encodeQueryParameter(_serializers, eps, const FullType(PaymentMethodParam20)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (fpx != null) r'fpx': encodeQueryParameter(_serializers, fpx, const FullType(PaymentMethodParam21)),
        if (giropay != null) r'giropay': encodeQueryParameter(_serializers, giropay, const FullType(PaymentMethodParam22)),
        if (googlePay != null) r'google_pay': encodeQueryParameter(_serializers, googlePay, const FullType(PaymentMethodParam23)),
        if (grabpay != null) r'grabpay': encodeQueryParameter(_serializers, grabpay, const FullType(PaymentMethodParam24)),
        if (ideal != null) r'ideal': encodeQueryParameter(_serializers, ideal, const FullType(PaymentMethodParam25)),
        if (jcb != null) r'jcb': encodeQueryParameter(_serializers, jcb, const FullType(PaymentMethodParam26)),
        if (kakaoPay != null) r'kakao_pay': encodeQueryParameter(_serializers, kakaoPay, const FullType(PaymentMethodParam27)),
        if (klarna != null) r'klarna': encodeQueryParameter(_serializers, klarna, const FullType(PaymentMethodParam28)),
        if (konbini != null) r'konbini': encodeQueryParameter(_serializers, konbini, const FullType(PaymentMethodParam29)),
        if (krCard != null) r'kr_card': encodeQueryParameter(_serializers, krCard, const FullType(PaymentMethodParam30)),
        if (link != null) r'link': encodeQueryParameter(_serializers, link, const FullType(PaymentMethodParam31)),
        if (mobilepay != null) r'mobilepay': encodeQueryParameter(_serializers, mobilepay, const FullType(PaymentMethodParam32)),
        if (multibanco != null) r'multibanco': encodeQueryParameter(_serializers, multibanco, const FullType(PaymentMethodParam33)),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        if (naverPay != null) r'naver_pay': encodeQueryParameter(_serializers, naverPay, const FullType(PaymentMethodParam34)),
        if (nzBankAccount != null) r'nz_bank_account': encodeQueryParameter(_serializers, nzBankAccount, const FullType(PaymentMethodParam35)),
        if (oxxo != null) r'oxxo': encodeQueryParameter(_serializers, oxxo, const FullType(PaymentMethodParam36)),
        if (p24 != null) r'p24': encodeQueryParameter(_serializers, p24, const FullType(PaymentMethodParam37)),
        if (parent != null) r'parent': encodeQueryParameter(_serializers, parent, const FullType(String)),
        if (payByBank != null) r'pay_by_bank': encodeQueryParameter(_serializers, payByBank, const FullType(PaymentMethodParam38)),
        if (payco != null) r'payco': encodeQueryParameter(_serializers, payco, const FullType(PaymentMethodParam39)),
        if (paynow != null) r'paynow': encodeQueryParameter(_serializers, paynow, const FullType(PaymentMethodParam40)),
        if (paypal != null) r'paypal': encodeQueryParameter(_serializers, paypal, const FullType(PaymentMethodParam41)),
        if (pix != null) r'pix': encodeQueryParameter(_serializers, pix, const FullType(PaymentMethodParam42)),
        if (promptpay != null) r'promptpay': encodeQueryParameter(_serializers, promptpay, const FullType(PaymentMethodParam43)),
        if (revolutPay != null) r'revolut_pay': encodeQueryParameter(_serializers, revolutPay, const FullType(PaymentMethodParam44)),
        if (samsungPay != null) r'samsung_pay': encodeQueryParameter(_serializers, samsungPay, const FullType(PaymentMethodParam45)),
        if (satispay != null) r'satispay': encodeQueryParameter(_serializers, satispay, const FullType(PaymentMethodParam46)),
        if (sepaDebit != null) r'sepa_debit': encodeQueryParameter(_serializers, sepaDebit, const FullType(PaymentMethodParam47)),
        if (sofort != null) r'sofort': encodeQueryParameter(_serializers, sofort, const FullType(PaymentMethodParam48)),
        if (swish != null) r'swish': encodeQueryParameter(_serializers, swish, const FullType(PaymentMethodParam49)),
        if (twint != null) r'twint': encodeQueryParameter(_serializers, twint, const FullType(PaymentMethodParam50)),
        if (usBankAccount != null) r'us_bank_account': encodeQueryParameter(_serializers, usBankAccount, const FullType(PaymentMethodParam51)),
        if (wechatPay != null) r'wechat_pay': encodeQueryParameter(_serializers, wechatPay, const FullType(PaymentMethodParam52)),
        if (zip != null) r'zip': encodeQueryParameter(_serializers, zip, const FullType(PaymentMethodParam53)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentMethodConfiguration? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentMethodConfiguration),
      ) as PaymentMethodConfiguration;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentMethodConfiguration>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update payment method configuration
  /// &lt;p&gt;Update payment method configuration&lt;/p&gt;
  ///
  /// Parameters:
  /// * [configuration] 
  /// * [acssDebit] 
  /// * [active] - Whether the configuration can be used for new payments.
  /// * [affirm] 
  /// * [afterpayClearpay] 
  /// * [alipay] 
  /// * [alma] 
  /// * [amazonPay] 
  /// * [applePay] 
  /// * [applePayLater] 
  /// * [auBecsDebit] 
  /// * [bacsDebit] 
  /// * [bancontact] 
  /// * [billie] 
  /// * [blik] 
  /// * [boleto] 
  /// * [card] 
  /// * [cartesBancaires] 
  /// * [cashapp] 
  /// * [customerBalance] 
  /// * [eps] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [fpx] 
  /// * [giropay] 
  /// * [googlePay] 
  /// * [grabpay] 
  /// * [ideal] 
  /// * [jcb] 
  /// * [kakaoPay] 
  /// * [klarna] 
  /// * [konbini] 
  /// * [krCard] 
  /// * [link] 
  /// * [mobilepay] 
  /// * [multibanco] 
  /// * [name] - Configuration name.
  /// * [naverPay] 
  /// * [nzBankAccount] 
  /// * [oxxo] 
  /// * [p24] 
  /// * [payByBank] 
  /// * [payco] 
  /// * [paynow] 
  /// * [paypal] 
  /// * [pix] 
  /// * [promptpay] 
  /// * [revolutPay] 
  /// * [samsungPay] 
  /// * [satispay] 
  /// * [sepaDebit] 
  /// * [sofort] 
  /// * [swish] 
  /// * [twint] 
  /// * [usBankAccount] 
  /// * [wechatPay] 
  /// * [zip] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentMethodConfiguration] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentMethodConfiguration>> postPaymentMethodConfigurationsConfiguration({ 
    required String configuration,
    PaymentMethodParam2? acssDebit,
    bool? active,
    PaymentMethodParam3? affirm,
    PaymentMethodParam4? afterpayClearpay,
    PaymentMethodParam5? alipay,
    PaymentMethodParam6? alma,
    PaymentMethodParam7? amazonPay,
    PaymentMethodParam8? applePay,
    PaymentMethodParam9? applePayLater,
    PaymentMethodParam10? auBecsDebit,
    PaymentMethodParam11? bacsDebit,
    PaymentMethodParam12? bancontact,
    PaymentMethodParam13? billie,
    PaymentMethodParam14? blik,
    PaymentMethodParam15? boleto,
    PaymentMethodParam16? card,
    PaymentMethodParam17? cartesBancaires,
    PaymentMethodParam18? cashapp,
    PaymentMethodParam19? customerBalance,
    PaymentMethodParam20? eps,
    BuiltList<String>? expand,
    PaymentMethodParam21? fpx,
    PaymentMethodParam22? giropay,
    PaymentMethodParam23? googlePay,
    PaymentMethodParam24? grabpay,
    PaymentMethodParam25? ideal,
    PaymentMethodParam26? jcb,
    PaymentMethodParam27? kakaoPay,
    PaymentMethodParam28? klarna,
    PaymentMethodParam29? konbini,
    PaymentMethodParam30? krCard,
    PaymentMethodParam31? link,
    PaymentMethodParam32? mobilepay,
    PaymentMethodParam33? multibanco,
    String? name,
    PaymentMethodParam34? naverPay,
    PaymentMethodParam35? nzBankAccount,
    PaymentMethodParam36? oxxo,
    PaymentMethodParam37? p24,
    PaymentMethodParam38? payByBank,
    PaymentMethodParam39? payco,
    PaymentMethodParam40? paynow,
    PaymentMethodParam41? paypal,
    PaymentMethodParam42? pix,
    PaymentMethodParam43? promptpay,
    PaymentMethodParam44? revolutPay,
    PaymentMethodParam45? samsungPay,
    PaymentMethodParam46? satispay,
    PaymentMethodParam47? sepaDebit,
    PaymentMethodParam48? sofort,
    PaymentMethodParam49? swish,
    PaymentMethodParam50? twint,
    PaymentMethodParam51? usBankAccount,
    PaymentMethodParam52? wechatPay,
    PaymentMethodParam53? zip,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_method_configurations/{configuration}'.replaceAll('{' r'configuration' '}', encodeQueryParameter(_serializers, configuration, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (acssDebit != null) r'acss_debit': encodeQueryParameter(_serializers, acssDebit, const FullType(PaymentMethodParam2)),
        if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
        if (affirm != null) r'affirm': encodeQueryParameter(_serializers, affirm, const FullType(PaymentMethodParam3)),
        if (afterpayClearpay != null) r'afterpay_clearpay': encodeQueryParameter(_serializers, afterpayClearpay, const FullType(PaymentMethodParam4)),
        if (alipay != null) r'alipay': encodeQueryParameter(_serializers, alipay, const FullType(PaymentMethodParam5)),
        if (alma != null) r'alma': encodeQueryParameter(_serializers, alma, const FullType(PaymentMethodParam6)),
        if (amazonPay != null) r'amazon_pay': encodeQueryParameter(_serializers, amazonPay, const FullType(PaymentMethodParam7)),
        if (applePay != null) r'apple_pay': encodeQueryParameter(_serializers, applePay, const FullType(PaymentMethodParam8)),
        if (applePayLater != null) r'apple_pay_later': encodeQueryParameter(_serializers, applePayLater, const FullType(PaymentMethodParam9)),
        if (auBecsDebit != null) r'au_becs_debit': encodeQueryParameter(_serializers, auBecsDebit, const FullType(PaymentMethodParam10)),
        if (bacsDebit != null) r'bacs_debit': encodeQueryParameter(_serializers, bacsDebit, const FullType(PaymentMethodParam11)),
        if (bancontact != null) r'bancontact': encodeQueryParameter(_serializers, bancontact, const FullType(PaymentMethodParam12)),
        if (billie != null) r'billie': encodeQueryParameter(_serializers, billie, const FullType(PaymentMethodParam13)),
        if (blik != null) r'blik': encodeQueryParameter(_serializers, blik, const FullType(PaymentMethodParam14)),
        if (boleto != null) r'boleto': encodeQueryParameter(_serializers, boleto, const FullType(PaymentMethodParam15)),
        if (card != null) r'card': encodeQueryParameter(_serializers, card, const FullType(PaymentMethodParam16)),
        if (cartesBancaires != null) r'cartes_bancaires': encodeQueryParameter(_serializers, cartesBancaires, const FullType(PaymentMethodParam17)),
        if (cashapp != null) r'cashapp': encodeQueryParameter(_serializers, cashapp, const FullType(PaymentMethodParam18)),
        if (customerBalance != null) r'customer_balance': encodeQueryParameter(_serializers, customerBalance, const FullType(PaymentMethodParam19)),
        if (eps != null) r'eps': encodeQueryParameter(_serializers, eps, const FullType(PaymentMethodParam20)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (fpx != null) r'fpx': encodeQueryParameter(_serializers, fpx, const FullType(PaymentMethodParam21)),
        if (giropay != null) r'giropay': encodeQueryParameter(_serializers, giropay, const FullType(PaymentMethodParam22)),
        if (googlePay != null) r'google_pay': encodeQueryParameter(_serializers, googlePay, const FullType(PaymentMethodParam23)),
        if (grabpay != null) r'grabpay': encodeQueryParameter(_serializers, grabpay, const FullType(PaymentMethodParam24)),
        if (ideal != null) r'ideal': encodeQueryParameter(_serializers, ideal, const FullType(PaymentMethodParam25)),
        if (jcb != null) r'jcb': encodeQueryParameter(_serializers, jcb, const FullType(PaymentMethodParam26)),
        if (kakaoPay != null) r'kakao_pay': encodeQueryParameter(_serializers, kakaoPay, const FullType(PaymentMethodParam27)),
        if (klarna != null) r'klarna': encodeQueryParameter(_serializers, klarna, const FullType(PaymentMethodParam28)),
        if (konbini != null) r'konbini': encodeQueryParameter(_serializers, konbini, const FullType(PaymentMethodParam29)),
        if (krCard != null) r'kr_card': encodeQueryParameter(_serializers, krCard, const FullType(PaymentMethodParam30)),
        if (link != null) r'link': encodeQueryParameter(_serializers, link, const FullType(PaymentMethodParam31)),
        if (mobilepay != null) r'mobilepay': encodeQueryParameter(_serializers, mobilepay, const FullType(PaymentMethodParam32)),
        if (multibanco != null) r'multibanco': encodeQueryParameter(_serializers, multibanco, const FullType(PaymentMethodParam33)),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        if (naverPay != null) r'naver_pay': encodeQueryParameter(_serializers, naverPay, const FullType(PaymentMethodParam34)),
        if (nzBankAccount != null) r'nz_bank_account': encodeQueryParameter(_serializers, nzBankAccount, const FullType(PaymentMethodParam35)),
        if (oxxo != null) r'oxxo': encodeQueryParameter(_serializers, oxxo, const FullType(PaymentMethodParam36)),
        if (p24 != null) r'p24': encodeQueryParameter(_serializers, p24, const FullType(PaymentMethodParam37)),
        if (payByBank != null) r'pay_by_bank': encodeQueryParameter(_serializers, payByBank, const FullType(PaymentMethodParam38)),
        if (payco != null) r'payco': encodeQueryParameter(_serializers, payco, const FullType(PaymentMethodParam39)),
        if (paynow != null) r'paynow': encodeQueryParameter(_serializers, paynow, const FullType(PaymentMethodParam40)),
        if (paypal != null) r'paypal': encodeQueryParameter(_serializers, paypal, const FullType(PaymentMethodParam41)),
        if (pix != null) r'pix': encodeQueryParameter(_serializers, pix, const FullType(PaymentMethodParam42)),
        if (promptpay != null) r'promptpay': encodeQueryParameter(_serializers, promptpay, const FullType(PaymentMethodParam43)),
        if (revolutPay != null) r'revolut_pay': encodeQueryParameter(_serializers, revolutPay, const FullType(PaymentMethodParam44)),
        if (samsungPay != null) r'samsung_pay': encodeQueryParameter(_serializers, samsungPay, const FullType(PaymentMethodParam45)),
        if (satispay != null) r'satispay': encodeQueryParameter(_serializers, satispay, const FullType(PaymentMethodParam46)),
        if (sepaDebit != null) r'sepa_debit': encodeQueryParameter(_serializers, sepaDebit, const FullType(PaymentMethodParam47)),
        if (sofort != null) r'sofort': encodeQueryParameter(_serializers, sofort, const FullType(PaymentMethodParam48)),
        if (swish != null) r'swish': encodeQueryParameter(_serializers, swish, const FullType(PaymentMethodParam49)),
        if (twint != null) r'twint': encodeQueryParameter(_serializers, twint, const FullType(PaymentMethodParam50)),
        if (usBankAccount != null) r'us_bank_account': encodeQueryParameter(_serializers, usBankAccount, const FullType(PaymentMethodParam51)),
        if (wechatPay != null) r'wechat_pay': encodeQueryParameter(_serializers, wechatPay, const FullType(PaymentMethodParam52)),
        if (zip != null) r'zip': encodeQueryParameter(_serializers, zip, const FullType(PaymentMethodParam53)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentMethodConfiguration? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentMethodConfiguration),
      ) as PaymentMethodConfiguration;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentMethodConfiguration>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a payment method domain
  /// &lt;p&gt;Creates a payment method domain.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [domainName] - The domain name that this payment method domain object represents.
  /// * [enabled] - Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements or Embedded Checkout.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentMethodDomain] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentMethodDomain>> postPaymentMethodDomains({ 
    required String domainName,
    bool? enabled,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_method_domains';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'domain_name': encodeQueryParameter(_serializers, domainName, const FullType(String)),
        if (enabled != null) r'enabled': encodeQueryParameter(_serializers, enabled, const FullType(bool)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentMethodDomain? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentMethodDomain),
      ) as PaymentMethodDomain;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentMethodDomain>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a payment method domain
  /// &lt;p&gt;Updates an existing payment method domain.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [paymentMethodDomain] 
  /// * [enabled] - Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements or Embedded Checkout.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentMethodDomain] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentMethodDomain>> postPaymentMethodDomainsPaymentMethodDomain({ 
    required String paymentMethodDomain,
    bool? enabled,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_method_domains/{payment_method_domain}'.replaceAll('{' r'payment_method_domain' '}', encodeQueryParameter(_serializers, paymentMethodDomain, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (enabled != null) r'enabled': encodeQueryParameter(_serializers, enabled, const FullType(bool)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentMethodDomain? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentMethodDomain),
      ) as PaymentMethodDomain;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentMethodDomain>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Validate an existing payment method domain
  /// &lt;p&gt;Some payment methods might require additional steps to register a domain. If the requirements weren’t satisfied when the domain was created, the payment method will be inactive on the domain. The payment method doesn’t appear in Elements or Embedded Checkout for this domain until it is active.&lt;/p&gt;  &lt;p&gt;To activate a payment method on an existing payment method domain, complete the required registration steps specific to the payment method, and then validate the payment method domain with this endpoint.&lt;/p&gt;  &lt;p&gt;Related guides: &lt;a href&#x3D;\&quot;/docs/payments/payment-methods/pmd-registration\&quot;&gt;Payment method domains&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [paymentMethodDomain] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentMethodDomain] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentMethodDomain>> postPaymentMethodDomainsPaymentMethodDomainValidate({ 
    required String paymentMethodDomain,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_method_domains/{payment_method_domain}/validate'.replaceAll('{' r'payment_method_domain' '}', encodeQueryParameter(_serializers, paymentMethodDomain, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentMethodDomain? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentMethodDomain),
      ) as PaymentMethodDomain;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentMethodDomain>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Shares a PaymentMethod
  /// &lt;p&gt;Creates a PaymentMethod object. Read the &lt;a href&#x3D;\&quot;/docs/stripe-js/reference#stripe-create-payment-method\&quot;&gt;Stripe.js reference&lt;/a&gt; to learn how to create PaymentMethods via Stripe.js.&lt;/p&gt;  &lt;p&gt;Instead of creating a PaymentMethod directly, we recommend using the &lt;a href&#x3D;\&quot;/docs/payments/accept-a-payment\&quot;&gt;PaymentIntents&lt;/a&gt; API to accept a payment immediately or the &lt;a href&#x3D;\&quot;/docs/payments/save-and-reuse\&quot;&gt;SetupIntent&lt;/a&gt; API to collect payment method details ahead of a future payment.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [acssDebit] 
  /// * [affirm] - If this is an `affirm` PaymentMethod, this hash contains details about the Affirm payment method.
  /// * [afterpayClearpay] - If this is an `AfterpayClearpay` PaymentMethod, this hash contains details about the AfterpayClearpay payment method.
  /// * [alipay] - If this is an `Alipay` PaymentMethod, this hash contains details about the Alipay payment method.
  /// * [allowRedisplay] - This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`.
  /// * [alma] - If this is a Alma PaymentMethod, this hash contains details about the Alma payment method.
  /// * [amazonPay] - If this is a AmazonPay PaymentMethod, this hash contains details about the AmazonPay payment method.
  /// * [auBecsDebit] 
  /// * [bacsDebit] 
  /// * [bancontact] - If this is a `bancontact` PaymentMethod, this hash contains details about the Bancontact payment method.
  /// * [billie] - If this is a `billie` PaymentMethod, this hash contains details about the Billie payment method.
  /// * [billingDetails] 
  /// * [blik] - If this is a `blik` PaymentMethod, this hash contains details about the BLIK payment method.
  /// * [boleto] 
  /// * [card] 
  /// * [cashapp] - If this is a `cashapp` PaymentMethod, this hash contains details about the Cash App Pay payment method.
  /// * [crypto] - If this is a Crypto PaymentMethod, this hash contains details about the Crypto payment method.
  /// * [customer] - The `Customer` to whom the original PaymentMethod is attached.
  /// * [customerBalance] - If this is a `customer_balance` PaymentMethod, this hash contains details about the CustomerBalance payment method.
  /// * [eps] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [fpx] 
  /// * [giropay] - If this is a `giropay` PaymentMethod, this hash contains details about the Giropay payment method.
  /// * [grabpay] - If this is a `grabpay` PaymentMethod, this hash contains details about the GrabPay payment method.
  /// * [ideal] 
  /// * [interacPresent] - If this is an `interac_present` PaymentMethod, this hash contains details about the Interac Present payment method.
  /// * [kakaoPay] - If this is a `kakao_pay` PaymentMethod, this hash contains details about the Kakao Pay payment method.
  /// * [klarna] 
  /// * [konbini] - If this is a `konbini` PaymentMethod, this hash contains details about the Konbini payment method.
  /// * [krCard] - If this is a `kr_card` PaymentMethod, this hash contains details about the Korean Card payment method.
  /// * [link] - If this is an `Link` PaymentMethod, this hash contains details about the Link payment method.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [mobilepay] - If this is a `mobilepay` PaymentMethod, this hash contains details about the MobilePay payment method.
  /// * [multibanco] - If this is a `multibanco` PaymentMethod, this hash contains details about the Multibanco payment method.
  /// * [naverPay] 
  /// * [nzBankAccount] 
  /// * [oxxo] - If this is an `oxxo` PaymentMethod, this hash contains details about the OXXO payment method.
  /// * [p24] 
  /// * [payByBank] - If this is a `pay_by_bank` PaymentMethod, this hash contains details about the PayByBank payment method.
  /// * [payco] - If this is a `payco` PaymentMethod, this hash contains details about the PAYCO payment method.
  /// * [paymentMethod] - The PaymentMethod to share.
  /// * [paynow] - If this is a `paynow` PaymentMethod, this hash contains details about the PayNow payment method.
  /// * [paypal] - If this is a `paypal` PaymentMethod, this hash contains details about the PayPal payment method.
  /// * [pix] - If this is a `pix` PaymentMethod, this hash contains details about the Pix payment method.
  /// * [promptpay] - If this is a `promptpay` PaymentMethod, this hash contains details about the PromptPay payment method.
  /// * [radarOptions] 
  /// * [revolutPay] - If this is a `revolut_pay` PaymentMethod, this hash contains details about the Revolut Pay payment method.
  /// * [samsungPay] - If this is a `samsung_pay` PaymentMethod, this hash contains details about the SamsungPay payment method.
  /// * [satispay] - If this is a `satispay` PaymentMethod, this hash contains details about the Satispay payment method.
  /// * [sepaDebit] 
  /// * [sofort] 
  /// * [swish] - If this is a `swish` PaymentMethod, this hash contains details about the Swish payment method.
  /// * [twint] - If this is a TWINT PaymentMethod, this hash contains details about the TWINT payment method.
  /// * [type] - The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
  /// * [usBankAccount] 
  /// * [wechatPay] - If this is an `wechat_pay` PaymentMethod, this hash contains details about the wechat_pay payment method.
  /// * [zip] - If this is a `zip` PaymentMethod, this hash contains details about the Zip payment method.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentMethod] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentMethod>> postPaymentMethods({ 
    PaymentMethodParam54? acssDebit,
    JsonObject? affirm,
    JsonObject? afterpayClearpay,
    JsonObject? alipay,
    String? allowRedisplay,
    JsonObject? alma,
    JsonObject? amazonPay,
    Param14? auBecsDebit,
    Param15? bacsDebit,
    JsonObject? bancontact,
    JsonObject? billie,
    BillingDetailsInnerParams1? billingDetails,
    JsonObject? blik,
    Param16? boleto,
    PostPaymentMethodsRequestCard? card,
    JsonObject? cashapp,
    JsonObject? crypto,
    String? customer,
    JsonObject? customerBalance,
    Param17? eps,
    BuiltList<String>? expand,
    Param18? fpx,
    JsonObject? giropay,
    JsonObject? grabpay,
    Param19? ideal,
    JsonObject? interacPresent,
    JsonObject? kakaoPay,
    Param20? klarna,
    JsonObject? konbini,
    JsonObject? krCard,
    JsonObject? link,
    BuiltMap<String, String>? metadata,
    JsonObject? mobilepay,
    JsonObject? multibanco,
    Param21? naverPay,
    Param22? nzBankAccount,
    JsonObject? oxxo,
    Param23? p24,
    JsonObject? payByBank,
    JsonObject? payco,
    String? paymentMethod,
    JsonObject? paynow,
    JsonObject? paypal,
    JsonObject? pix,
    JsonObject? promptpay,
    RadarOptionsWithHiddenOptions? radarOptions,
    JsonObject? revolutPay,
    JsonObject? samsungPay,
    JsonObject? satispay,
    Param24? sepaDebit,
    Param25? sofort,
    JsonObject? swish,
    JsonObject? twint,
    String? type,
    PaymentMethodParam55? usBankAccount,
    JsonObject? wechatPay,
    JsonObject? zip,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_methods';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (acssDebit != null) r'acss_debit': encodeQueryParameter(_serializers, acssDebit, const FullType(PaymentMethodParam54)),
        if (affirm != null) r'affirm': encodeQueryParameter(_serializers, affirm, const FullType(JsonObject)),
        if (afterpayClearpay != null) r'afterpay_clearpay': encodeQueryParameter(_serializers, afterpayClearpay, const FullType(JsonObject)),
        if (alipay != null) r'alipay': encodeQueryParameter(_serializers, alipay, const FullType(JsonObject)),
        if (allowRedisplay != null) r'allow_redisplay': encodeQueryParameter(_serializers, allowRedisplay, const FullType(String)),
        if (alma != null) r'alma': encodeQueryParameter(_serializers, alma, const FullType(JsonObject)),
        if (amazonPay != null) r'amazon_pay': encodeQueryParameter(_serializers, amazonPay, const FullType(JsonObject)),
        if (auBecsDebit != null) r'au_becs_debit': encodeQueryParameter(_serializers, auBecsDebit, const FullType(Param14)),
        if (bacsDebit != null) r'bacs_debit': encodeQueryParameter(_serializers, bacsDebit, const FullType(Param15)),
        if (bancontact != null) r'bancontact': encodeQueryParameter(_serializers, bancontact, const FullType(JsonObject)),
        if (billie != null) r'billie': encodeQueryParameter(_serializers, billie, const FullType(JsonObject)),
        if (billingDetails != null) r'billing_details': encodeQueryParameter(_serializers, billingDetails, const FullType(BillingDetailsInnerParams1)),
        if (blik != null) r'blik': encodeQueryParameter(_serializers, blik, const FullType(JsonObject)),
        if (boleto != null) r'boleto': encodeQueryParameter(_serializers, boleto, const FullType(Param16)),
        if (card != null) r'card': encodeQueryParameter(_serializers, card, const FullType(PostPaymentMethodsRequestCard)),
        if (cashapp != null) r'cashapp': encodeQueryParameter(_serializers, cashapp, const FullType(JsonObject)),
        if (crypto != null) r'crypto': encodeQueryParameter(_serializers, crypto, const FullType(JsonObject)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (customerBalance != null) r'customer_balance': encodeQueryParameter(_serializers, customerBalance, const FullType(JsonObject)),
        if (eps != null) r'eps': encodeQueryParameter(_serializers, eps, const FullType(Param17)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (fpx != null) r'fpx': encodeQueryParameter(_serializers, fpx, const FullType(Param18)),
        if (giropay != null) r'giropay': encodeQueryParameter(_serializers, giropay, const FullType(JsonObject)),
        if (grabpay != null) r'grabpay': encodeQueryParameter(_serializers, grabpay, const FullType(JsonObject)),
        if (ideal != null) r'ideal': encodeQueryParameter(_serializers, ideal, const FullType(Param19)),
        if (interacPresent != null) r'interac_present': encodeQueryParameter(_serializers, interacPresent, const FullType(JsonObject)),
        if (kakaoPay != null) r'kakao_pay': encodeQueryParameter(_serializers, kakaoPay, const FullType(JsonObject)),
        if (klarna != null) r'klarna': encodeQueryParameter(_serializers, klarna, const FullType(Param20)),
        if (konbini != null) r'konbini': encodeQueryParameter(_serializers, konbini, const FullType(JsonObject)),
        if (krCard != null) r'kr_card': encodeQueryParameter(_serializers, krCard, const FullType(JsonObject)),
        if (link != null) r'link': encodeQueryParameter(_serializers, link, const FullType(JsonObject)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (mobilepay != null) r'mobilepay': encodeQueryParameter(_serializers, mobilepay, const FullType(JsonObject)),
        if (multibanco != null) r'multibanco': encodeQueryParameter(_serializers, multibanco, const FullType(JsonObject)),
        if (naverPay != null) r'naver_pay': encodeQueryParameter(_serializers, naverPay, const FullType(Param21)),
        if (nzBankAccount != null) r'nz_bank_account': encodeQueryParameter(_serializers, nzBankAccount, const FullType(Param22)),
        if (oxxo != null) r'oxxo': encodeQueryParameter(_serializers, oxxo, const FullType(JsonObject)),
        if (p24 != null) r'p24': encodeQueryParameter(_serializers, p24, const FullType(Param23)),
        if (payByBank != null) r'pay_by_bank': encodeQueryParameter(_serializers, payByBank, const FullType(JsonObject)),
        if (payco != null) r'payco': encodeQueryParameter(_serializers, payco, const FullType(JsonObject)),
        if (paymentMethod != null) r'payment_method': encodeQueryParameter(_serializers, paymentMethod, const FullType(String)),
        if (paynow != null) r'paynow': encodeQueryParameter(_serializers, paynow, const FullType(JsonObject)),
        if (paypal != null) r'paypal': encodeQueryParameter(_serializers, paypal, const FullType(JsonObject)),
        if (pix != null) r'pix': encodeQueryParameter(_serializers, pix, const FullType(JsonObject)),
        if (promptpay != null) r'promptpay': encodeQueryParameter(_serializers, promptpay, const FullType(JsonObject)),
        if (radarOptions != null) r'radar_options': encodeQueryParameter(_serializers, radarOptions, const FullType(RadarOptionsWithHiddenOptions)),
        if (revolutPay != null) r'revolut_pay': encodeQueryParameter(_serializers, revolutPay, const FullType(JsonObject)),
        if (samsungPay != null) r'samsung_pay': encodeQueryParameter(_serializers, samsungPay, const FullType(JsonObject)),
        if (satispay != null) r'satispay': encodeQueryParameter(_serializers, satispay, const FullType(JsonObject)),
        if (sepaDebit != null) r'sepa_debit': encodeQueryParameter(_serializers, sepaDebit, const FullType(Param24)),
        if (sofort != null) r'sofort': encodeQueryParameter(_serializers, sofort, const FullType(Param25)),
        if (swish != null) r'swish': encodeQueryParameter(_serializers, swish, const FullType(JsonObject)),
        if (twint != null) r'twint': encodeQueryParameter(_serializers, twint, const FullType(JsonObject)),
        if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
        if (usBankAccount != null) r'us_bank_account': encodeQueryParameter(_serializers, usBankAccount, const FullType(PaymentMethodParam55)),
        if (wechatPay != null) r'wechat_pay': encodeQueryParameter(_serializers, wechatPay, const FullType(JsonObject)),
        if (zip != null) r'zip': encodeQueryParameter(_serializers, zip, const FullType(JsonObject)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentMethod? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentMethod),
      ) as PaymentMethod;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentMethod>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a PaymentMethod
  /// &lt;p&gt;Updates a PaymentMethod object. A PaymentMethod must be attached to a customer to be updated.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [paymentMethod] 
  /// * [allowRedisplay] - This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to `unspecified`.
  /// * [billingDetails] 
  /// * [card] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [link] - If this is an `Link` PaymentMethod, this hash contains details about the Link payment method.
  /// * [metadata] 
  /// * [payByBank] - If this is a `pay_by_bank` PaymentMethod, this hash contains details about the PayByBank payment method.
  /// * [usBankAccount] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentMethod] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentMethod>> postPaymentMethodsPaymentMethod({ 
    required String paymentMethod,
    String? allowRedisplay,
    BillingDetailsInnerParams1? billingDetails,
    UpdateApiParam? card,
    BuiltList<String>? expand,
    JsonObject? link,
    PostAccountsRequestMetadata? metadata,
    JsonObject? payByBank,
    UpdateParam? usBankAccount,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_methods/{payment_method}'.replaceAll('{' r'payment_method' '}', encodeQueryParameter(_serializers, paymentMethod, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (allowRedisplay != null) r'allow_redisplay': encodeQueryParameter(_serializers, allowRedisplay, const FullType(String)),
        if (billingDetails != null) r'billing_details': encodeQueryParameter(_serializers, billingDetails, const FullType(BillingDetailsInnerParams1)),
        if (card != null) r'card': encodeQueryParameter(_serializers, card, const FullType(UpdateApiParam)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (link != null) r'link': encodeQueryParameter(_serializers, link, const FullType(JsonObject)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (payByBank != null) r'pay_by_bank': encodeQueryParameter(_serializers, payByBank, const FullType(JsonObject)),
        if (usBankAccount != null) r'us_bank_account': encodeQueryParameter(_serializers, usBankAccount, const FullType(UpdateParam)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentMethod? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentMethod),
      ) as PaymentMethod;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentMethod>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Attach a PaymentMethod to a Customer
  /// &lt;p&gt;Attaches a PaymentMethod object to a Customer.&lt;/p&gt;  &lt;p&gt;To attach a new PaymentMethod to a customer for future payments, we recommend you use a &lt;a href&#x3D;\&quot;/docs/api/setup_intents\&quot;&gt;SetupIntent&lt;/a&gt; or a PaymentIntent with &lt;a href&#x3D;\&quot;/docs/api/payment_intents/create#create_payment_intent-setup_future_usage\&quot;&gt;setup_future_usage&lt;/a&gt;. These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the &lt;code&gt;/v1/payment_methods/:id/attach&lt;/code&gt; endpoint without first using a SetupIntent or PaymentIntent with &lt;code&gt;setup_future_usage&lt;/code&gt; does not optimize the PaymentMethod for future use, which makes later declines and payment friction more likely. See &lt;a href&#x3D;\&quot;/docs/payments/payment-intents#future-usage\&quot;&gt;Optimizing cards for future payments&lt;/a&gt; for more information about setting up future payments.&lt;/p&gt;  &lt;p&gt;To use this PaymentMethod as the default for invoice or subscription payments, set &lt;a href&#x3D;\&quot;/docs/api/customers/update#update_customer-invoice_settings-default_payment_method\&quot;&gt;&lt;code&gt;invoice_settings.default_payment_method&lt;/code&gt;&lt;/a&gt;, on the Customer to the PaymentMethod’s ID.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [paymentMethod] 
  /// * [customer] - The ID of the customer to which to attach the PaymentMethod.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentMethod] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentMethod>> postPaymentMethodsPaymentMethodAttach({ 
    required String paymentMethod,
    required String customer,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_methods/{payment_method}/attach'.replaceAll('{' r'payment_method' '}', encodeQueryParameter(_serializers, paymentMethod, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentMethod? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentMethod),
      ) as PaymentMethod;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentMethod>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Detach a PaymentMethod from a Customer
  /// &lt;p&gt;Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [paymentMethod] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PaymentMethod] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PaymentMethod>> postPaymentMethodsPaymentMethodDetach({ 
    required String paymentMethod,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payment_methods/{payment_method}/detach'.replaceAll('{' r'payment_method' '}', encodeQueryParameter(_serializers, paymentMethod, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PaymentMethod? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PaymentMethod),
      ) as PaymentMethod;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PaymentMethod>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a payout
  /// &lt;p&gt;To send funds to your own bank account, create a new payout object. Your &lt;a href&#x3D;\&quot;#balance\&quot;&gt;Stripe balance&lt;/a&gt; must cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.&lt;/p&gt;  &lt;p&gt;If your API key is in test mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.&lt;/p&gt;  &lt;p&gt;If you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The &lt;a href&#x3D;\&quot;#balance_object\&quot;&gt;balance object&lt;/a&gt; details available and pending amounts by source type.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [amount] - A positive integer in cents representing how much to payout.
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
  /// * [destination] - The ID of a bank account or a card to send the payout to. If you don't provide a destination, we use the default external account for the specified currency.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [method] - The method used to send this payout, which is `standard` or `instant`. We support `instant` for payouts to debit cards and bank accounts in certain countries. Learn more about [bank support for Instant Payouts](https://stripe.com/docs/payouts/instant-payouts-banks).
  /// * [sourceType] - The balance type of your Stripe balance to draw this payout from. Balances for different payment sources are kept separately. You can find the amounts with the Balances API. One of `bank_account`, `card`, or `fpx`.
  /// * [statementDescriptor] - A string that displays on the recipient's bank or card statement (up to 22 characters). A `statement_descriptor` that's longer than 22 characters return an error. Most banks truncate this information and display it inconsistently. Some banks might not display it at all.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Payout] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Payout>> postPayouts({ 
    required int amount,
    required String currency,
    String? description,
    String? destination,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    String? method,
    String? sourceType,
    String? statementDescriptor,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payouts';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (destination != null) r'destination': encodeQueryParameter(_serializers, destination, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (method != null) r'method': encodeQueryParameter(_serializers, method, const FullType(String)),
        if (sourceType != null) r'source_type': encodeQueryParameter(_serializers, sourceType, const FullType(String)),
        if (statementDescriptor != null) r'statement_descriptor': encodeQueryParameter(_serializers, statementDescriptor, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Payout? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Payout),
      ) as Payout;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Payout>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a payout
  /// &lt;p&gt;Updates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only accepts the metadata as arguments.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [payout] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Payout] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Payout>> postPayoutsPayout({ 
    required String payout,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payouts/{payout}'.replaceAll('{' r'payout' '}', encodeQueryParameter(_serializers, payout, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Payout? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Payout),
      ) as Payout;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Payout>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Cancel a payout
  /// &lt;p&gt;You can cancel a previously created payout if its status is &lt;code&gt;pending&lt;/code&gt;. Stripe refunds the funds to your available balance. You can’t cancel automatic Stripe payouts.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [payout] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Payout] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Payout>> postPayoutsPayoutCancel({ 
    required String payout,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payouts/{payout}/cancel'.replaceAll('{' r'payout' '}', encodeQueryParameter(_serializers, payout, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Payout? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Payout),
      ) as Payout;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Payout>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Reverse a payout
  /// &lt;p&gt;Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected accounts to US bank accounts. If the payout is manual and in the &lt;code&gt;pending&lt;/code&gt; status, use &lt;code&gt;/v1/payouts/:id/cancel&lt;/code&gt; instead.&lt;/p&gt;  &lt;p&gt;By requesting a reversal through &lt;code&gt;/v1/payouts/:id/reverse&lt;/code&gt;, you confirm that the authorized signatory of the selected bank account authorizes the debit on the bank account and that no other authorization is required.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [payout] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Payout] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Payout>> postPayoutsPayoutReverse({ 
    required String payout,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/payouts/{payout}/reverse'.replaceAll('{' r'payout' '}', encodeQueryParameter(_serializers, payout, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Payout? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Payout),
      ) as Payout;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Payout>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a plan
  /// &lt;p&gt;You can now model subscriptions more flexibly using the &lt;a href&#x3D;\&quot;#prices\&quot;&gt;Prices API&lt;/a&gt;. It replaces the Plans API and is backwards compatible to simplify your migration.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [interval] - Specifies billing frequency. Either `day`, `week`, `month` or `year`.
  /// * [active] - Whether the plan is currently available for new subscriptions. Defaults to `true`.
  /// * [amount] - A positive integer in cents (or local equivalent) (or 0 for a free plan) representing how much to charge on a recurring basis.
  /// * [amountDecimal] - Same as `amount`, but accepts a decimal value with at most 12 decimal places. Only one of `amount` and `amount_decimal` can be set.
  /// * [billingScheme] - Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [id] - An identifier randomly generated by Stripe. Used to identify this plan when subscribing a customer. You can optionally override this ID, but the ID must be unique across all plans in your Stripe account. You can, however, use the same plan ID in both live and test modes.
  /// * [intervalCount] - The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of three years interval allowed (3 years, 36 months, or 156 weeks).
  /// * [metadata] 
  /// * [meter] - The meter tracking the usage of a metered price
  /// * [nickname] - A brief description of the plan, hidden from customers.
  /// * [product] 
  /// * [tiers] - Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
  /// * [tiersMode] - Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.
  /// * [transformUsage] 
  /// * [trialPeriodDays] - Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
  /// * [usageType] - Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Plan] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Plan>> postPlans({ 
    required String currency,
    required String interval,
    bool? active,
    int? amount,
    double? amountDecimal,
    String? billingScheme,
    BuiltList<String>? expand,
    String? id,
    int? intervalCount,
    PostAccountsRequestMetadata? metadata,
    String? meter,
    String? nickname,
    PostPlansRequestProduct? product,
    BuiltList<Tier>? tiers,
    String? tiersMode,
    TransformUsageParam? transformUsage,
    int? trialPeriodDays,
    String? usageType,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/plans';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (amountDecimal != null) r'amount_decimal': encodeQueryParameter(_serializers, amountDecimal, const FullType(double)),
        if (billingScheme != null) r'billing_scheme': encodeQueryParameter(_serializers, billingScheme, const FullType(String)),
        r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (id != null) r'id': encodeQueryParameter(_serializers, id, const FullType(String)),
        r'interval': encodeQueryParameter(_serializers, interval, const FullType(String)),
        if (intervalCount != null) r'interval_count': encodeQueryParameter(_serializers, intervalCount, const FullType(int)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (meter != null) r'meter': encodeQueryParameter(_serializers, meter, const FullType(String)),
        if (nickname != null) r'nickname': encodeQueryParameter(_serializers, nickname, const FullType(String)),
        if (product != null) r'product': encodeQueryParameter(_serializers, product, const FullType(PostPlansRequestProduct)),
        if (tiers != null) r'tiers': encodeCollectionQueryParameter<Tier>(_serializers, tiers, const FullType(BuiltList, [FullType(Tier)]), format: ListFormat.csv,),
        if (tiersMode != null) r'tiers_mode': encodeQueryParameter(_serializers, tiersMode, const FullType(String)),
        if (transformUsage != null) r'transform_usage': encodeQueryParameter(_serializers, transformUsage, const FullType(TransformUsageParam)),
        if (trialPeriodDays != null) r'trial_period_days': encodeQueryParameter(_serializers, trialPeriodDays, const FullType(int)),
        if (usageType != null) r'usage_type': encodeQueryParameter(_serializers, usageType, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Plan? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Plan),
      ) as Plan;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Plan>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a plan
  /// &lt;p&gt;Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [plan] 
  /// * [active] - Whether the plan is currently available for new subscriptions.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [nickname] - A brief description of the plan, hidden from customers.
  /// * [product] - The product the plan belongs to. This cannot be changed once it has been used in a subscription or subscription schedule.
  /// * [trialPeriodDays] - Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Plan] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Plan>> postPlansPlan({ 
    required String plan,
    bool? active,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    String? nickname,
    String? product,
    int? trialPeriodDays,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/plans/{plan}'.replaceAll('{' r'plan' '}', encodeQueryParameter(_serializers, plan, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (nickname != null) r'nickname': encodeQueryParameter(_serializers, nickname, const FullType(String)),
        if (product != null) r'product': encodeQueryParameter(_serializers, product, const FullType(String)),
        if (trialPeriodDays != null) r'trial_period_days': encodeQueryParameter(_serializers, trialPeriodDays, const FullType(int)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Plan? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Plan),
      ) as Plan;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Plan>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a price
  /// &lt;p&gt;Creates a new &lt;a href&#x3D;\&quot;https://docs.stripe.com/api/prices\&quot;&gt;Price&lt;/a&gt; for an existing &lt;a href&#x3D;\&quot;https://docs.stripe.com/api/products\&quot;&gt;Product&lt;/a&gt;. The Price can be recurring or one-time.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [active] - Whether the price can be used for new purchases. Defaults to `true`.
  /// * [billingScheme] - Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
  /// * [currencyOptions] - Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
  /// * [customUnitAmount] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [lookupKey] - A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [nickname] - A brief description of the price, hidden from customers.
  /// * [product] - The ID of the [Product](https://docs.stripe.com/api/products) that this [Price](https://docs.stripe.com/api/prices) will belong to.
  /// * [productData] 
  /// * [recurring] 
  /// * [taxBehavior] - Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
  /// * [tiers] - Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
  /// * [tiersMode] - Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.
  /// * [transferLookupKey] - If set to true, will atomically remove the lookup key from the existing price, and assign it to this price.
  /// * [transformQuantity] 
  /// * [unitAmount] - A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge. One of `unit_amount`, `unit_amount_decimal`, or `custom_unit_amount` is required, unless `billing_scheme=tiered`.
  /// * [unitAmountDecimal] - Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Price] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Price>> postPrices({ 
    required String currency,
    bool? active,
    String? billingScheme,
    BuiltMap<String, CurrencyOption3>? currencyOptions,
    CustomUnitAmount2? customUnitAmount,
    BuiltList<String>? expand,
    String? lookupKey,
    BuiltMap<String, String>? metadata,
    String? nickname,
    String? product,
    InlineProductParams1? productData,
    Recurring1? recurring,
    String? taxBehavior,
    BuiltList<Tier>? tiers,
    String? tiersMode,
    bool? transferLookupKey,
    TransformUsageParam? transformQuantity,
    int? unitAmount,
    double? unitAmountDecimal,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/prices';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
        if (billingScheme != null) r'billing_scheme': encodeQueryParameter(_serializers, billingScheme, const FullType(String)),
        r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (currencyOptions != null) r'currency_options': encodeQueryParameter(_serializers, currencyOptions, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (customUnitAmount != null) r'custom_unit_amount': encodeQueryParameter(_serializers, customUnitAmount, const FullType(CustomUnitAmount2)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (lookupKey != null) r'lookup_key': encodeQueryParameter(_serializers, lookupKey, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (nickname != null) r'nickname': encodeQueryParameter(_serializers, nickname, const FullType(String)),
        if (product != null) r'product': encodeQueryParameter(_serializers, product, const FullType(String)),
        if (productData != null) r'product_data': encodeQueryParameter(_serializers, productData, const FullType(InlineProductParams1)),
        if (recurring != null) r'recurring': encodeQueryParameter(_serializers, recurring, const FullType(Recurring1)),
        if (taxBehavior != null) r'tax_behavior': encodeQueryParameter(_serializers, taxBehavior, const FullType(String)),
        if (tiers != null) r'tiers': encodeCollectionQueryParameter<Tier>(_serializers, tiers, const FullType(BuiltList, [FullType(Tier)]), format: ListFormat.csv,),
        if (tiersMode != null) r'tiers_mode': encodeQueryParameter(_serializers, tiersMode, const FullType(String)),
        if (transferLookupKey != null) r'transfer_lookup_key': encodeQueryParameter(_serializers, transferLookupKey, const FullType(bool)),
        if (transformQuantity != null) r'transform_quantity': encodeQueryParameter(_serializers, transformQuantity, const FullType(TransformUsageParam)),
        if (unitAmount != null) r'unit_amount': encodeQueryParameter(_serializers, unitAmount, const FullType(int)),
        if (unitAmountDecimal != null) r'unit_amount_decimal': encodeQueryParameter(_serializers, unitAmountDecimal, const FullType(double)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Price? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Price),
      ) as Price;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Price>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a price
  /// &lt;p&gt;Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [price] 
  /// * [active] - Whether the price can be used for new purchases. Defaults to `true`.
  /// * [currencyOptions] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [lookupKey] - A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
  /// * [metadata] 
  /// * [nickname] - A brief description of the price, hidden from customers.
  /// * [taxBehavior] - Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
  /// * [transferLookupKey] - If set to true, will atomically remove the lookup key from the existing price, and assign it to this price.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Price] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Price>> postPricesPrice({ 
    required String price,
    bool? active,
    PostPricesPriceRequestCurrencyOptions? currencyOptions,
    BuiltList<String>? expand,
    String? lookupKey,
    PostAccountsRequestMetadata? metadata,
    String? nickname,
    String? taxBehavior,
    bool? transferLookupKey,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/prices/{price}'.replaceAll('{' r'price' '}', encodeQueryParameter(_serializers, price, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
        if (currencyOptions != null) r'currency_options': encodeQueryParameter(_serializers, currencyOptions, const FullType(PostPricesPriceRequestCurrencyOptions)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (lookupKey != null) r'lookup_key': encodeQueryParameter(_serializers, lookupKey, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (nickname != null) r'nickname': encodeQueryParameter(_serializers, nickname, const FullType(String)),
        if (taxBehavior != null) r'tax_behavior': encodeQueryParameter(_serializers, taxBehavior, const FullType(String)),
        if (transferLookupKey != null) r'transfer_lookup_key': encodeQueryParameter(_serializers, transferLookupKey, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Price? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Price),
      ) as Price;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Price>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a product
  /// &lt;p&gt;Creates a new product object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [name] - The product's name, meant to be displayable to the customer.
  /// * [active] - Whether the product is currently available for purchase. Defaults to `true`.
  /// * [defaultPriceData] 
  /// * [description] - The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [id] - An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account.
  /// * [images] - A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
  /// * [marketingFeatures] - A list of up to 15 marketing features for this product. These are displayed in [pricing tables](https://stripe.com/docs/payments/checkout/pricing-table).
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [packageDimensions] 
  /// * [shippable] - Whether this product is shipped (i.e., physical goods).
  /// * [statementDescriptor] - An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.  This may be up to 22 characters. The statement description may not include `<`, `>`, `\\\\`, `\\\"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.  It must contain at least one letter. Only used for subscription payments.
  /// * [taxCode] - A [tax code](https://stripe.com/docs/tax/tax-categories) ID.
  /// * [unitLabel] - A label that represents units of this product. When set, this will be included in customers' receipts, invoices, Checkout, and the customer portal.
  /// * [url] - A URL of a publicly-accessible webpage for this product.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Product] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Product>> postProducts({ 
    required String name,
    bool? active,
    PriceDataWithoutProductWithMetadata? defaultPriceData,
    String? description,
    BuiltList<String>? expand,
    String? id,
    BuiltList<String>? images,
    BuiltList<Features>? marketingFeatures,
    BuiltMap<String, String>? metadata,
    PackageDimensionsSpecs? packageDimensions,
    bool? shippable,
    String? statementDescriptor,
    String? taxCode,
    String? unitLabel,
    String? url,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/products';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
        if (defaultPriceData != null) r'default_price_data': encodeQueryParameter(_serializers, defaultPriceData, const FullType(PriceDataWithoutProductWithMetadata)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (id != null) r'id': encodeQueryParameter(_serializers, id, const FullType(String)),
        if (images != null) r'images': encodeCollectionQueryParameter<String>(_serializers, images, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (marketingFeatures != null) r'marketing_features': encodeCollectionQueryParameter<Features>(_serializers, marketingFeatures, const FullType(BuiltList, [FullType(Features)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        if (packageDimensions != null) r'package_dimensions': encodeQueryParameter(_serializers, packageDimensions, const FullType(PackageDimensionsSpecs)),
        if (shippable != null) r'shippable': encodeQueryParameter(_serializers, shippable, const FullType(bool)),
        if (statementDescriptor != null) r'statement_descriptor': encodeQueryParameter(_serializers, statementDescriptor, const FullType(String)),
        if (taxCode != null) r'tax_code': encodeQueryParameter(_serializers, taxCode, const FullType(String)),
        if (unitLabel != null) r'unit_label': encodeQueryParameter(_serializers, unitLabel, const FullType(String)),
        if (url != null) r'url': encodeQueryParameter(_serializers, url, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Product? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Product),
      ) as Product;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Product>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a product
  /// &lt;p&gt;Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [active] - Whether the product is available for purchase.
  /// * [defaultPrice] - The ID of the [Price](https://stripe.com/docs/api/prices) object that is the default price for this product.
  /// * [description] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [images] 
  /// * [marketingFeatures] 
  /// * [metadata] 
  /// * [name] - The product's name, meant to be displayable to the customer.
  /// * [packageDimensions] 
  /// * [shippable] - Whether this product is shipped (i.e., physical goods).
  /// * [statementDescriptor] - An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.  This may be up to 22 characters. The statement description may not include `<`, `>`, `\\\\`, `\\\"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.  It must contain at least one letter. May only be set if `type=service`. Only used for subscription payments.
  /// * [taxCode] 
  /// * [unitLabel] 
  /// * [url] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Product] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Product>> postProductsId({ 
    required String id,
    bool? active,
    String? defaultPrice,
    PostProductsIdRequestDescription? description,
    BuiltList<String>? expand,
    PostProductsIdRequestImages? images,
    PostProductsIdRequestMarketingFeatures? marketingFeatures,
    PostAccountsRequestMetadata? metadata,
    String? name,
    PostProductsIdRequestPackageDimensions? packageDimensions,
    bool? shippable,
    String? statementDescriptor,
    PostInvoiceitemsRequestTaxCode? taxCode,
    PostProductsIdRequestUnitLabel? unitLabel,
    PostProductsIdRequestUrl? url,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/products/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
        if (defaultPrice != null) r'default_price': encodeQueryParameter(_serializers, defaultPrice, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(PostProductsIdRequestDescription)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (images != null) r'images': encodeQueryParameter(_serializers, images, const FullType(PostProductsIdRequestImages)),
        if (marketingFeatures != null) r'marketing_features': encodeQueryParameter(_serializers, marketingFeatures, const FullType(PostProductsIdRequestMarketingFeatures)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        if (packageDimensions != null) r'package_dimensions': encodeQueryParameter(_serializers, packageDimensions, const FullType(PostProductsIdRequestPackageDimensions)),
        if (shippable != null) r'shippable': encodeQueryParameter(_serializers, shippable, const FullType(bool)),
        if (statementDescriptor != null) r'statement_descriptor': encodeQueryParameter(_serializers, statementDescriptor, const FullType(String)),
        if (taxCode != null) r'tax_code': encodeQueryParameter(_serializers, taxCode, const FullType(PostInvoiceitemsRequestTaxCode)),
        if (unitLabel != null) r'unit_label': encodeQueryParameter(_serializers, unitLabel, const FullType(PostProductsIdRequestUnitLabel)),
        if (url != null) r'url': encodeQueryParameter(_serializers, url, const FullType(PostProductsIdRequestUrl)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Product? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Product),
      ) as Product;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Product>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Attach a feature to a product
  /// &lt;p&gt;Creates a product_feature, which represents a feature attachment to a product&lt;/p&gt;
  ///
  /// Parameters:
  /// * [product] 
  /// * [entitlementFeature] - The ID of the [Feature](https://stripe.com/docs/api/entitlements/feature) object attached to this product.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ProductFeature] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ProductFeature>> postProductsProductFeatures({ 
    required String product,
    required String entitlementFeature,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/products/{product}/features'.replaceAll('{' r'product' '}', encodeQueryParameter(_serializers, product, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'entitlement_feature': encodeQueryParameter(_serializers, entitlementFeature, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ProductFeature? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ProductFeature),
      ) as ProductFeature;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ProductFeature>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a promotion code
  /// &lt;p&gt;A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [coupon] - The coupon for this promotion code.
  /// * [active] - Whether the promotion code is currently active.
  /// * [code] - The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for a specific customer. Valid characters are lower case letters (a-z), upper case letters (A-Z), and digits (0-9).  If left blank, we will generate one automatically.
  /// * [customer] - The customer that this promotion code can be used by. If not set, the promotion code can be used by all customers.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [expiresAt] - The timestamp at which this promotion code will expire. If the coupon has specified a `redeems_by`, then this value cannot be after the coupon's `redeems_by`.
  /// * [maxRedemptions] - A positive integer specifying the number of times the promotion code can be redeemed. If the coupon has specified a `max_redemptions`, then this value cannot be greater than the coupon's `max_redemptions`.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [restrictions] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PromotionCode] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PromotionCode>> postPromotionCodes({ 
    required String coupon,
    bool? active,
    String? code,
    String? customer,
    BuiltList<String>? expand,
    int? expiresAt,
    int? maxRedemptions,
    BuiltMap<String, String>? metadata,
    RestrictionsParams2? restrictions,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/promotion_codes';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
        if (code != null) r'code': encodeQueryParameter(_serializers, code, const FullType(String)),
        r'coupon': encodeQueryParameter(_serializers, coupon, const FullType(String)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (expiresAt != null) r'expires_at': encodeQueryParameter(_serializers, expiresAt, const FullType(int)),
        if (maxRedemptions != null) r'max_redemptions': encodeQueryParameter(_serializers, maxRedemptions, const FullType(int)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (restrictions != null) r'restrictions': encodeQueryParameter(_serializers, restrictions, const FullType(RestrictionsParams2)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PromotionCode? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PromotionCode),
      ) as PromotionCode;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PromotionCode>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a promotion code
  /// &lt;p&gt;Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [promotionCode] 
  /// * [active] - Whether the promotion code is currently active. A promotion code can only be reactivated when the coupon is still valid and the promotion code is otherwise redeemable.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [restrictions] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [PromotionCode] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<PromotionCode>> postPromotionCodesPromotionCode({ 
    required String promotionCode,
    bool? active,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    RestrictionsParams3? restrictions,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/promotion_codes/{promotion_code}'.replaceAll('{' r'promotion_code' '}', encodeQueryParameter(_serializers, promotionCode, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (restrictions != null) r'restrictions': encodeQueryParameter(_serializers, restrictions, const FullType(RestrictionsParams3)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    PromotionCode? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(PromotionCode),
      ) as PromotionCode;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<PromotionCode>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a quote
  /// &lt;p&gt;A quote models prices and services for a customer. Default options for &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt;, and &lt;code&gt;expires_at&lt;/code&gt; can be set in the dashboard via the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/settings/billing/quote\&quot;&gt;quote template&lt;/a&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [applicationFeeAmount] 
  /// * [applicationFeePercent] 
  /// * [automaticTax] 
  /// * [collectionMethod] - Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
  /// * [customer] - The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
  /// * [defaultTaxRates] 
  /// * [description] 
  /// * [discounts] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [expiresAt] - A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch. If no value is passed, the default expiration date configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used.
  /// * [footer] 
  /// * [fromQuote] 
  /// * [header] 
  /// * [invoiceSettings] 
  /// * [lineItems] - A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [onBehalfOf] 
  /// * [subscriptionData] 
  /// * [testClock] - ID of the test clock to attach to the quote.
  /// * [transferData] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Quote] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Quote>> postQuotes({ 
    PostQuotesRequestApplicationFeeAmount? applicationFeeAmount,
    PostQuotesRequestApplicationFeePercent? applicationFeePercent,
    AutomaticTaxParam2? automaticTax,
    String? collectionMethod,
    String? customer,
    PostQuotesRequestDefaultTaxRates? defaultTaxRates,
    PostQuotesRequestDescription? description,
    PostQuotesRequestDiscounts? discounts,
    BuiltList<String>? expand,
    int? expiresAt,
    PostQuotesRequestFooter? footer,
    FromQuoteParams? fromQuote,
    PostQuotesRequestHeader? header,
    QuoteParam? invoiceSettings,
    BuiltList<LineItemCreateParams>? lineItems,
    BuiltMap<String, String>? metadata,
    PostQuotesRequestOnBehalfOf? onBehalfOf,
    SubscriptionDataCreateParams? subscriptionData,
    String? testClock,
    PostQuotesRequestTransferData? transferData,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/quotes';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (applicationFeeAmount != null) r'application_fee_amount': encodeQueryParameter(_serializers, applicationFeeAmount, const FullType(PostQuotesRequestApplicationFeeAmount)),
        if (applicationFeePercent != null) r'application_fee_percent': encodeQueryParameter(_serializers, applicationFeePercent, const FullType(PostQuotesRequestApplicationFeePercent)),
        if (automaticTax != null) r'automatic_tax': encodeQueryParameter(_serializers, automaticTax, const FullType(AutomaticTaxParam2)),
        if (collectionMethod != null) r'collection_method': encodeQueryParameter(_serializers, collectionMethod, const FullType(String)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (defaultTaxRates != null) r'default_tax_rates': encodeQueryParameter(_serializers, defaultTaxRates, const FullType(PostQuotesRequestDefaultTaxRates)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(PostQuotesRequestDescription)),
        if (discounts != null) r'discounts': encodeQueryParameter(_serializers, discounts, const FullType(PostQuotesRequestDiscounts)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (expiresAt != null) r'expires_at': encodeQueryParameter(_serializers, expiresAt, const FullType(int)),
        if (footer != null) r'footer': encodeQueryParameter(_serializers, footer, const FullType(PostQuotesRequestFooter)),
        if (fromQuote != null) r'from_quote': encodeQueryParameter(_serializers, fromQuote, const FullType(FromQuoteParams)),
        if (header != null) r'header': encodeQueryParameter(_serializers, header, const FullType(PostQuotesRequestHeader)),
        if (invoiceSettings != null) r'invoice_settings': encodeQueryParameter(_serializers, invoiceSettings, const FullType(QuoteParam)),
        if (lineItems != null) r'line_items': encodeCollectionQueryParameter<LineItemCreateParams>(_serializers, lineItems, const FullType(BuiltList, [FullType(LineItemCreateParams)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (onBehalfOf != null) r'on_behalf_of': encodeQueryParameter(_serializers, onBehalfOf, const FullType(PostQuotesRequestOnBehalfOf)),
        if (subscriptionData != null) r'subscription_data': encodeQueryParameter(_serializers, subscriptionData, const FullType(SubscriptionDataCreateParams)),
        if (testClock != null) r'test_clock': encodeQueryParameter(_serializers, testClock, const FullType(String)),
        if (transferData != null) r'transfer_data': encodeQueryParameter(_serializers, transferData, const FullType(PostQuotesRequestTransferData)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Quote? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Quote),
      ) as Quote;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Quote>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a quote
  /// &lt;p&gt;A quote models prices and services for a customer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [quote] 
  /// * [applicationFeeAmount] 
  /// * [applicationFeePercent] 
  /// * [automaticTax] 
  /// * [collectionMethod] - Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
  /// * [customer] - The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
  /// * [defaultTaxRates] 
  /// * [description] 
  /// * [discounts] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [expiresAt] - A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
  /// * [footer] 
  /// * [header] 
  /// * [invoiceSettings] 
  /// * [lineItems] - A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [onBehalfOf] 
  /// * [subscriptionData] 
  /// * [transferData] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Quote] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Quote>> postQuotesQuote({ 
    required String quote,
    PostQuotesRequestApplicationFeeAmount? applicationFeeAmount,
    PostQuotesRequestApplicationFeePercent? applicationFeePercent,
    AutomaticTaxParam2? automaticTax,
    String? collectionMethod,
    String? customer,
    PostQuotesRequestDefaultTaxRates? defaultTaxRates,
    PostQuotesQuoteRequestDescription? description,
    PostQuotesRequestDiscounts? discounts,
    BuiltList<String>? expand,
    int? expiresAt,
    PostQuotesQuoteRequestFooter? footer,
    PostQuotesQuoteRequestHeader? header,
    QuoteParam? invoiceSettings,
    BuiltList<LineItemUpdateParams>? lineItems,
    BuiltMap<String, String>? metadata,
    PostQuotesRequestOnBehalfOf? onBehalfOf,
    SubscriptionDataUpdateParams1? subscriptionData,
    PostQuotesRequestTransferData? transferData,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/quotes/{quote}'.replaceAll('{' r'quote' '}', encodeQueryParameter(_serializers, quote, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (applicationFeeAmount != null) r'application_fee_amount': encodeQueryParameter(_serializers, applicationFeeAmount, const FullType(PostQuotesRequestApplicationFeeAmount)),
        if (applicationFeePercent != null) r'application_fee_percent': encodeQueryParameter(_serializers, applicationFeePercent, const FullType(PostQuotesRequestApplicationFeePercent)),
        if (automaticTax != null) r'automatic_tax': encodeQueryParameter(_serializers, automaticTax, const FullType(AutomaticTaxParam2)),
        if (collectionMethod != null) r'collection_method': encodeQueryParameter(_serializers, collectionMethod, const FullType(String)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (defaultTaxRates != null) r'default_tax_rates': encodeQueryParameter(_serializers, defaultTaxRates, const FullType(PostQuotesRequestDefaultTaxRates)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(PostQuotesQuoteRequestDescription)),
        if (discounts != null) r'discounts': encodeQueryParameter(_serializers, discounts, const FullType(PostQuotesRequestDiscounts)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (expiresAt != null) r'expires_at': encodeQueryParameter(_serializers, expiresAt, const FullType(int)),
        if (footer != null) r'footer': encodeQueryParameter(_serializers, footer, const FullType(PostQuotesQuoteRequestFooter)),
        if (header != null) r'header': encodeQueryParameter(_serializers, header, const FullType(PostQuotesQuoteRequestHeader)),
        if (invoiceSettings != null) r'invoice_settings': encodeQueryParameter(_serializers, invoiceSettings, const FullType(QuoteParam)),
        if (lineItems != null) r'line_items': encodeCollectionQueryParameter<LineItemUpdateParams>(_serializers, lineItems, const FullType(BuiltList, [FullType(LineItemUpdateParams)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (onBehalfOf != null) r'on_behalf_of': encodeQueryParameter(_serializers, onBehalfOf, const FullType(PostQuotesRequestOnBehalfOf)),
        if (subscriptionData != null) r'subscription_data': encodeQueryParameter(_serializers, subscriptionData, const FullType(SubscriptionDataUpdateParams1)),
        if (transferData != null) r'transfer_data': encodeQueryParameter(_serializers, transferData, const FullType(PostQuotesRequestTransferData)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Quote? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Quote),
      ) as Quote;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Quote>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Accept a quote
  /// &lt;p&gt;Accepts the specified quote.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [quote] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Quote] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Quote>> postQuotesQuoteAccept({ 
    required String quote,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/quotes/{quote}/accept'.replaceAll('{' r'quote' '}', encodeQueryParameter(_serializers, quote, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Quote? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Quote),
      ) as Quote;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Quote>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Cancel a quote
  /// &lt;p&gt;Cancels the quote.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [quote] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Quote] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Quote>> postQuotesQuoteCancel({ 
    required String quote,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/quotes/{quote}/cancel'.replaceAll('{' r'quote' '}', encodeQueryParameter(_serializers, quote, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Quote? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Quote),
      ) as Quote;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Quote>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Finalize a quote
  /// &lt;p&gt;Finalizes the quote.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [quote] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [expiresAt] - A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Quote] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Quote>> postQuotesQuoteFinalize({ 
    required String quote,
    BuiltList<String>? expand,
    int? expiresAt,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/quotes/{quote}/finalize'.replaceAll('{' r'quote' '}', encodeQueryParameter(_serializers, quote, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (expiresAt != null) r'expires_at': encodeQueryParameter(_serializers, expiresAt, const FullType(int)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Quote? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Quote),
      ) as Quote;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Quote>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a value list item
  /// &lt;p&gt;Creates a new &lt;code&gt;ValueListItem&lt;/code&gt; object, which is added to the specified parent value list.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [value] - The value of the item (whose type must match the type of the parent value list).
  /// * [valueList] - The identifier of the value list which the created item will be added to.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [RadarValueListItem] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<RadarValueListItem>> postRadarValueListItems({ 
    required String value,
    required String valueList,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/radar/value_list_items';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'value': encodeQueryParameter(_serializers, value, const FullType(String)),
        r'value_list': encodeQueryParameter(_serializers, valueList, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    RadarValueListItem? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(RadarValueListItem),
      ) as RadarValueListItem;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<RadarValueListItem>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a value list
  /// &lt;p&gt;Creates a new &lt;code&gt;ValueList&lt;/code&gt; object, which can then be referenced in rules.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [alias] - The name of the value list for use in rules.
  /// * [name] - The human-readable name of the value list.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [itemType] - Type of the items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, `customer_id`, `sepa_debit_fingerprint`, or `us_bank_account_fingerprint`. Use `string` if the item type is unknown or mixed.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [RadarValueList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<RadarValueList>> postRadarValueLists({ 
    required String alias,
    required String name,
    BuiltList<String>? expand,
    String? itemType,
    BuiltMap<String, String>? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/radar/value_lists';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'alias': encodeQueryParameter(_serializers, alias, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (itemType != null) r'item_type': encodeQueryParameter(_serializers, itemType, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    RadarValueList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(RadarValueList),
      ) as RadarValueList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<RadarValueList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a value list
  /// &lt;p&gt;Updates a &lt;code&gt;ValueList&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that &lt;code&gt;item_type&lt;/code&gt; is immutable.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [valueList] 
  /// * [alias] - The name of the value list for use in rules.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [name] - The human-readable name of the value list.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [RadarValueList] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<RadarValueList>> postRadarValueListsValueList({ 
    required String valueList,
    String? alias,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    String? name,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/radar/value_lists/{value_list}'.replaceAll('{' r'value_list' '}', encodeQueryParameter(_serializers, valueList, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (alias != null) r'alias': encodeQueryParameter(_serializers, alias, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    RadarValueList? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(RadarValueList),
      ) as RadarValueList;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<RadarValueList>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create customer balance refund
  /// &lt;p&gt;When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.&lt;/p&gt;  &lt;p&gt;Creating a new refund will refund a charge that has previously been created but not yet refunded. Funds will be refunded to the credit or debit card that was originally charged.&lt;/p&gt;  &lt;p&gt;You can optionally refund only part of a charge. You can do so multiple times, until the entire charge has been refunded.&lt;/p&gt;  &lt;p&gt;Once entirely refunded, a charge can’t be refunded again. This method will raise an error when called on an already-refunded charge, or when trying to refund more money than is left on a charge.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [amount] 
  /// * [charge] - The identifier of the charge to refund.
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [customer] - Customer whose customer balance to refund from.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [instructionsEmail] - For payment methods without native refund support (e.g., Konbini, PromptPay), use this email from the customer to receive refund instructions.
  /// * [metadata] 
  /// * [origin] - Origin of the refund
  /// * [paymentIntent] - The identifier of the PaymentIntent to refund.
  /// * [reason] - String indicating the reason for the refund. If set, possible values are `duplicate`, `fraudulent`, and `requested_by_customer`. If you believe the charge to be fraudulent, specifying `fraudulent` as the reason will add the associated card and email to your [block lists](https://stripe.com/docs/radar/lists), and will also help us improve our fraud detection algorithms.
  /// * [refundApplicationFee] - Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.
  /// * [reverseTransfer] - Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount).<br><br>A transfer can be reversed only by the application that created the charge.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Refund] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Refund>> postRefunds({ 
    int? amount,
    String? charge,
    String? currency,
    String? customer,
    BuiltList<String>? expand,
    String? instructionsEmail,
    PostAccountsRequestMetadata? metadata,
    String? origin,
    String? paymentIntent,
    String? reason,
    bool? refundApplicationFee,
    bool? reverseTransfer,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/refunds';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (charge != null) r'charge': encodeQueryParameter(_serializers, charge, const FullType(String)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (instructionsEmail != null) r'instructions_email': encodeQueryParameter(_serializers, instructionsEmail, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (origin != null) r'origin': encodeQueryParameter(_serializers, origin, const FullType(String)),
        if (paymentIntent != null) r'payment_intent': encodeQueryParameter(_serializers, paymentIntent, const FullType(String)),
        if (reason != null) r'reason': encodeQueryParameter(_serializers, reason, const FullType(String)),
        if (refundApplicationFee != null) r'refund_application_fee': encodeQueryParameter(_serializers, refundApplicationFee, const FullType(bool)),
        if (reverseTransfer != null) r'reverse_transfer': encodeQueryParameter(_serializers, reverseTransfer, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Refund? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Refund),
      ) as Refund;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Refund>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a refund
  /// &lt;p&gt;Updates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t provide remain unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts &lt;code&gt;metadata&lt;/code&gt; as an argument.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [refund] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Refund] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Refund>> postRefundsRefund({ 
    required String refund,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/refunds/{refund}'.replaceAll('{' r'refund' '}', encodeQueryParameter(_serializers, refund, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Refund? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Refund),
      ) as Refund;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Refund>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Cancel a refund
  /// &lt;p&gt;Cancels a refund with a status of &lt;code&gt;requires_action&lt;/code&gt;.&lt;/p&gt;  &lt;p&gt;You can’t cancel refunds in other states. Only refunds for payment methods that require customer action can enter the &lt;code&gt;requires_action&lt;/code&gt; state.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [refund] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Refund] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Refund>> postRefundsRefundCancel({ 
    required String refund,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/refunds/{refund}/cancel'.replaceAll('{' r'refund' '}', encodeQueryParameter(_serializers, refund, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Refund? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Refund),
      ) as Refund;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Refund>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a Report Run
  /// &lt;p&gt;Creates a new object and begin running the report. (Certain report types require a &lt;a href&#x3D;\&quot;https://stripe.com/docs/keys#test-live-modes\&quot;&gt;live-mode API key&lt;/a&gt;.)&lt;/p&gt;
  ///
  /// Parameters:
  /// * [reportType] - The ID of the [report type](https://stripe.com/docs/reporting/statements/api#report-types) to run, such as `\\\"balance.summary.1\\\"`.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [parameters] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ReportingReportRun] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ReportingReportRun>> postReportingReportRuns({ 
    required String reportType,
    BuiltList<String>? expand,
    RunParameterSpecs? parameters,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/reporting/report_runs';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (parameters != null) r'parameters': encodeQueryParameter(_serializers, parameters, const FullType(RunParameterSpecs)),
        r'report_type': encodeQueryParameter(_serializers, reportType, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ReportingReportRun? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ReportingReportRun),
      ) as ReportingReportRun;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ReportingReportRun>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Approve a review
  /// &lt;p&gt;Approves a &lt;code&gt;Review&lt;/code&gt; object, closing it and removing it from the list of reviews.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [review] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Review] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Review>> postReviewsReviewApprove({ 
    required String review,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/reviews/{review}/approve'.replaceAll('{' r'review' '}', encodeQueryParameter(_serializers, review, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Review? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Review),
      ) as Review;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Review>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a SetupIntent
  /// &lt;p&gt;Creates a SetupIntent object.&lt;/p&gt;  &lt;p&gt;After you create the SetupIntent, attach a payment method and &lt;a href&#x3D;\&quot;/docs/api/setup_intents/confirm\&quot;&gt;confirm&lt;/a&gt; it to collect any required permissions to charge the payment method later.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [attachToSelf] - If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
  /// * [automaticPaymentMethods] 
  /// * [confirm] - Set to `true` to attempt to confirm this SetupIntent immediately. This parameter defaults to `false`. If a card is the attached payment method, you can provide a `return_url` in case further authentication is necessary.
  /// * [confirmationToken] - ID of the ConfirmationToken used to confirm this SetupIntent.  If the provided ConfirmationToken contains properties that are also being provided in this request, such as `payment_method`, then the values in this request will take precedence.
  /// * [customer] - ID of the Customer this SetupIntent belongs to, if one exists.  If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [flowDirections] - Indicates the directions of money movement for which this payment method is intended to be used.  Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
  /// * [mandateData] 
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [onBehalfOf] - The Stripe account ID created for this SetupIntent.
  /// * [paymentMethod] - ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.
  /// * [paymentMethodConfiguration] - The ID of the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) to use with this SetupIntent.
  /// * [paymentMethodData] 
  /// * [paymentMethodOptions] 
  /// * [paymentMethodTypes] - The list of payment method types (for example, card) that this SetupIntent can use. If you don't provide this, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods). A list of valid payment method types can be found [here](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).
  /// * [returnUrl] - The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. To redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm).
  /// * [singleUse] 
  /// * [usage] - Indicates how the payment method is intended to be used in the future. If not provided, this value defaults to `off_session`.
  /// * [useStripeSdk] - Set to `true` when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SetupIntent] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SetupIntent>> postSetupIntents({ 
    bool? attachToSelf,
    AutomaticPaymentMethodsParam1? automaticPaymentMethods,
    bool? confirm,
    String? confirmationToken,
    String? customer,
    String? description,
    BuiltList<String>? expand,
    BuiltList<String>? flowDirections,
    PostSetupIntentsRequestMandateData? mandateData,
    BuiltMap<String, String>? metadata,
    String? onBehalfOf,
    String? paymentMethod,
    String? paymentMethodConfiguration,
    PaymentMethodDataParams1? paymentMethodData,
    PaymentMethodOptionsParam36? paymentMethodOptions,
    BuiltList<String>? paymentMethodTypes,
    String? returnUrl,
    SetupIntentSingleUseParams? singleUse,
    String? usage,
    bool? useStripeSdk,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/setup_intents';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (attachToSelf != null) r'attach_to_self': encodeQueryParameter(_serializers, attachToSelf, const FullType(bool)),
        if (automaticPaymentMethods != null) r'automatic_payment_methods': encodeQueryParameter(_serializers, automaticPaymentMethods, const FullType(AutomaticPaymentMethodsParam1)),
        if (confirm != null) r'confirm': encodeQueryParameter(_serializers, confirm, const FullType(bool)),
        if (confirmationToken != null) r'confirmation_token': encodeQueryParameter(_serializers, confirmationToken, const FullType(String)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (flowDirections != null) r'flow_directions': encodeCollectionQueryParameter<String>(_serializers, flowDirections, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (mandateData != null) r'mandate_data': encodeQueryParameter(_serializers, mandateData, const FullType(PostSetupIntentsRequestMandateData)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (onBehalfOf != null) r'on_behalf_of': encodeQueryParameter(_serializers, onBehalfOf, const FullType(String)),
        if (paymentMethod != null) r'payment_method': encodeQueryParameter(_serializers, paymentMethod, const FullType(String)),
        if (paymentMethodConfiguration != null) r'payment_method_configuration': encodeQueryParameter(_serializers, paymentMethodConfiguration, const FullType(String)),
        if (paymentMethodData != null) r'payment_method_data': encodeQueryParameter(_serializers, paymentMethodData, const FullType(PaymentMethodDataParams1)),
        if (paymentMethodOptions != null) r'payment_method_options': encodeQueryParameter(_serializers, paymentMethodOptions, const FullType(PaymentMethodOptionsParam36)),
        if (paymentMethodTypes != null) r'payment_method_types': encodeCollectionQueryParameter<String>(_serializers, paymentMethodTypes, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (returnUrl != null) r'return_url': encodeQueryParameter(_serializers, returnUrl, const FullType(String)),
        if (singleUse != null) r'single_use': encodeQueryParameter(_serializers, singleUse, const FullType(SetupIntentSingleUseParams)),
        if (usage != null) r'usage': encodeQueryParameter(_serializers, usage, const FullType(String)),
        if (useStripeSdk != null) r'use_stripe_sdk': encodeQueryParameter(_serializers, useStripeSdk, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SetupIntent? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SetupIntent),
      ) as SetupIntent;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SetupIntent>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a SetupIntent
  /// &lt;p&gt;Updates a SetupIntent object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [intent] 
  /// * [attachToSelf] - If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.  It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
  /// * [customer] - ID of the Customer this SetupIntent belongs to, if one exists.  If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [flowDirections] - Indicates the directions of money movement for which this payment method is intended to be used.  Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
  /// * [metadata] 
  /// * [paymentMethod] - ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent. To unset this field to null, pass in an empty string.
  /// * [paymentMethodConfiguration] - The ID of the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) to use with this SetupIntent.
  /// * [paymentMethodData] 
  /// * [paymentMethodOptions] 
  /// * [paymentMethodTypes] - The list of payment method types (for example, card) that this SetupIntent can set up. If you don't provide this, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods). A list of valid payment method types can be found [here](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SetupIntent] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SetupIntent>> postSetupIntentsIntent({ 
    required String intent,
    bool? attachToSelf,
    String? customer,
    String? description,
    BuiltList<String>? expand,
    BuiltList<String>? flowDirections,
    PostAccountsRequestMetadata? metadata,
    String? paymentMethod,
    String? paymentMethodConfiguration,
    PaymentMethodDataParams1? paymentMethodData,
    PaymentMethodOptionsParam36? paymentMethodOptions,
    BuiltList<String>? paymentMethodTypes,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/setup_intents/{intent}'.replaceAll('{' r'intent' '}', encodeQueryParameter(_serializers, intent, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (attachToSelf != null) r'attach_to_self': encodeQueryParameter(_serializers, attachToSelf, const FullType(bool)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (flowDirections != null) r'flow_directions': encodeCollectionQueryParameter<String>(_serializers, flowDirections, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (paymentMethod != null) r'payment_method': encodeQueryParameter(_serializers, paymentMethod, const FullType(String)),
        if (paymentMethodConfiguration != null) r'payment_method_configuration': encodeQueryParameter(_serializers, paymentMethodConfiguration, const FullType(String)),
        if (paymentMethodData != null) r'payment_method_data': encodeQueryParameter(_serializers, paymentMethodData, const FullType(PaymentMethodDataParams1)),
        if (paymentMethodOptions != null) r'payment_method_options': encodeQueryParameter(_serializers, paymentMethodOptions, const FullType(PaymentMethodOptionsParam36)),
        if (paymentMethodTypes != null) r'payment_method_types': encodeCollectionQueryParameter<String>(_serializers, paymentMethodTypes, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SetupIntent? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SetupIntent),
      ) as SetupIntent;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SetupIntent>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Cancel a SetupIntent
  /// &lt;p&gt;You can cancel a SetupIntent object when it’s in one of these statuses: &lt;code&gt;requires_payment_method&lt;/code&gt;, &lt;code&gt;requires_confirmation&lt;/code&gt;, or &lt;code&gt;requires_action&lt;/code&gt;. &lt;/p&gt;  &lt;p&gt;After you cancel it, setup is abandoned and any operations on the SetupIntent fail with an error. You can’t cancel the SetupIntent for a Checkout Session. &lt;a href&#x3D;\&quot;/docs/api/checkout/sessions/expire\&quot;&gt;Expire the Checkout Session&lt;/a&gt; instead.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [intent] 
  /// * [cancellationReason] - Reason for canceling this SetupIntent. Possible values are: `abandoned`, `requested_by_customer`, or `duplicate`
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SetupIntent] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SetupIntent>> postSetupIntentsIntentCancel({ 
    required String intent,
    String? cancellationReason,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/setup_intents/{intent}/cancel'.replaceAll('{' r'intent' '}', encodeQueryParameter(_serializers, intent, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (cancellationReason != null) r'cancellation_reason': encodeQueryParameter(_serializers, cancellationReason, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SetupIntent? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SetupIntent),
      ) as SetupIntent;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SetupIntent>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Confirm a SetupIntent
  /// &lt;p&gt;Confirm that your customer intends to set up the current or provided payment method. For example, you would confirm a SetupIntent when a customer hits the “Save” button on a payment method management page on your website.&lt;/p&gt;  &lt;p&gt;If the selected payment method does not require any additional steps from the customer, the SetupIntent will transition to the &lt;code&gt;succeeded&lt;/code&gt; status.&lt;/p&gt;  &lt;p&gt;Otherwise, it will transition to the &lt;code&gt;requires_action&lt;/code&gt; status and suggest additional actions via &lt;code&gt;next_action&lt;/code&gt;. If setup fails, the SetupIntent will transition to the &lt;code&gt;requires_payment_method&lt;/code&gt; status or the &lt;code&gt;canceled&lt;/code&gt; status if the confirmation limit is reached.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [intent] 
  /// * [clientSecret] - The client secret of the SetupIntent.
  /// * [confirmationToken] - ID of the ConfirmationToken used to confirm this SetupIntent.  If the provided ConfirmationToken contains properties that are also being provided in this request, such as `payment_method`, then the values in this request will take precedence.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [mandateData] 
  /// * [paymentMethod] - ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent.
  /// * [paymentMethodData] 
  /// * [paymentMethodOptions] 
  /// * [returnUrl] - The URL to redirect your customer back to after they authenticate on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter is only used for cards and other redirect-based payment methods.
  /// * [useStripeSdk] - Set to `true` when confirming server-side and using Stripe.js, iOS, or Android client-side SDKs to handle the next actions.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SetupIntent] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SetupIntent>> postSetupIntentsIntentConfirm({ 
    required String intent,
    String? clientSecret,
    String? confirmationToken,
    BuiltList<String>? expand,
    PostPaymentIntentsIntentConfirmRequestMandateData? mandateData,
    String? paymentMethod,
    PaymentMethodDataParams1? paymentMethodData,
    PaymentMethodOptionsParam36? paymentMethodOptions,
    String? returnUrl,
    bool? useStripeSdk,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/setup_intents/{intent}/confirm'.replaceAll('{' r'intent' '}', encodeQueryParameter(_serializers, intent, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (clientSecret != null) r'client_secret': encodeQueryParameter(_serializers, clientSecret, const FullType(String)),
        if (confirmationToken != null) r'confirmation_token': encodeQueryParameter(_serializers, confirmationToken, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (mandateData != null) r'mandate_data': encodeQueryParameter(_serializers, mandateData, const FullType(PostPaymentIntentsIntentConfirmRequestMandateData)),
        if (paymentMethod != null) r'payment_method': encodeQueryParameter(_serializers, paymentMethod, const FullType(String)),
        if (paymentMethodData != null) r'payment_method_data': encodeQueryParameter(_serializers, paymentMethodData, const FullType(PaymentMethodDataParams1)),
        if (paymentMethodOptions != null) r'payment_method_options': encodeQueryParameter(_serializers, paymentMethodOptions, const FullType(PaymentMethodOptionsParam36)),
        if (returnUrl != null) r'return_url': encodeQueryParameter(_serializers, returnUrl, const FullType(String)),
        if (useStripeSdk != null) r'use_stripe_sdk': encodeQueryParameter(_serializers, useStripeSdk, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SetupIntent? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SetupIntent),
      ) as SetupIntent;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SetupIntent>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Verify microdeposits on a SetupIntent
  /// &lt;p&gt;Verifies microdeposits on a SetupIntent object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [intent] 
  /// * [amounts] - Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account.
  /// * [clientSecret] - The client secret of the SetupIntent.
  /// * [descriptorCode] - A six-character code starting with SM present in the microdeposit sent to the bank account.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SetupIntent] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SetupIntent>> postSetupIntentsIntentVerifyMicrodeposits({ 
    required String intent,
    BuiltList<int>? amounts,
    String? clientSecret,
    String? descriptorCode,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/setup_intents/{intent}/verify_microdeposits'.replaceAll('{' r'intent' '}', encodeQueryParameter(_serializers, intent, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amounts != null) r'amounts': encodeCollectionQueryParameter<int>(_serializers, amounts, const FullType(BuiltList, [FullType(int)]), format: ListFormat.csv,),
        if (clientSecret != null) r'client_secret': encodeQueryParameter(_serializers, clientSecret, const FullType(String)),
        if (descriptorCode != null) r'descriptor_code': encodeQueryParameter(_serializers, descriptorCode, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SetupIntent? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SetupIntent),
      ) as SetupIntent;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SetupIntent>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a shipping rate
  /// &lt;p&gt;Creates a new shipping rate object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [displayName] - The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
  /// * [deliveryEstimate] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [fixedAmount] 
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [taxBehavior] - Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
  /// * [taxCode] - A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is `txcd_92010001`.
  /// * [type] - The type of calculation to use on the shipping rate.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ShippingRate] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ShippingRate>> postShippingRates({ 
    required String displayName,
    DeliveryEstimate1? deliveryEstimate,
    BuiltList<String>? expand,
    FixedAmount1? fixedAmount,
    BuiltMap<String, String>? metadata,
    String? taxBehavior,
    String? taxCode,
    String? type,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/shipping_rates';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (deliveryEstimate != null) r'delivery_estimate': encodeQueryParameter(_serializers, deliveryEstimate, const FullType(DeliveryEstimate1)),
        r'display_name': encodeQueryParameter(_serializers, displayName, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (fixedAmount != null) r'fixed_amount': encodeQueryParameter(_serializers, fixedAmount, const FullType(FixedAmount1)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (taxBehavior != null) r'tax_behavior': encodeQueryParameter(_serializers, taxBehavior, const FullType(String)),
        if (taxCode != null) r'tax_code': encodeQueryParameter(_serializers, taxCode, const FullType(String)),
        if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ShippingRate? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ShippingRate),
      ) as ShippingRate;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ShippingRate>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a shipping rate
  /// &lt;p&gt;Updates an existing shipping rate object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [shippingRateToken] 
  /// * [active] - Whether the shipping rate can be used for new purchases. Defaults to `true`.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [fixedAmount] 
  /// * [metadata] 
  /// * [taxBehavior] - Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ShippingRate] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ShippingRate>> postShippingRatesShippingRateToken({ 
    required String shippingRateToken,
    bool? active,
    BuiltList<String>? expand,
    FixedAmountUpdate? fixedAmount,
    PostAccountsRequestMetadata? metadata,
    String? taxBehavior,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/shipping_rates/{shipping_rate_token}'.replaceAll('{' r'shipping_rate_token' '}', encodeQueryParameter(_serializers, shippingRateToken, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (fixedAmount != null) r'fixed_amount': encodeQueryParameter(_serializers, fixedAmount, const FullType(FixedAmountUpdate)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (taxBehavior != null) r'tax_behavior': encodeQueryParameter(_serializers, taxBehavior, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ShippingRate? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ShippingRate),
      ) as ShippingRate;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ShippingRate>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update an existing Sigma Query
  /// &lt;p&gt;Update an existing Sigma query that previously exists&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] - The `id` of the saved query to update. This should be a valid `id` that was previously created.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [name] - The name of the query to update.
  /// * [sql] - The sql statement to update the specified query statement with. This should be a valid Trino SQL statement that can be run in Sigma.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SigmaSigmaApiQuery] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SigmaSigmaApiQuery>> postSigmaSavedQueriesId({ 
    required String id,
    BuiltList<String>? expand,
    String? name,
    String? sql,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/sigma/saved_queries/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        if (sql != null) r'sql': encodeQueryParameter(_serializers, sql, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SigmaSigmaApiQuery? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SigmaSigmaApiQuery),
      ) as SigmaSigmaApiQuery;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SigmaSigmaApiQuery>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Shares a source
  /// &lt;p&gt;Creates a new source object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [amount] - Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. Not supported for `receiver` type sources, where charge amount may not be specified until funds land.
  /// * [currency] - Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready.
  /// * [customer] - The `Customer` to whom the original source is attached to. Must be set when the original source is not a `Source` (e.g., `Card`).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [flow] - The authentication `flow` of the source to create. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. It is generally inferred unless a type supports multiple flows.
  /// * [mandate] 
  /// * [metadata] 
  /// * [originalSource] - The source to share.
  /// * [owner] 
  /// * [receiver] 
  /// * [redirect] 
  /// * [sourceOrder] 
  /// * [statementDescriptor] - An arbitrary string to be displayed on your customer's statement. As an example, if your website is `RunClub` and the item you're charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all.
  /// * [token] - An optional token used to create the source. When passed, token properties will override source parameters.
  /// * [type] - The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Cloning card Sources](https://stripe.com/docs/sources/connect#cloning-card-sources) guide)
  /// * [usage] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ModelSource] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ModelSource>> postSources({ 
    int? amount,
    String? currency,
    String? customer,
    BuiltList<String>? expand,
    String? flow,
    MandateParams? mandate,
    BuiltMap<String, String>? metadata,
    String? originalSource,
    Owner1? owner,
    ReceiverParams? receiver,
    RedirectParams? redirect,
    ShallowOrderSpecs? sourceOrder,
    String? statementDescriptor,
    String? token,
    String? type,
    String? usage,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/sources';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (flow != null) r'flow': encodeQueryParameter(_serializers, flow, const FullType(String)),
        if (mandate != null) r'mandate': encodeQueryParameter(_serializers, mandate, const FullType(MandateParams)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (originalSource != null) r'original_source': encodeQueryParameter(_serializers, originalSource, const FullType(String)),
        if (owner != null) r'owner': encodeQueryParameter(_serializers, owner, const FullType(Owner1)),
        if (receiver != null) r'receiver': encodeQueryParameter(_serializers, receiver, const FullType(ReceiverParams)),
        if (redirect != null) r'redirect': encodeQueryParameter(_serializers, redirect, const FullType(RedirectParams)),
        if (sourceOrder != null) r'source_order': encodeQueryParameter(_serializers, sourceOrder, const FullType(ShallowOrderSpecs)),
        if (statementDescriptor != null) r'statement_descriptor': encodeQueryParameter(_serializers, statementDescriptor, const FullType(String)),
        if (token != null) r'token': encodeQueryParameter(_serializers, token, const FullType(String)),
        if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
        if (usage != null) r'usage': encodeQueryParameter(_serializers, usage, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ModelSource? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ModelSource),
      ) as ModelSource;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ModelSource>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a source
  /// &lt;p&gt;Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request accepts the &lt;code&gt;metadata&lt;/code&gt; and &lt;code&gt;owner&lt;/code&gt; as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our &lt;a href&#x3D;\&quot;/docs/sources\&quot;&gt;payment method guides&lt;/a&gt; for more detail.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [source_] 
  /// * [amount] - Amount associated with the source.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [mandate] 
  /// * [metadata] 
  /// * [owner] 
  /// * [sourceOrder] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ModelSource] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ModelSource>> postSourcesSource({ 
    required String source_,
    int? amount,
    BuiltList<String>? expand,
    MandateParams? mandate,
    PostAccountsRequestMetadata? metadata,
    Owner1? owner,
    OrderParams? sourceOrder,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/sources/{source}'.replaceAll('{' r'source' '}', encodeQueryParameter(_serializers, source_, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (mandate != null) r'mandate': encodeQueryParameter(_serializers, mandate, const FullType(MandateParams)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (owner != null) r'owner': encodeQueryParameter(_serializers, owner, const FullType(Owner1)),
        if (sourceOrder != null) r'source_order': encodeQueryParameter(_serializers, sourceOrder, const FullType(OrderParams)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ModelSource? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ModelSource),
      ) as ModelSource;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ModelSource>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// postSourcesSourceVerify
  /// &lt;p&gt;Verify a given source.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [source_] 
  /// * [values] - The values needed to verify the source.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ModelSource] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ModelSource>> postSourcesSourceVerify({ 
    required String source_,
    required BuiltList<String> values,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/sources/{source}/verify'.replaceAll('{' r'source' '}', encodeQueryParameter(_serializers, source_, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'values': encodeCollectionQueryParameter<String>(_serializers, values, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ModelSource? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ModelSource),
      ) as ModelSource;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ModelSource>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a subscription item
  /// &lt;p&gt;Adds a new item to an existing subscription. No existing items will be changed or replaced.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [subscription] - The identifier of the subscription to modify.
  /// * [billingThresholds] 
  /// * [discounts] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [paymentBehavior] - Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.  Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.  Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/changelog/2019-03-14) to learn more.
  /// * [price] - The ID of the price object.
  /// * [priceData] 
  /// * [prorationBehavior] - Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`.
  /// * [prorationDate] - If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint.
  /// * [quantity] - The quantity you'd like to apply to the subscription item you're creating.
  /// * [taxRates] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SubscriptionItem] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SubscriptionItem>> postSubscriptionItems({ 
    required String subscription,
    PostSubscriptionItemsRequestBillingThresholds? billingThresholds,
    PostSubscriptionItemsRequestDiscounts? discounts,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    String? paymentBehavior,
    String? price,
    RecurringPriceData1? priceData,
    String? prorationBehavior,
    int? prorationDate,
    int? quantity,
    PostSubscriptionItemsRequestTaxRates? taxRates,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscription_items';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (billingThresholds != null) r'billing_thresholds': encodeQueryParameter(_serializers, billingThresholds, const FullType(PostSubscriptionItemsRequestBillingThresholds)),
        if (discounts != null) r'discounts': encodeQueryParameter(_serializers, discounts, const FullType(PostSubscriptionItemsRequestDiscounts)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (paymentBehavior != null) r'payment_behavior': encodeQueryParameter(_serializers, paymentBehavior, const FullType(String)),
        if (price != null) r'price': encodeQueryParameter(_serializers, price, const FullType(String)),
        if (priceData != null) r'price_data': encodeQueryParameter(_serializers, priceData, const FullType(RecurringPriceData1)),
        if (prorationBehavior != null) r'proration_behavior': encodeQueryParameter(_serializers, prorationBehavior, const FullType(String)),
        if (prorationDate != null) r'proration_date': encodeQueryParameter(_serializers, prorationDate, const FullType(int)),
        if (quantity != null) r'quantity': encodeQueryParameter(_serializers, quantity, const FullType(int)),
        r'subscription': encodeQueryParameter(_serializers, subscription, const FullType(String)),
        if (taxRates != null) r'tax_rates': encodeQueryParameter(_serializers, taxRates, const FullType(PostSubscriptionItemsRequestTaxRates)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SubscriptionItem? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SubscriptionItem),
      ) as SubscriptionItem;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SubscriptionItem>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a subscription item
  /// &lt;p&gt;Updates the plan or quantity of an item on a current subscription.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [item] 
  /// * [billingThresholds] 
  /// * [discounts] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [offSession] - Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session).
  /// * [paymentBehavior] - Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.  Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.  Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/changelog/2019-03-14) to learn more.
  /// * [price] - The ID of the price object. One of `price` or `price_data` is required. When changing a subscription item's price, `quantity` is set to 1 unless a `quantity` parameter is provided.
  /// * [priceData] 
  /// * [prorationBehavior] - Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`.
  /// * [prorationDate] - If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint.
  /// * [quantity] - The quantity you'd like to apply to the subscription item you're creating.
  /// * [taxRates] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SubscriptionItem] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SubscriptionItem>> postSubscriptionItemsItem({ 
    required String item,
    PostSubscriptionItemsRequestBillingThresholds? billingThresholds,
    PostSubscriptionItemsRequestDiscounts? discounts,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    bool? offSession,
    String? paymentBehavior,
    String? price,
    RecurringPriceData2? priceData,
    String? prorationBehavior,
    int? prorationDate,
    int? quantity,
    PostSubscriptionItemsRequestTaxRates? taxRates,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscription_items/{item}'.replaceAll('{' r'item' '}', encodeQueryParameter(_serializers, item, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (billingThresholds != null) r'billing_thresholds': encodeQueryParameter(_serializers, billingThresholds, const FullType(PostSubscriptionItemsRequestBillingThresholds)),
        if (discounts != null) r'discounts': encodeQueryParameter(_serializers, discounts, const FullType(PostSubscriptionItemsRequestDiscounts)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (offSession != null) r'off_session': encodeQueryParameter(_serializers, offSession, const FullType(bool)),
        if (paymentBehavior != null) r'payment_behavior': encodeQueryParameter(_serializers, paymentBehavior, const FullType(String)),
        if (price != null) r'price': encodeQueryParameter(_serializers, price, const FullType(String)),
        if (priceData != null) r'price_data': encodeQueryParameter(_serializers, priceData, const FullType(RecurringPriceData2)),
        if (prorationBehavior != null) r'proration_behavior': encodeQueryParameter(_serializers, prorationBehavior, const FullType(String)),
        if (prorationDate != null) r'proration_date': encodeQueryParameter(_serializers, prorationDate, const FullType(int)),
        if (quantity != null) r'quantity': encodeQueryParameter(_serializers, quantity, const FullType(int)),
        if (taxRates != null) r'tax_rates': encodeQueryParameter(_serializers, taxRates, const FullType(PostSubscriptionItemsRequestTaxRates)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SubscriptionItem? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SubscriptionItem),
      ) as SubscriptionItem;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SubscriptionItem>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a schedule
  /// &lt;p&gt;Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [billingMode] 
  /// * [customer] - The identifier of the customer to create the subscription schedule for.
  /// * [defaultSettings] 
  /// * [endBehavior] - Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [fromSubscription] - Migrate an existing subscription to be managed by a subscription schedule. If this parameter is set, a subscription schedule will be created using the subscription's item(s), set to auto-renew using the subscription's interval. When using this parameter, other parameters (such as phase values) cannot be set. To create a subscription schedule with other modifications, we recommend making two separate API calls.
  /// * [metadata] 
  /// * [phases] - List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase.
  /// * [startDate] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SubscriptionSchedule] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SubscriptionSchedule>> postSubscriptionSchedules({ 
    BillingMode1? billingMode,
    String? customer,
    DefaultSettingsParams? defaultSettings,
    String? endBehavior,
    BuiltList<String>? expand,
    String? fromSubscription,
    PostAccountsRequestMetadata? metadata,
    BuiltList<PhaseConfigurationParams1>? phases,
    PostSubscriptionSchedulesRequestStartDate? startDate,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscription_schedules';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (billingMode != null) r'billing_mode': encodeQueryParameter(_serializers, billingMode, const FullType(BillingMode1)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (defaultSettings != null) r'default_settings': encodeQueryParameter(_serializers, defaultSettings, const FullType(DefaultSettingsParams)),
        if (endBehavior != null) r'end_behavior': encodeQueryParameter(_serializers, endBehavior, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (fromSubscription != null) r'from_subscription': encodeQueryParameter(_serializers, fromSubscription, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (phases != null) r'phases': encodeCollectionQueryParameter<PhaseConfigurationParams1>(_serializers, phases, const FullType(BuiltList, [FullType(PhaseConfigurationParams1)]), format: ListFormat.csv,),
        if (startDate != null) r'start_date': encodeQueryParameter(_serializers, startDate, const FullType(PostSubscriptionSchedulesRequestStartDate)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SubscriptionSchedule? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SubscriptionSchedule),
      ) as SubscriptionSchedule;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SubscriptionSchedule>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a schedule
  /// &lt;p&gt;Updates an existing subscription schedule.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [schedule] 
  /// * [defaultSettings] 
  /// * [endBehavior] - Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [phases] - List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. Note that past phases can be omitted.
  /// * [prorationBehavior] - If the update changes the billing configuration (item price, quantity, etc.) of the current phase, indicates how prorations from this change should be handled. The default value is `create_prorations`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SubscriptionSchedule] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SubscriptionSchedule>> postSubscriptionSchedulesSchedule({ 
    required String schedule,
    DefaultSettingsParams? defaultSettings,
    String? endBehavior,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    BuiltList<PhaseConfigurationParams>? phases,
    String? prorationBehavior,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscription_schedules/{schedule}'.replaceAll('{' r'schedule' '}', encodeQueryParameter(_serializers, schedule, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (defaultSettings != null) r'default_settings': encodeQueryParameter(_serializers, defaultSettings, const FullType(DefaultSettingsParams)),
        if (endBehavior != null) r'end_behavior': encodeQueryParameter(_serializers, endBehavior, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (phases != null) r'phases': encodeCollectionQueryParameter<PhaseConfigurationParams>(_serializers, phases, const FullType(BuiltList, [FullType(PhaseConfigurationParams)]), format: ListFormat.csv,),
        if (prorationBehavior != null) r'proration_behavior': encodeQueryParameter(_serializers, prorationBehavior, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SubscriptionSchedule? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SubscriptionSchedule),
      ) as SubscriptionSchedule;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SubscriptionSchedule>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Cancel a schedule
  /// &lt;p&gt;Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is &lt;code&gt;not_started&lt;/code&gt; or &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [schedule] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [invoiceNow] - If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.
  /// * [prorate] - If the subscription schedule is `active`, indicates if the cancellation should be prorated. Defaults to `true`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SubscriptionSchedule] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SubscriptionSchedule>> postSubscriptionSchedulesScheduleCancel({ 
    required String schedule,
    BuiltList<String>? expand,
    bool? invoiceNow,
    bool? prorate,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscription_schedules/{schedule}/cancel'.replaceAll('{' r'schedule' '}', encodeQueryParameter(_serializers, schedule, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (invoiceNow != null) r'invoice_now': encodeQueryParameter(_serializers, invoiceNow, const FullType(bool)),
        if (prorate != null) r'prorate': encodeQueryParameter(_serializers, prorate, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SubscriptionSchedule? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SubscriptionSchedule),
      ) as SubscriptionSchedule;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SubscriptionSchedule>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Release a schedule
  /// &lt;p&gt;Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is &lt;code&gt;not_started&lt;/code&gt; or &lt;code&gt;active&lt;/code&gt;. If the subscription schedule is currently associated with a subscription, releasing it will remove its &lt;code&gt;subscription&lt;/code&gt; property and set the subscription’s ID to the &lt;code&gt;released_subscription&lt;/code&gt; property.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [schedule] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [preserveCancelDate] - Keep any cancellation on the subscription that the schedule has set
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [SubscriptionSchedule] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<SubscriptionSchedule>> postSubscriptionSchedulesScheduleRelease({ 
    required String schedule,
    BuiltList<String>? expand,
    bool? preserveCancelDate,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscription_schedules/{schedule}/release'.replaceAll('{' r'schedule' '}', encodeQueryParameter(_serializers, schedule, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (preserveCancelDate != null) r'preserve_cancel_date': encodeQueryParameter(_serializers, preserveCancelDate, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    SubscriptionSchedule? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(SubscriptionSchedule),
      ) as SubscriptionSchedule;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<SubscriptionSchedule>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a subscription
  /// &lt;p&gt;Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.&lt;/p&gt;  &lt;p&gt;When you create a subscription with &lt;code&gt;collection_method&#x3D;charge_automatically&lt;/code&gt;, the first invoice is finalized as part of the request. The &lt;code&gt;payment_behavior&lt;/code&gt; parameter determines the exact behavior of the initial payment.&lt;/p&gt;  &lt;p&gt;To start subscriptions where the first invoice always begins in a &lt;code&gt;draft&lt;/code&gt; status, use &lt;a href&#x3D;\&quot;/docs/billing/subscriptions/subscription-schedules#managing\&quot;&gt;subscription schedules&lt;/a&gt; instead. Schedules provide the flexibility to model more complex billing configurations that change over time.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] - The identifier of the customer to subscribe.
  /// * [addInvoiceItems] - A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items.
  /// * [applicationFeePercent] 
  /// * [automaticTax] 
  /// * [backdateStartDate] - A past timestamp to backdate the subscription's start date to. If set, the first invoice will contain line items for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor.
  /// * [billingCycleAnchor] - A future timestamp in UTC format to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). The anchor is the reference point that aligns future billing cycle dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals.
  /// * [billingCycleAnchorConfig] 
  /// * [billingMode] 
  /// * [billingThresholds] 
  /// * [cancelAt] 
  /// * [cancelAtPeriodEnd] - Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`.
  /// * [collectionMethod] - Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [daysUntilDue] - Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`.
  /// * [defaultPaymentMethod] - ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
  /// * [defaultSource] - ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
  /// * [defaultTaxRates] 
  /// * [description] - The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
  /// * [discounts] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [invoiceSettings] 
  /// * [items] - A list of up to 20 subscription items, each with an attached price.
  /// * [metadata] 
  /// * [offSession] - Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session).
  /// * [onBehalfOf] 
  /// * [paymentBehavior] - Only applies to subscriptions with `collection_method=charge_automatically`.  Use `allow_incomplete` to create Subscriptions with `status=incomplete` if the first invoice can't be paid. Creating Subscriptions with this status allows you to manage scenarios where additional customer actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.  Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the PaymentIntent on the first invoice. This allows simpler management of scenarios where additional customer actions are needed to pay a subscription’s invoice, such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the PaymentIntent is not confirmed within 23 hours Subscriptions transition to `status=incomplete_expired`, which is a terminal state.  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice can't be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further customer action is needed, this parameter doesn't create a Subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.  `pending_if_incomplete` is only used with updates and cannot be passed when creating a Subscription.  Subscriptions with `collection_method=send_invoice` are automatically activated regardless of the first Invoice status.
  /// * [paymentSettings] 
  /// * [pendingInvoiceItemInterval] 
  /// * [prorationBehavior] - Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) resulting from the `billing_cycle_anchor`. If no value is passed, the default is `create_prorations`.
  /// * [transferData] 
  /// * [trialEnd] 
  /// * [trialFromPlan] - Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
  /// * [trialPeriodDays] - Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
  /// * [trialSettings] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Subscription] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Subscription>> postSubscriptions({ 
    required String customer,
    BuiltList<AddInvoiceItemEntry>? addInvoiceItems,
    PostCustomersCustomerSubscriptionsRequestApplicationFeePercent? applicationFeePercent,
    AutomaticTaxConfig? automaticTax,
    int? backdateStartDate,
    int? billingCycleAnchor,
    BillingCycleAnchorConfigParam? billingCycleAnchorConfig,
    BillingMode1? billingMode,
    PostCustomersCustomerSubscriptionsRequestBillingThresholds? billingThresholds,
    PostCustomersCustomerSubscriptionsRequestCancelAt? cancelAt,
    bool? cancelAtPeriodEnd,
    String? collectionMethod,
    String? currency,
    int? daysUntilDue,
    String? defaultPaymentMethod,
    String? defaultSource,
    PostCustomersCustomerSubscriptionsRequestDefaultTaxRates? defaultTaxRates,
    String? description,
    PostCustomersCustomerSubscriptionsRequestDiscounts? discounts,
    BuiltList<String>? expand,
    InvoiceSettingsParam? invoiceSettings,
    BuiltList<SubscriptionItemCreateParams>? items,
    PostAccountsRequestMetadata? metadata,
    bool? offSession,
    PostSubscriptionsRequestOnBehalfOf? onBehalfOf,
    String? paymentBehavior,
    PaymentSettings? paymentSettings,
    PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? pendingInvoiceItemInterval,
    String? prorationBehavior,
    TransferDataSpecs3? transferData,
    PostCustomersCustomerSubscriptionsRequestTrialEnd? trialEnd,
    bool? trialFromPlan,
    int? trialPeriodDays,
    TrialSettingsConfig1? trialSettings,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscriptions';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (addInvoiceItems != null) r'add_invoice_items': encodeCollectionQueryParameter<AddInvoiceItemEntry>(_serializers, addInvoiceItems, const FullType(BuiltList, [FullType(AddInvoiceItemEntry)]), format: ListFormat.csv,),
        if (applicationFeePercent != null) r'application_fee_percent': encodeQueryParameter(_serializers, applicationFeePercent, const FullType(PostCustomersCustomerSubscriptionsRequestApplicationFeePercent)),
        if (automaticTax != null) r'automatic_tax': encodeQueryParameter(_serializers, automaticTax, const FullType(AutomaticTaxConfig)),
        if (backdateStartDate != null) r'backdate_start_date': encodeQueryParameter(_serializers, backdateStartDate, const FullType(int)),
        if (billingCycleAnchor != null) r'billing_cycle_anchor': encodeQueryParameter(_serializers, billingCycleAnchor, const FullType(int)),
        if (billingCycleAnchorConfig != null) r'billing_cycle_anchor_config': encodeQueryParameter(_serializers, billingCycleAnchorConfig, const FullType(BillingCycleAnchorConfigParam)),
        if (billingMode != null) r'billing_mode': encodeQueryParameter(_serializers, billingMode, const FullType(BillingMode1)),
        if (billingThresholds != null) r'billing_thresholds': encodeQueryParameter(_serializers, billingThresholds, const FullType(PostCustomersCustomerSubscriptionsRequestBillingThresholds)),
        if (cancelAt != null) r'cancel_at': encodeQueryParameter(_serializers, cancelAt, const FullType(PostCustomersCustomerSubscriptionsRequestCancelAt)),
        if (cancelAtPeriodEnd != null) r'cancel_at_period_end': encodeQueryParameter(_serializers, cancelAtPeriodEnd, const FullType(bool)),
        if (collectionMethod != null) r'collection_method': encodeQueryParameter(_serializers, collectionMethod, const FullType(String)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (daysUntilDue != null) r'days_until_due': encodeQueryParameter(_serializers, daysUntilDue, const FullType(int)),
        if (defaultPaymentMethod != null) r'default_payment_method': encodeQueryParameter(_serializers, defaultPaymentMethod, const FullType(String)),
        if (defaultSource != null) r'default_source': encodeQueryParameter(_serializers, defaultSource, const FullType(String)),
        if (defaultTaxRates != null) r'default_tax_rates': encodeQueryParameter(_serializers, defaultTaxRates, const FullType(PostCustomersCustomerSubscriptionsRequestDefaultTaxRates)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (discounts != null) r'discounts': encodeQueryParameter(_serializers, discounts, const FullType(PostCustomersCustomerSubscriptionsRequestDiscounts)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (invoiceSettings != null) r'invoice_settings': encodeQueryParameter(_serializers, invoiceSettings, const FullType(InvoiceSettingsParam)),
        if (items != null) r'items': encodeCollectionQueryParameter<SubscriptionItemCreateParams>(_serializers, items, const FullType(BuiltList, [FullType(SubscriptionItemCreateParams)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (offSession != null) r'off_session': encodeQueryParameter(_serializers, offSession, const FullType(bool)),
        if (onBehalfOf != null) r'on_behalf_of': encodeQueryParameter(_serializers, onBehalfOf, const FullType(PostSubscriptionsRequestOnBehalfOf)),
        if (paymentBehavior != null) r'payment_behavior': encodeQueryParameter(_serializers, paymentBehavior, const FullType(String)),
        if (paymentSettings != null) r'payment_settings': encodeQueryParameter(_serializers, paymentSettings, const FullType(PaymentSettings)),
        if (pendingInvoiceItemInterval != null) r'pending_invoice_item_interval': encodeQueryParameter(_serializers, pendingInvoiceItemInterval, const FullType(PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval)),
        if (prorationBehavior != null) r'proration_behavior': encodeQueryParameter(_serializers, prorationBehavior, const FullType(String)),
        if (transferData != null) r'transfer_data': encodeQueryParameter(_serializers, transferData, const FullType(TransferDataSpecs3)),
        if (trialEnd != null) r'trial_end': encodeQueryParameter(_serializers, trialEnd, const FullType(PostCustomersCustomerSubscriptionsRequestTrialEnd)),
        if (trialFromPlan != null) r'trial_from_plan': encodeQueryParameter(_serializers, trialFromPlan, const FullType(bool)),
        if (trialPeriodDays != null) r'trial_period_days': encodeQueryParameter(_serializers, trialPeriodDays, const FullType(int)),
        if (trialSettings != null) r'trial_settings': encodeQueryParameter(_serializers, trialSettings, const FullType(TrialSettingsConfig1)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Subscription? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Subscription),
      ) as Subscription;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Subscription>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a subscription
  /// &lt;p&gt;Updates an existing subscription to match the specified parameters. When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes. To preview how the proration is calculated, use the &lt;a href&#x3D;\&quot;/docs/api/invoices/create_preview\&quot;&gt;create preview&lt;/a&gt; endpoint.&lt;/p&gt;  &lt;p&gt;By default, we prorate subscription changes. For example, if a customer signs up on May 1 for a &lt;currency&gt;100&lt;/currency&gt; price, they’ll be billed &lt;currency&gt;100&lt;/currency&gt; immediately. If on May 15 they switch to a &lt;currency&gt;200&lt;/currency&gt; price, then on June 1 they’ll be billed &lt;currency&gt;250&lt;/currency&gt; (&lt;currency&gt;200&lt;/currency&gt; for a renewal of her subscription, plus a &lt;currency&gt;50&lt;/currency&gt; prorating adjustment for half of the previous month’s &lt;currency&gt;100&lt;/currency&gt; difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.&lt;/p&gt;  &lt;p&gt;Switching prices does not normally change the billing date or generate an immediate charge unless:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;The billing interval is changed (for example, from monthly to yearly).&lt;/li&gt; &lt;li&gt;The subscription moves from free to paid.&lt;/li&gt; &lt;li&gt;A trial starts or ends.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;In these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date. Learn about how &lt;a href&#x3D;\&quot;/docs/billing/subscriptions/upgrade-downgrade#immediate-payment\&quot;&gt;Stripe immediately attempts payment for subscription changes&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;If you want to charge for an upgrade immediately, pass &lt;code&gt;proration_behavior&lt;/code&gt; as &lt;code&gt;always_invoice&lt;/code&gt; to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass &lt;code&gt;create_prorations&lt;/code&gt;, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually &lt;a href&#x3D;\&quot;/docs/api/invoices/create\&quot;&gt;invoice the customer&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;If you don’t want to prorate, set the &lt;code&gt;proration_behavior&lt;/code&gt; option to &lt;code&gt;none&lt;/code&gt;. With this option, the customer is billed &lt;currency&gt;100&lt;/currency&gt; on May 1 and &lt;currency&gt;200&lt;/currency&gt; on June 1. Similarly, if you set &lt;code&gt;proration_behavior&lt;/code&gt; to &lt;code&gt;none&lt;/code&gt; when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.&lt;/p&gt;  &lt;p&gt;Updating the quantity on a subscription many times in an hour may result in &lt;a href&#x3D;\&quot;/docs/rate-limits\&quot;&gt;rate limiting&lt;/a&gt;. If you need to bill for a frequently changing quantity, consider integrating &lt;a href&#x3D;\&quot;/docs/billing/subscriptions/usage-based\&quot;&gt;usage-based billing&lt;/a&gt; instead.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [subscriptionExposedId] 
  /// * [addInvoiceItems] - A list of prices and quantities that will generate invoice items appended to the next invoice for this subscription. You may pass up to 20 items.
  /// * [applicationFeePercent] 
  /// * [automaticTax] 
  /// * [billingCycleAnchor] - Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time (in UTC). For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
  /// * [billingThresholds] 
  /// * [cancelAt] 
  /// * [cancelAtPeriodEnd] - Indicate whether this subscription should cancel at the end of the current period (`current_period_end`). Defaults to `false`.
  /// * [cancellationDetails] 
  /// * [collectionMethod] - Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
  /// * [daysUntilDue] - Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`.
  /// * [defaultPaymentMethod] - ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
  /// * [defaultSource] 
  /// * [defaultTaxRates] 
  /// * [description] 
  /// * [discounts] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [invoiceSettings] 
  /// * [items] - A list of up to 20 subscription items, each with an attached price.
  /// * [metadata] 
  /// * [offSession] - Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `false` (on-session).
  /// * [onBehalfOf] 
  /// * [pauseCollection] 
  /// * [paymentBehavior] - Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.  Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.  Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://docs.stripe.com/changelog/2019-03-14) to learn more.
  /// * [paymentSettings] 
  /// * [pendingInvoiceItemInterval] 
  /// * [prorationBehavior] - Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`.
  /// * [prorationDate] - If set, prorations will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same prorations that were previewed with the [create preview](https://stripe.com/docs/api/invoices/create_preview) endpoint. `proration_date` can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations.
  /// * [transferData] 
  /// * [trialEnd] 
  /// * [trialFromPlan] - Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
  /// * [trialSettings] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Subscription] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Subscription>> postSubscriptionsSubscriptionExposedId({ 
    required String subscriptionExposedId,
    BuiltList<AddInvoiceItemEntry>? addInvoiceItems,
    PostCustomersCustomerSubscriptionsRequestApplicationFeePercent? applicationFeePercent,
    AutomaticTaxConfig1? automaticTax,
    String? billingCycleAnchor,
    PostCustomersCustomerSubscriptionsRequestBillingThresholds? billingThresholds,
    PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestCancelAt? cancelAt,
    bool? cancelAtPeriodEnd,
    CancellationDetailsParam? cancellationDetails,
    String? collectionMethod,
    int? daysUntilDue,
    String? defaultPaymentMethod,
    PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestDefaultSource? defaultSource,
    PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates? defaultTaxRates,
    PostSubscriptionsSubscriptionExposedIdRequestDescription? description,
    PostCustomersCustomerSubscriptionsRequestDiscounts? discounts,
    BuiltList<String>? expand,
    InvoiceSettingsParam? invoiceSettings,
    BuiltList<SubscriptionItemUpdateParams>? items,
    PostAccountsRequestMetadata? metadata,
    bool? offSession,
    PostSubscriptionsRequestOnBehalfOf? onBehalfOf,
    PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestPauseCollection? pauseCollection,
    String? paymentBehavior,
    PaymentSettings? paymentSettings,
    PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval? pendingInvoiceItemInterval,
    String? prorationBehavior,
    int? prorationDate,
    PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestTransferData? transferData,
    PostSubscriptionsSubscriptionExposedIdRequestTrialEnd? trialEnd,
    bool? trialFromPlan,
    TrialSettingsConfig1? trialSettings,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscriptions/{subscription_exposed_id}'.replaceAll('{' r'subscription_exposed_id' '}', encodeQueryParameter(_serializers, subscriptionExposedId, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (addInvoiceItems != null) r'add_invoice_items': encodeCollectionQueryParameter<AddInvoiceItemEntry>(_serializers, addInvoiceItems, const FullType(BuiltList, [FullType(AddInvoiceItemEntry)]), format: ListFormat.csv,),
        if (applicationFeePercent != null) r'application_fee_percent': encodeQueryParameter(_serializers, applicationFeePercent, const FullType(PostCustomersCustomerSubscriptionsRequestApplicationFeePercent)),
        if (automaticTax != null) r'automatic_tax': encodeQueryParameter(_serializers, automaticTax, const FullType(AutomaticTaxConfig1)),
        if (billingCycleAnchor != null) r'billing_cycle_anchor': encodeQueryParameter(_serializers, billingCycleAnchor, const FullType(String)),
        if (billingThresholds != null) r'billing_thresholds': encodeQueryParameter(_serializers, billingThresholds, const FullType(PostCustomersCustomerSubscriptionsRequestBillingThresholds)),
        if (cancelAt != null) r'cancel_at': encodeQueryParameter(_serializers, cancelAt, const FullType(PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestCancelAt)),
        if (cancelAtPeriodEnd != null) r'cancel_at_period_end': encodeQueryParameter(_serializers, cancelAtPeriodEnd, const FullType(bool)),
        if (cancellationDetails != null) r'cancellation_details': encodeQueryParameter(_serializers, cancellationDetails, const FullType(CancellationDetailsParam)),
        if (collectionMethod != null) r'collection_method': encodeQueryParameter(_serializers, collectionMethod, const FullType(String)),
        if (daysUntilDue != null) r'days_until_due': encodeQueryParameter(_serializers, daysUntilDue, const FullType(int)),
        if (defaultPaymentMethod != null) r'default_payment_method': encodeQueryParameter(_serializers, defaultPaymentMethod, const FullType(String)),
        if (defaultSource != null) r'default_source': encodeQueryParameter(_serializers, defaultSource, const FullType(PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestDefaultSource)),
        if (defaultTaxRates != null) r'default_tax_rates': encodeQueryParameter(_serializers, defaultTaxRates, const FullType(PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestDefaultTaxRates)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(PostSubscriptionsSubscriptionExposedIdRequestDescription)),
        if (discounts != null) r'discounts': encodeQueryParameter(_serializers, discounts, const FullType(PostCustomersCustomerSubscriptionsRequestDiscounts)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (invoiceSettings != null) r'invoice_settings': encodeQueryParameter(_serializers, invoiceSettings, const FullType(InvoiceSettingsParam)),
        if (items != null) r'items': encodeCollectionQueryParameter<SubscriptionItemUpdateParams>(_serializers, items, const FullType(BuiltList, [FullType(SubscriptionItemUpdateParams)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (offSession != null) r'off_session': encodeQueryParameter(_serializers, offSession, const FullType(bool)),
        if (onBehalfOf != null) r'on_behalf_of': encodeQueryParameter(_serializers, onBehalfOf, const FullType(PostSubscriptionsRequestOnBehalfOf)),
        if (pauseCollection != null) r'pause_collection': encodeQueryParameter(_serializers, pauseCollection, const FullType(PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestPauseCollection)),
        if (paymentBehavior != null) r'payment_behavior': encodeQueryParameter(_serializers, paymentBehavior, const FullType(String)),
        if (paymentSettings != null) r'payment_settings': encodeQueryParameter(_serializers, paymentSettings, const FullType(PaymentSettings)),
        if (pendingInvoiceItemInterval != null) r'pending_invoice_item_interval': encodeQueryParameter(_serializers, pendingInvoiceItemInterval, const FullType(PostCustomersCustomerSubscriptionsRequestPendingInvoiceItemInterval)),
        if (prorationBehavior != null) r'proration_behavior': encodeQueryParameter(_serializers, prorationBehavior, const FullType(String)),
        if (prorationDate != null) r'proration_date': encodeQueryParameter(_serializers, prorationDate, const FullType(int)),
        if (transferData != null) r'transfer_data': encodeQueryParameter(_serializers, transferData, const FullType(PostCustomersCustomerSubscriptionsSubscriptionExposedIdRequestTransferData)),
        if (trialEnd != null) r'trial_end': encodeQueryParameter(_serializers, trialEnd, const FullType(PostSubscriptionsSubscriptionExposedIdRequestTrialEnd)),
        if (trialFromPlan != null) r'trial_from_plan': encodeQueryParameter(_serializers, trialFromPlan, const FullType(bool)),
        if (trialSettings != null) r'trial_settings': encodeQueryParameter(_serializers, trialSettings, const FullType(TrialSettingsConfig1)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Subscription? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Subscription),
      ) as Subscription;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Subscription>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Migrate a subscription
  /// &lt;p&gt;Upgrade the billing_mode of an existing subscription.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [subscription] 
  /// * [billingMode] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Subscription] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Subscription>> postSubscriptionsSubscriptionMigrate({ 
    required String subscription,
    required BillingModeMigrate billingMode,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscriptions/{subscription}/migrate'.replaceAll('{' r'subscription' '}', encodeQueryParameter(_serializers, subscription, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'billing_mode': encodeQueryParameter(_serializers, billingMode, const FullType(BillingModeMigrate)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Subscription? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Subscription),
      ) as Subscription;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Subscription>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Resume a subscription
  /// &lt;p&gt;Initiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become &lt;code&gt;active&lt;/code&gt;, and if payment fails the subscription will be &lt;code&gt;past_due&lt;/code&gt;. The resumption invoice will void automatically if not paid by the expiration date.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [subscription] 
  /// * [billingCycleAnchor] - The billing cycle anchor that applies when the subscription is resumed. Either `now` or `unchanged`. The default is `now`. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [prorationBehavior] - Determines how to handle [prorations](https://stripe.com/docs/billing/subscriptions/prorations) resulting from the `billing_cycle_anchor` being `unchanged`. When the `billing_cycle_anchor` is set to `now` (default value), no prorations are generated. If no value is passed, the default is `create_prorations`.
  /// * [prorationDate] - If set, prorations will be calculated as though the subscription was resumed at the given time. This can be used to apply exactly the same prorations that were previewed with the [create preview](https://stripe.com/docs/api/invoices/create_preview) endpoint.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Subscription] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Subscription>> postSubscriptionsSubscriptionResume({ 
    required String subscription,
    String? billingCycleAnchor,
    BuiltList<String>? expand,
    String? prorationBehavior,
    int? prorationDate,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/subscriptions/{subscription}/resume'.replaceAll('{' r'subscription' '}', encodeQueryParameter(_serializers, subscription, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (billingCycleAnchor != null) r'billing_cycle_anchor': encodeQueryParameter(_serializers, billingCycleAnchor, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (prorationBehavior != null) r'proration_behavior': encodeQueryParameter(_serializers, prorationBehavior, const FullType(String)),
        if (prorationDate != null) r'proration_date': encodeQueryParameter(_serializers, prorationDate, const FullType(int)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Subscription? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Subscription),
      ) as Subscription;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Subscription>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a Tax Calculation
  /// &lt;p&gt;Calculates tax based on the input and returns a Tax &lt;code&gt;Calculation&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [lineItems] - A list of items the customer is purchasing.
  /// * [customer] - The ID of an existing customer to use for this calculation. If provided, the customer's address and tax IDs are copied to `customer_details`.
  /// * [customerDetails] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [shipFromDetails] 
  /// * [shippingCost] 
  /// * [taxDate] - Timestamp of date at which the tax rules and rates in effect applies for the calculation. Measured in seconds since the Unix epoch. Can be up to 48 hours in the past, and up to 48 hours in the future.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxCalculation] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxCalculation>> postTaxCalculations({ 
    required String currency,
    required BuiltList<CalculationLineItem> lineItems,
    String? customer,
    CustomerDetails? customerDetails,
    BuiltList<String>? expand,
    ShipFromDetails? shipFromDetails,
    ShippingCost2? shippingCost,
    int? taxDate,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax/calculations';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (customerDetails != null) r'customer_details': encodeQueryParameter(_serializers, customerDetails, const FullType(CustomerDetails)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'line_items': encodeCollectionQueryParameter<CalculationLineItem>(_serializers, lineItems, const FullType(BuiltList, [FullType(CalculationLineItem)]), format: ListFormat.csv,),
        if (shipFromDetails != null) r'ship_from_details': encodeQueryParameter(_serializers, shipFromDetails, const FullType(ShipFromDetails)),
        if (shippingCost != null) r'shipping_cost': encodeQueryParameter(_serializers, shippingCost, const FullType(ShippingCost2)),
        if (taxDate != null) r'tax_date': encodeQueryParameter(_serializers, taxDate, const FullType(int)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxCalculation? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxCalculation),
      ) as TaxCalculation;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxCalculation>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a tax ID
  /// &lt;p&gt;Creates a new account or customer &lt;code&gt;tax_id&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [type] - Type of the tax ID, one of `ad_nrt`, `ae_trn`, `al_tin`, `am_tin`, `ao_tin`, `ar_cuit`, `au_abn`, `au_arn`, `aw_tin`, `az_tin`, `ba_tin`, `bb_tin`, `bd_bin`, `bf_ifu`, `bg_uic`, `bh_vat`, `bj_ifu`, `bo_tin`, `br_cnpj`, `br_cpf`, `bs_tin`, `by_tin`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `cd_nif`, `ch_uid`, `ch_vat`, `cl_tin`, `cm_niu`, `cn_tin`, `co_nit`, `cr_tin`, `cv_nif`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `et_tin`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `gn_nif`, `hk_br`, `hr_oib`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kg_tin`, `kh_tin`, `kr_brn`, `kz_bin`, `la_tin`, `li_uid`, `li_vat`, `ma_vat`, `md_vat`, `me_pib`, `mk_vat`, `mr_nif`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `np_pan`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sn_ninea`, `sr_fin`, `sv_nit`, `th_vat`, `tj_tin`, `tr_tin`, `tw_vat`, `tz_vat`, `ua_vat`, `ug_tin`, `us_ein`, `uy_ruc`, `uz_tin`, `uz_vat`, `ve_rif`, `vn_tin`, `za_vat`, `zm_tin`, or `zw_tin`
  /// * [value] - Value of the tax ID.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [owner] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxId] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxId>> postTaxIds({ 
    required String type,
    required String value,
    BuiltList<String>? expand,
    OwnerParams1? owner,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax_ids';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (owner != null) r'owner': encodeQueryParameter(_serializers, owner, const FullType(OwnerParams1)),
        r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
        r'value': encodeQueryParameter(_serializers, value, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxId? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxId),
      ) as TaxId;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxId>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a tax rate
  /// &lt;p&gt;Creates a new tax rate.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [displayName] - The display name of the tax rate, which will be shown to users.
  /// * [inclusive] - This specifies if the tax rate is inclusive or exclusive.
  /// * [percentage] - This represents the tax rate percent out of 100.
  /// * [active] - Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
  /// * [country] - Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  /// * [description] - An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [jurisdiction] - The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [state] - [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2), without country prefix. For example, \\\"NY\\\" for New York, United States.
  /// * [taxType] - The high-level tax type, such as `vat` or `sales_tax`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxRate] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxRate>> postTaxRates({ 
    required String displayName,
    required bool inclusive,
    required num percentage,
    bool? active,
    String? country,
    String? description,
    BuiltList<String>? expand,
    String? jurisdiction,
    BuiltMap<String, String>? metadata,
    String? state,
    String? taxType,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax_rates';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
        if (country != null) r'country': encodeQueryParameter(_serializers, country, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        r'display_name': encodeQueryParameter(_serializers, displayName, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'inclusive': encodeQueryParameter(_serializers, inclusive, const FullType(bool)),
        if (jurisdiction != null) r'jurisdiction': encodeQueryParameter(_serializers, jurisdiction, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        r'percentage': encodeQueryParameter(_serializers, percentage, const FullType(num)),
        if (state != null) r'state': encodeQueryParameter(_serializers, state, const FullType(String)),
        if (taxType != null) r'tax_type': encodeQueryParameter(_serializers, taxType, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxRate? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxRate),
      ) as TaxRate;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxRate>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a tax rate
  /// &lt;p&gt;Updates an existing tax rate.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [taxRate] 
  /// * [active] - Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
  /// * [country] - Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  /// * [description] - An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
  /// * [displayName] - The display name of the tax rate, which will be shown to users.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [jurisdiction] - The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
  /// * [metadata] 
  /// * [state] - [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2), without country prefix. For example, \\\"NY\\\" for New York, United States.
  /// * [taxType] - The high-level tax type, such as `vat` or `sales_tax`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxRate] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxRate>> postTaxRatesTaxRate({ 
    required String taxRate,
    bool? active,
    String? country,
    String? description,
    String? displayName,
    BuiltList<String>? expand,
    String? jurisdiction,
    PostAccountsRequestMetadata? metadata,
    String? state,
    String? taxType,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax_rates/{tax_rate}'.replaceAll('{' r'tax_rate' '}', encodeQueryParameter(_serializers, taxRate, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (active != null) r'active': encodeQueryParameter(_serializers, active, const FullType(bool)),
        if (country != null) r'country': encodeQueryParameter(_serializers, country, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (displayName != null) r'display_name': encodeQueryParameter(_serializers, displayName, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (jurisdiction != null) r'jurisdiction': encodeQueryParameter(_serializers, jurisdiction, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (state != null) r'state': encodeQueryParameter(_serializers, state, const FullType(String)),
        if (taxType != null) r'tax_type': encodeQueryParameter(_serializers, taxType, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxRate? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxRate),
      ) as TaxRate;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxRate>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a registration
  /// &lt;p&gt;Creates a new Tax &lt;code&gt;Registration&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [activeFrom] 
  /// * [country] - Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
  /// * [countryOptions] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [expiresAt] - If set, the Tax Registration stops being active at this time. If not set, the Tax Registration will be active indefinitely. Timestamp measured in seconds since the Unix epoch.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxRegistration] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxRegistration>> postTaxRegistrations({ 
    required PostTaxRegistrationsRequestActiveFrom activeFrom,
    required String country,
    required CountryOptions countryOptions,
    BuiltList<String>? expand,
    int? expiresAt,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax/registrations';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'active_from': encodeQueryParameter(_serializers, activeFrom, const FullType(PostTaxRegistrationsRequestActiveFrom)),
        r'country': encodeQueryParameter(_serializers, country, const FullType(String)),
        r'country_options': encodeQueryParameter(_serializers, countryOptions, const FullType(CountryOptions)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (expiresAt != null) r'expires_at': encodeQueryParameter(_serializers, expiresAt, const FullType(int)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxRegistration? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxRegistration),
      ) as TaxRegistration;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxRegistration>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a registration
  /// &lt;p&gt;Updates an existing Tax &lt;code&gt;Registration&lt;/code&gt; object.&lt;/p&gt;  &lt;p&gt;A registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting &lt;code&gt;expires_at&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [activeFrom] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [expiresAt] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxRegistration] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxRegistration>> postTaxRegistrationsId({ 
    required String id,
    PostTaxRegistrationsIdRequestActiveFrom? activeFrom,
    BuiltList<String>? expand,
    PostTaxRegistrationsIdRequestExpiresAt? expiresAt,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax/registrations/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (activeFrom != null) r'active_from': encodeQueryParameter(_serializers, activeFrom, const FullType(PostTaxRegistrationsIdRequestActiveFrom)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (expiresAt != null) r'expires_at': encodeQueryParameter(_serializers, expiresAt, const FullType(PostTaxRegistrationsIdRequestExpiresAt)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxRegistration? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxRegistration),
      ) as TaxRegistration;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxRegistration>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update settings
  /// &lt;p&gt;Updates Tax &lt;code&gt;Settings&lt;/code&gt; parameters used in tax calculations. All parameters are editable but none can be removed once set.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [defaults] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [headOffice] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxSettings] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxSettings>> postTaxSettings({ 
    DefaultsParam? defaults,
    BuiltList<String>? expand,
    HeadOfficeParam? headOffice,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax/settings';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (defaults != null) r'defaults': encodeQueryParameter(_serializers, defaults, const FullType(DefaultsParam)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (headOffice != null) r'head_office': encodeQueryParameter(_serializers, headOffice, const FullType(HeadOfficeParam)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxSettings? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxSettings),
      ) as TaxSettings;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxSettings>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a transaction from a calculation
  /// &lt;p&gt;Creates a Tax Transaction from a calculation, if that calculation hasn’t expired. Calculations expire after 90 days.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [calculation] - Tax Calculation ID to be used as input when creating the transaction.
  /// * [reference] - A custom order or sale identifier, such as 'myOrder_123'. Must be unique across all transactions, including reversals.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [postedAt] - The Unix timestamp representing when the tax liability is assumed or reduced, which determines the liability posting period and handling in tax liability reports. The timestamp must fall within the `tax_date` and the current time, unless the `tax_date` is scheduled in advance. Defaults to the current time.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxTransaction>> postTaxTransactionsCreateFromCalculation({ 
    required String calculation,
    required String reference,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    int? postedAt,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax/transactions/create_from_calculation';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'calculation': encodeQueryParameter(_serializers, calculation, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (postedAt != null) r'posted_at': encodeQueryParameter(_serializers, postedAt, const FullType(int)),
        r'reference': encodeQueryParameter(_serializers, reference, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxTransaction),
      ) as TaxTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a reversal transaction
  /// &lt;p&gt;Partially or fully reverses a previously created &lt;code&gt;Transaction&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [mode] - If `partial`, the provided line item or shipping cost amounts are reversed. If `full`, the original transaction is fully reversed.
  /// * [originalTransaction] - The ID of the Transaction to partially or fully reverse.
  /// * [reference] - A custom identifier for this reversal, such as `myOrder_123-refund_1`, which must be unique across all transactions. The reference helps identify this reversal transaction in exported [tax reports](https://stripe.com/docs/tax/reports).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [flatAmount] - A flat amount to reverse across the entire transaction, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) in negative. This value represents the total amount to refund from the transaction, including taxes.
  /// * [lineItems] - The line item amounts to reverse.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [shippingCost] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TaxTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TaxTransaction>> postTaxTransactionsCreateReversal({ 
    required String mode,
    required String originalTransaction,
    required String reference,
    BuiltList<String>? expand,
    int? flatAmount,
    BuiltList<TransactionLineItemReversal>? lineItems,
    BuiltMap<String, String>? metadata,
    TransactionShippingCostReversal? shippingCost,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tax/transactions/create_reversal';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (flatAmount != null) r'flat_amount': encodeQueryParameter(_serializers, flatAmount, const FullType(int)),
        if (lineItems != null) r'line_items': encodeCollectionQueryParameter<TransactionLineItemReversal>(_serializers, lineItems, const FullType(BuiltList, [FullType(TransactionLineItemReversal)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        r'mode': encodeQueryParameter(_serializers, mode, const FullType(String)),
        r'original_transaction': encodeQueryParameter(_serializers, originalTransaction, const FullType(String)),
        r'reference': encodeQueryParameter(_serializers, reference, const FullType(String)),
        if (shippingCost != null) r'shipping_cost': encodeQueryParameter(_serializers, shippingCost, const FullType(TransactionShippingCostReversal)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TaxTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TaxTransaction),
      ) as TaxTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TaxTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a Configuration
  /// &lt;p&gt;Creates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [bbposWiseposE] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [name] - Name of the configuration
  /// * [offline] 
  /// * [rebootWindow] 
  /// * [stripeS700] 
  /// * [tipping] 
  /// * [verifoneP400] 
  /// * [wifi] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalConfiguration] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalConfiguration>> postTerminalConfigurations({ 
    BbposWisePose? bbposWiseposE,
    BuiltList<String>? expand,
    String? name,
    PostTerminalConfigurationsRequestOffline? offline,
    RebootWindow? rebootWindow,
    StripeS700? stripeS700,
    PostTerminalConfigurationsRequestTipping? tipping,
    VerifoneP400? verifoneP400,
    PostTerminalConfigurationsRequestWifi? wifi,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/configurations';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (bbposWiseposE != null) r'bbpos_wisepos_e': encodeQueryParameter(_serializers, bbposWiseposE, const FullType(BbposWisePose)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        if (offline != null) r'offline': encodeQueryParameter(_serializers, offline, const FullType(PostTerminalConfigurationsRequestOffline)),
        if (rebootWindow != null) r'reboot_window': encodeQueryParameter(_serializers, rebootWindow, const FullType(RebootWindow)),
        if (stripeS700 != null) r'stripe_s700': encodeQueryParameter(_serializers, stripeS700, const FullType(StripeS700)),
        if (tipping != null) r'tipping': encodeQueryParameter(_serializers, tipping, const FullType(PostTerminalConfigurationsRequestTipping)),
        if (verifoneP400 != null) r'verifone_p400': encodeQueryParameter(_serializers, verifoneP400, const FullType(VerifoneP400)),
        if (wifi != null) r'wifi': encodeQueryParameter(_serializers, wifi, const FullType(PostTerminalConfigurationsRequestWifi)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalConfiguration? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalConfiguration),
      ) as TerminalConfiguration;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalConfiguration>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a Configuration
  /// &lt;p&gt;Updates a new &lt;code&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [configuration] 
  /// * [bbposWiseposE] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [name] - Name of the configuration
  /// * [offline] 
  /// * [rebootWindow] 
  /// * [stripeS700] 
  /// * [tipping] 
  /// * [verifoneP400] 
  /// * [wifi] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [GetTerminalConfigurationsConfiguration200Response] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<GetTerminalConfigurationsConfiguration200Response>> postTerminalConfigurationsConfiguration({ 
    required String configuration,
    PostTerminalConfigurationsConfigurationRequestBbposWiseposE? bbposWiseposE,
    BuiltList<String>? expand,
    String? name,
    PostTerminalConfigurationsRequestOffline? offline,
    PostTerminalConfigurationsConfigurationRequestRebootWindow? rebootWindow,
    PostTerminalConfigurationsConfigurationRequestStripeS700? stripeS700,
    PostTerminalConfigurationsRequestTipping? tipping,
    PostTerminalConfigurationsConfigurationRequestVerifoneP400? verifoneP400,
    PostTerminalConfigurationsRequestWifi? wifi,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/configurations/{configuration}'.replaceAll('{' r'configuration' '}', encodeQueryParameter(_serializers, configuration, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (bbposWiseposE != null) r'bbpos_wisepos_e': encodeQueryParameter(_serializers, bbposWiseposE, const FullType(PostTerminalConfigurationsConfigurationRequestBbposWiseposE)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
        if (offline != null) r'offline': encodeQueryParameter(_serializers, offline, const FullType(PostTerminalConfigurationsRequestOffline)),
        if (rebootWindow != null) r'reboot_window': encodeQueryParameter(_serializers, rebootWindow, const FullType(PostTerminalConfigurationsConfigurationRequestRebootWindow)),
        if (stripeS700 != null) r'stripe_s700': encodeQueryParameter(_serializers, stripeS700, const FullType(PostTerminalConfigurationsConfigurationRequestStripeS700)),
        if (tipping != null) r'tipping': encodeQueryParameter(_serializers, tipping, const FullType(PostTerminalConfigurationsRequestTipping)),
        if (verifoneP400 != null) r'verifone_p400': encodeQueryParameter(_serializers, verifoneP400, const FullType(PostTerminalConfigurationsConfigurationRequestVerifoneP400)),
        if (wifi != null) r'wifi': encodeQueryParameter(_serializers, wifi, const FullType(PostTerminalConfigurationsRequestWifi)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    GetTerminalConfigurationsConfiguration200Response? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(GetTerminalConfigurationsConfiguration200Response),
      ) as GetTerminalConfigurationsConfiguration200Response;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<GetTerminalConfigurationsConfiguration200Response>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a Connection Token
  /// &lt;p&gt;To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [location] - The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://docs.stripe.com/terminal/fleet/locations-and-zones?dashboard-or-api=api#connection-tokens).
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalConnectionToken] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalConnectionToken>> postTerminalConnectionTokens({ 
    BuiltList<String>? expand,
    String? location,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/connection_tokens';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (location != null) r'location': encodeQueryParameter(_serializers, location, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalConnectionToken? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalConnectionToken),
      ) as TerminalConnectionToken;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalConnectionToken>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a Location
  /// &lt;p&gt;Creates a new &lt;code&gt;Location&lt;/code&gt; object. For further details, including which address fields are required in each country, see the &lt;a href&#x3D;\&quot;/docs/terminal/fleet/locations\&quot;&gt;Manage locations&lt;/a&gt; guide.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [address] 
  /// * [displayName] - A name for the location. Maximum length is 1000 characters.
  /// * [configurationOverrides] - The ID of a configuration that will be used to customize all readers in this location.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalLocation] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalLocation>> postTerminalLocations({ 
    required CreateLocationAddressParam address,
    required String displayName,
    String? configurationOverrides,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/locations';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'address': encodeQueryParameter(_serializers, address, const FullType(CreateLocationAddressParam)),
        if (configurationOverrides != null) r'configuration_overrides': encodeQueryParameter(_serializers, configurationOverrides, const FullType(String)),
        r'display_name': encodeQueryParameter(_serializers, displayName, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalLocation? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalLocation),
      ) as TerminalLocation;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalLocation>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a Location
  /// &lt;p&gt;Updates a &lt;code&gt;Location&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [location] 
  /// * [address] 
  /// * [configurationOverrides] 
  /// * [displayName] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [GetTerminalLocationsLocation200Response] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<GetTerminalLocationsLocation200Response>> postTerminalLocationsLocation({ 
    required String location,
    OptionalFieldsAddress1? address,
    PostTerminalLocationsLocationRequestConfigurationOverrides? configurationOverrides,
    PostTerminalLocationsLocationRequestDisplayName? displayName,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/locations/{location}'.replaceAll('{' r'location' '}', encodeQueryParameter(_serializers, location, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (address != null) r'address': encodeQueryParameter(_serializers, address, const FullType(OptionalFieldsAddress1)),
        if (configurationOverrides != null) r'configuration_overrides': encodeQueryParameter(_serializers, configurationOverrides, const FullType(PostTerminalLocationsLocationRequestConfigurationOverrides)),
        if (displayName != null) r'display_name': encodeQueryParameter(_serializers, displayName, const FullType(PostTerminalLocationsLocationRequestDisplayName)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    GetTerminalLocationsLocation200Response? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(GetTerminalLocationsLocation200Response),
      ) as GetTerminalLocationsLocation200Response;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<GetTerminalLocationsLocation200Response>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a Reader
  /// &lt;p&gt;Creates a new &lt;code&gt;Reader&lt;/code&gt; object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [registrationCode] - A code generated by the reader used for registering to an account.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [label] - Custom label given to the reader for easier identification. If no label is specified, the registration code will be used.
  /// * [location] - The location to assign the reader to.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalReader] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalReader>> postTerminalReaders({ 
    required String registrationCode,
    BuiltList<String>? expand,
    String? label,
    String? location,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/readers';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (label != null) r'label': encodeQueryParameter(_serializers, label, const FullType(String)),
        if (location != null) r'location': encodeQueryParameter(_serializers, location, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        r'registration_code': encodeQueryParameter(_serializers, registrationCode, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalReader? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalReader),
      ) as TerminalReader;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalReader>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a Reader
  /// &lt;p&gt;Updates a &lt;code&gt;Reader&lt;/code&gt; object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [reader] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [label] 
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [GetTerminalReadersReader200Response] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<GetTerminalReadersReader200Response>> postTerminalReadersReader({ 
    required String reader,
    BuiltList<String>? expand,
    PostTerminalReadersReaderRequestLabel? label,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/readers/{reader}'.replaceAll('{' r'reader' '}', encodeQueryParameter(_serializers, reader, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (label != null) r'label': encodeQueryParameter(_serializers, label, const FullType(PostTerminalReadersReaderRequestLabel)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    GetTerminalReadersReader200Response? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(GetTerminalReadersReader200Response),
      ) as GetTerminalReadersReader200Response;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<GetTerminalReadersReader200Response>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Cancel the current reader action
  /// &lt;p&gt;Cancels the current reader action.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [reader] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalReader] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalReader>> postTerminalReadersReaderCancelAction({ 
    required String reader,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/readers/{reader}/cancel_action'.replaceAll('{' r'reader' '}', encodeQueryParameter(_serializers, reader, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalReader? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalReader),
      ) as TerminalReader;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalReader>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Collect inputs using a Reader
  /// &lt;p&gt;Initiates an input collection flow on a Reader.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [reader] 
  /// * [inputs] - List of inputs to be collected using the Reader
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalReader] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalReader>> postTerminalReadersReaderCollectInputs({ 
    required String reader,
    required BuiltList<InputParams> inputs,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/readers/{reader}/collect_inputs'.replaceAll('{' r'reader' '}', encodeQueryParameter(_serializers, reader, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'inputs': encodeCollectionQueryParameter<InputParams>(_serializers, inputs, const FullType(BuiltList, [FullType(InputParams)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalReader? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalReader),
      ) as TerminalReader;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalReader>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Hand off a PaymentIntent to a Reader and collect card details
  /// &lt;p&gt;Initiates a payment flow on a Reader and updates the PaymentIntent with card details before manual confirmation.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [reader] 
  /// * [paymentIntent] - PaymentIntent ID.
  /// * [collectConfig] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalReader] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalReader>> postTerminalReadersReaderCollectPaymentMethod({ 
    required String reader,
    required String paymentIntent,
    CollectConfig? collectConfig,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/readers/{reader}/collect_payment_method'.replaceAll('{' r'reader' '}', encodeQueryParameter(_serializers, reader, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (collectConfig != null) r'collect_config': encodeQueryParameter(_serializers, collectConfig, const FullType(CollectConfig)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'payment_intent': encodeQueryParameter(_serializers, paymentIntent, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalReader? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalReader),
      ) as TerminalReader;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalReader>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Confirm a PaymentIntent on the Reader
  /// &lt;p&gt;Finalizes a payment on a Reader.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [reader] 
  /// * [paymentIntent] - PaymentIntent ID.
  /// * [confirmConfig] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalReader] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalReader>> postTerminalReadersReaderConfirmPaymentIntent({ 
    required String reader,
    required String paymentIntent,
    ConfirmConfig? confirmConfig,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/readers/{reader}/confirm_payment_intent'.replaceAll('{' r'reader' '}', encodeQueryParameter(_serializers, reader, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (confirmConfig != null) r'confirm_config': encodeQueryParameter(_serializers, confirmConfig, const FullType(ConfirmConfig)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'payment_intent': encodeQueryParameter(_serializers, paymentIntent, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalReader? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalReader),
      ) as TerminalReader;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalReader>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Hand-off a PaymentIntent to a Reader
  /// &lt;p&gt;Initiates a payment flow on a Reader.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [reader] 
  /// * [paymentIntent] - PaymentIntent ID
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [processConfig] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalReader] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalReader>> postTerminalReadersReaderProcessPaymentIntent({ 
    required String reader,
    required String paymentIntent,
    BuiltList<String>? expand,
    ProcessConfig? processConfig,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/readers/{reader}/process_payment_intent'.replaceAll('{' r'reader' '}', encodeQueryParameter(_serializers, reader, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'payment_intent': encodeQueryParameter(_serializers, paymentIntent, const FullType(String)),
        if (processConfig != null) r'process_config': encodeQueryParameter(_serializers, processConfig, const FullType(ProcessConfig)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalReader? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalReader),
      ) as TerminalReader;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalReader>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Hand-off a SetupIntent to a Reader
  /// &lt;p&gt;Initiates a setup intent flow on a Reader.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [reader] 
  /// * [allowRedisplay] - This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow.
  /// * [setupIntent] - SetupIntent ID
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [processConfig] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalReader] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalReader>> postTerminalReadersReaderProcessSetupIntent({ 
    required String reader,
    required String allowRedisplay,
    required String setupIntent,
    BuiltList<String>? expand,
    ProcessSetupConfig? processConfig,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/readers/{reader}/process_setup_intent'.replaceAll('{' r'reader' '}', encodeQueryParameter(_serializers, reader, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'allow_redisplay': encodeQueryParameter(_serializers, allowRedisplay, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (processConfig != null) r'process_config': encodeQueryParameter(_serializers, processConfig, const FullType(ProcessSetupConfig)),
        r'setup_intent': encodeQueryParameter(_serializers, setupIntent, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalReader? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalReader),
      ) as TerminalReader;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalReader>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Refund a Charge or a PaymentIntent in-person
  /// &lt;p&gt;Initiates a refund on a Reader&lt;/p&gt;
  ///
  /// Parameters:
  /// * [reader] 
  /// * [amount] - A positive integer in __cents__ representing how much of this charge to refund.
  /// * [charge] - ID of the Charge to refund.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [paymentIntent] - ID of the PaymentIntent to refund.
  /// * [refundApplicationFee] - Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.
  /// * [refundPaymentConfig] 
  /// * [reverseTransfer] - Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalReader] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalReader>> postTerminalReadersReaderRefundPayment({ 
    required String reader,
    int? amount,
    String? charge,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    String? paymentIntent,
    bool? refundApplicationFee,
    RefundPaymentConfig? refundPaymentConfig,
    bool? reverseTransfer,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/readers/{reader}/refund_payment'.replaceAll('{' r'reader' '}', encodeQueryParameter(_serializers, reader, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (charge != null) r'charge': encodeQueryParameter(_serializers, charge, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (paymentIntent != null) r'payment_intent': encodeQueryParameter(_serializers, paymentIntent, const FullType(String)),
        if (refundApplicationFee != null) r'refund_application_fee': encodeQueryParameter(_serializers, refundApplicationFee, const FullType(bool)),
        if (refundPaymentConfig != null) r'refund_payment_config': encodeQueryParameter(_serializers, refundPaymentConfig, const FullType(RefundPaymentConfig)),
        if (reverseTransfer != null) r'reverse_transfer': encodeQueryParameter(_serializers, reverseTransfer, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalReader? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalReader),
      ) as TerminalReader;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalReader>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Set reader display
  /// &lt;p&gt;Sets reader display to show cart details.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [reader] 
  /// * [type] - Type
  /// * [cart] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalReader] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalReader>> postTerminalReadersReaderSetReaderDisplay({ 
    required String reader,
    required String type,
    Cart? cart,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/terminal/readers/{reader}/set_reader_display'.replaceAll('{' r'reader' '}', encodeQueryParameter(_serializers, reader, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (cart != null) r'cart': encodeQueryParameter(_serializers, cart, const FullType(Cart)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalReader? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalReader),
      ) as TerminalReader;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalReader>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a test Confirmation Token
  /// &lt;p&gt;Creates a test mode Confirmation Token server side for your integration tests.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [paymentMethod] - ID of an existing PaymentMethod.
  /// * [paymentMethodData] 
  /// * [paymentMethodOptions] 
  /// * [returnUrl] - Return URL used to confirm the Intent.
  /// * [setupFutureUsage] - Indicates that you intend to make future payments with this ConfirmationToken's payment method.  The presence of this property will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.
  /// * [shipping] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [ConfirmationToken] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<ConfirmationToken>> postTestHelpersConfirmationTokens({ 
    BuiltList<String>? expand,
    String? paymentMethod,
    PaymentMethodDataParams2? paymentMethodData,
    TestPaymentMethodOptionsParam? paymentMethodOptions,
    String? returnUrl,
    String? setupFutureUsage,
    RecipientShippingWithOptionalFieldsAddress2? shipping,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/confirmation_tokens';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (paymentMethod != null) r'payment_method': encodeQueryParameter(_serializers, paymentMethod, const FullType(String)),
        if (paymentMethodData != null) r'payment_method_data': encodeQueryParameter(_serializers, paymentMethodData, const FullType(PaymentMethodDataParams2)),
        if (paymentMethodOptions != null) r'payment_method_options': encodeQueryParameter(_serializers, paymentMethodOptions, const FullType(TestPaymentMethodOptionsParam)),
        if (returnUrl != null) r'return_url': encodeQueryParameter(_serializers, returnUrl, const FullType(String)),
        if (setupFutureUsage != null) r'setup_future_usage': encodeQueryParameter(_serializers, setupFutureUsage, const FullType(String)),
        if (shipping != null) r'shipping': encodeQueryParameter(_serializers, shipping, const FullType(RecipientShippingWithOptionalFieldsAddress2)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    ConfirmationToken? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(ConfirmationToken),
      ) as ConfirmationToken;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<ConfirmationToken>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Fund a test mode cash balance
  /// &lt;p&gt;Create an incoming testmode bank transfer&lt;/p&gt;
  ///
  /// Parameters:
  /// * [customer] 
  /// * [amount] - Amount to be used for this test cash balance transaction. A positive integer representing how much to fund in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to fund $1.00 or 100 to fund ¥100, a zero-decimal currency).
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [reference] - A description of the test funding. This simulates free-text references supplied by customers when making bank transfers to their cash balance. You can use this to test how Stripe's [reconciliation algorithm](https://stripe.com/docs/payments/customer-balance/reconciliation) applies to different user inputs.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [CustomerCashBalanceTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<CustomerCashBalanceTransaction>> postTestHelpersCustomersCustomerFundCashBalance({ 
    required String customer,
    required int amount,
    required String currency,
    BuiltList<String>? expand,
    String? reference,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/customers/{customer}/fund_cash_balance'.replaceAll('{' r'customer' '}', encodeQueryParameter(_serializers, customer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (reference != null) r'reference': encodeQueryParameter(_serializers, reference, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    CustomerCashBalanceTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(CustomerCashBalanceTransaction),
      ) as CustomerCashBalanceTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<CustomerCashBalanceTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a test-mode authorization
  /// &lt;p&gt;Create a test-mode authorization.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [card] - Card associated with this authorization.
  /// * [amount] - The total amount to attempt to authorize. This amount is in the provided currency, or defaults to the card's currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  /// * [amountDetails] 
  /// * [authorizationMethod] - How the card details were provided. Defaults to online.
  /// * [currency] - The currency of the authorization. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [fleet] 
  /// * [fuel] 
  /// * [isAmountControllable] - If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
  /// * [merchantAmount] - The total amount to attempt to authorize. This amount is in the provided merchant currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  /// * [merchantCurrency] - The currency of the authorization. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [merchantData] 
  /// * [networkData] 
  /// * [verificationData] 
  /// * [wallet] - The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingAuthorization] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingAuthorization>> postTestHelpersIssuingAuthorizations({ 
    required String card,
    int? amount,
    AmountDetailsSpecs? amountDetails,
    String? authorizationMethod,
    String? currency,
    BuiltList<String>? expand,
    FleetTestmodeAuthorizationSpecs? fleet,
    FuelSpecs? fuel,
    bool? isAmountControllable,
    int? merchantAmount,
    String? merchantCurrency,
    MerchantDataSpecs? merchantData,
    NetworkDataSpecs? networkData,
    VerificationDataSpecs? verificationData,
    String? wallet,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/authorizations';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (amountDetails != null) r'amount_details': encodeQueryParameter(_serializers, amountDetails, const FullType(AmountDetailsSpecs)),
        if (authorizationMethod != null) r'authorization_method': encodeQueryParameter(_serializers, authorizationMethod, const FullType(String)),
        r'card': encodeQueryParameter(_serializers, card, const FullType(String)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (fleet != null) r'fleet': encodeQueryParameter(_serializers, fleet, const FullType(FleetTestmodeAuthorizationSpecs)),
        if (fuel != null) r'fuel': encodeQueryParameter(_serializers, fuel, const FullType(FuelSpecs)),
        if (isAmountControllable != null) r'is_amount_controllable': encodeQueryParameter(_serializers, isAmountControllable, const FullType(bool)),
        if (merchantAmount != null) r'merchant_amount': encodeQueryParameter(_serializers, merchantAmount, const FullType(int)),
        if (merchantCurrency != null) r'merchant_currency': encodeQueryParameter(_serializers, merchantCurrency, const FullType(String)),
        if (merchantData != null) r'merchant_data': encodeQueryParameter(_serializers, merchantData, const FullType(MerchantDataSpecs)),
        if (networkData != null) r'network_data': encodeQueryParameter(_serializers, networkData, const FullType(NetworkDataSpecs)),
        if (verificationData != null) r'verification_data': encodeQueryParameter(_serializers, verificationData, const FullType(VerificationDataSpecs)),
        if (wallet != null) r'wallet': encodeQueryParameter(_serializers, wallet, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingAuthorization? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingAuthorization),
      ) as IssuingAuthorization;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingAuthorization>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Capture a test-mode authorization
  /// &lt;p&gt;Capture a test-mode authorization.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [captureAmount] - The amount to capture from the authorization. If not provided, the full amount of the authorization will be captured. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  /// * [closeAuthorization] - Whether to close the authorization after capture. Defaults to true. Set to false to enable multi-capture flows.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [purchaseDetails] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingAuthorization] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingAuthorization>> postTestHelpersIssuingAuthorizationsAuthorizationCapture({ 
    required String authorization,
    int? captureAmount,
    bool? closeAuthorization,
    BuiltList<String>? expand,
    PurchaseDetailsSpecs? purchaseDetails,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/authorizations/{authorization}/capture'.replaceAll('{' r'authorization' '}', encodeQueryParameter(_serializers, authorization, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (captureAmount != null) r'capture_amount': encodeQueryParameter(_serializers, captureAmount, const FullType(int)),
        if (closeAuthorization != null) r'close_authorization': encodeQueryParameter(_serializers, closeAuthorization, const FullType(bool)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (purchaseDetails != null) r'purchase_details': encodeQueryParameter(_serializers, purchaseDetails, const FullType(PurchaseDetailsSpecs)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingAuthorization? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingAuthorization),
      ) as IssuingAuthorization;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingAuthorization>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Expire a test-mode authorization
  /// &lt;p&gt;Expire a test-mode Authorization.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingAuthorization] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingAuthorization>> postTestHelpersIssuingAuthorizationsAuthorizationExpire({ 
    required String authorization,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/authorizations/{authorization}/expire'.replaceAll('{' r'authorization' '}', encodeQueryParameter(_serializers, authorization, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingAuthorization? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingAuthorization),
      ) as IssuingAuthorization;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingAuthorization>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Finalize a test-mode authorization&#39;s amount
  /// &lt;p&gt;Finalize the amount on an Authorization prior to capture, when the initial authorization was for an estimated amount.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [finalAmount] - The final authorization amount that will be captured by the merchant. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [fleet] 
  /// * [fuel] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingAuthorization] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingAuthorization>> postTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmount({ 
    required String authorization,
    required int finalAmount,
    BuiltList<String>? expand,
    FleetSpecs1? fleet,
    FuelSpecs? fuel,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/authorizations/{authorization}/finalize_amount'.replaceAll('{' r'authorization' '}', encodeQueryParameter(_serializers, authorization, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'final_amount': encodeQueryParameter(_serializers, finalAmount, const FullType(int)),
        if (fleet != null) r'fleet': encodeQueryParameter(_serializers, fleet, const FullType(FleetSpecs1)),
        if (fuel != null) r'fuel': encodeQueryParameter(_serializers, fuel, const FullType(FuelSpecs)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingAuthorization? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingAuthorization),
      ) as IssuingAuthorization;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingAuthorization>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Respond to fraud challenge
  /// &lt;p&gt;Respond to a fraud challenge on a testmode Issuing authorization, simulating either a confirmation of fraud or a correction of legitimacy.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [confirmed] - Whether to simulate the user confirming that the transaction was legitimate (true) or telling Stripe that it was fraudulent (false).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingAuthorization] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingAuthorization>> postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespond({ 
    required String authorization,
    required bool confirmed,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/authorizations/{authorization}/fraud_challenges/respond'.replaceAll('{' r'authorization' '}', encodeQueryParameter(_serializers, authorization, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'confirmed': encodeQueryParameter(_serializers, confirmed, const FullType(bool)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingAuthorization? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingAuthorization),
      ) as IssuingAuthorization;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingAuthorization>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Increment a test-mode authorization
  /// &lt;p&gt;Increment a test-mode Authorization.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [incrementAmount] - The amount to increment the authorization by. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [isAmountControllable] - If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingAuthorization] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingAuthorization>> postTestHelpersIssuingAuthorizationsAuthorizationIncrement({ 
    required String authorization,
    required int incrementAmount,
    BuiltList<String>? expand,
    bool? isAmountControllable,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/authorizations/{authorization}/increment'.replaceAll('{' r'authorization' '}', encodeQueryParameter(_serializers, authorization, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'increment_amount': encodeQueryParameter(_serializers, incrementAmount, const FullType(int)),
        if (isAmountControllable != null) r'is_amount_controllable': encodeQueryParameter(_serializers, isAmountControllable, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingAuthorization? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingAuthorization),
      ) as IssuingAuthorization;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingAuthorization>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Reverse a test-mode authorization
  /// &lt;p&gt;Reverse a test-mode Authorization.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [authorization] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [reverseAmount] - The amount to reverse from the authorization. If not provided, the full amount of the authorization will be reversed. This amount is in the authorization currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingAuthorization] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingAuthorization>> postTestHelpersIssuingAuthorizationsAuthorizationReverse({ 
    required String authorization,
    BuiltList<String>? expand,
    int? reverseAmount,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/authorizations/{authorization}/reverse'.replaceAll('{' r'authorization' '}', encodeQueryParameter(_serializers, authorization, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (reverseAmount != null) r'reverse_amount': encodeQueryParameter(_serializers, reverseAmount, const FullType(int)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingAuthorization? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingAuthorization),
      ) as IssuingAuthorization;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingAuthorization>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Deliver a testmode card
  /// &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;delivered&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [card] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingCard] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingCard>> postTestHelpersIssuingCardsCardShippingDeliver({ 
    required String card,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/cards/{card}/shipping/deliver'.replaceAll('{' r'card' '}', encodeQueryParameter(_serializers, card, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingCard? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingCard),
      ) as IssuingCard;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingCard>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Fail a testmode card
  /// &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;failure&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [card] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingCard] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingCard>> postTestHelpersIssuingCardsCardShippingFail({ 
    required String card,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/cards/{card}/shipping/fail'.replaceAll('{' r'card' '}', encodeQueryParameter(_serializers, card, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingCard? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingCard),
      ) as IssuingCard;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingCard>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Return a testmode card
  /// &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;returned&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [card] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingCard] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingCard>> postTestHelpersIssuingCardsCardShippingReturn({ 
    required String card,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/cards/{card}/shipping/return'.replaceAll('{' r'card' '}', encodeQueryParameter(_serializers, card, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingCard? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingCard),
      ) as IssuingCard;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingCard>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Ship a testmode card
  /// &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;shipped&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [card] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingCard] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingCard>> postTestHelpersIssuingCardsCardShippingShip({ 
    required String card,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/cards/{card}/shipping/ship'.replaceAll('{' r'card' '}', encodeQueryParameter(_serializers, card, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingCard? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingCard),
      ) as IssuingCard;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingCard>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Submit a testmode card
  /// &lt;p&gt;Updates the shipping status of the specified Issuing &lt;code&gt;Card&lt;/code&gt; object to &lt;code&gt;submitted&lt;/code&gt;. This method requires Stripe Version ‘2024-09-30.acacia’ or later.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [card] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingCard] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingCard>> postTestHelpersIssuingCardsCardShippingSubmit({ 
    required String card,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/cards/{card}/shipping/submit'.replaceAll('{' r'card' '}', encodeQueryParameter(_serializers, card, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingCard? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingCard),
      ) as IssuingCard;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingCard>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Activate a testmode personalization design
  /// &lt;p&gt;Updates the &lt;code&gt;status&lt;/code&gt; of the specified testmode personalization design object to &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [personalizationDesign] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingPersonalizationDesign] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingPersonalizationDesign>> postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate({ 
    required String personalizationDesign,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/personalization_designs/{personalization_design}/activate'.replaceAll('{' r'personalization_design' '}', encodeQueryParameter(_serializers, personalizationDesign, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingPersonalizationDesign? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingPersonalizationDesign),
      ) as IssuingPersonalizationDesign;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingPersonalizationDesign>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Deactivate a testmode personalization design
  /// &lt;p&gt;Updates the &lt;code&gt;status&lt;/code&gt; of the specified testmode personalization design object to &lt;code&gt;inactive&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [personalizationDesign] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingPersonalizationDesign] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingPersonalizationDesign>> postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate({ 
    required String personalizationDesign,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/personalization_designs/{personalization_design}/deactivate'.replaceAll('{' r'personalization_design' '}', encodeQueryParameter(_serializers, personalizationDesign, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingPersonalizationDesign? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingPersonalizationDesign),
      ) as IssuingPersonalizationDesign;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingPersonalizationDesign>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Reject a testmode personalization design
  /// &lt;p&gt;Updates the &lt;code&gt;status&lt;/code&gt; of the specified testmode personalization design object to &lt;code&gt;rejected&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [personalizationDesign] 
  /// * [rejectionReasons] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingPersonalizationDesign] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingPersonalizationDesign>> postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject({ 
    required String personalizationDesign,
    required RejectionReasonsParam rejectionReasons,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/personalization_designs/{personalization_design}/reject'.replaceAll('{' r'personalization_design' '}', encodeQueryParameter(_serializers, personalizationDesign, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'rejection_reasons': encodeQueryParameter(_serializers, rejectionReasons, const FullType(RejectionReasonsParam)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingPersonalizationDesign? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingPersonalizationDesign),
      ) as IssuingPersonalizationDesign;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingPersonalizationDesign>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a test-mode settlement
  /// &lt;p&gt;Allows the user to create an Issuing settlement.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [bin] - The Bank Identification Number reflecting this settlement record.
  /// * [clearingDate] - The date that the transactions are cleared and posted to user's accounts.
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [netTotalAmount] - The total net amount required to settle with the network.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [interchangeFeesAmount] - The total interchange received as reimbursement for the transactions.
  /// * [network] - The card network for this settlement. One of [\\\"visa\\\", \\\"maestro\\\"]
  /// * [networkSettlementIdentifier] - The Settlement Identification Number assigned by the network.
  /// * [transactionAmount] - The total transaction amount reflected in this settlement.
  /// * [transactionCount] - The total number of transactions reflected in this settlement.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingSettlement] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingSettlement>> postTestHelpersIssuingSettlements({ 
    required String bin,
    required int clearingDate,
    required String currency,
    required int netTotalAmount,
    BuiltList<String>? expand,
    int? interchangeFeesAmount,
    String? network,
    String? networkSettlementIdentifier,
    int? transactionAmount,
    int? transactionCount,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/settlements';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'bin': encodeQueryParameter(_serializers, bin, const FullType(String)),
        r'clearing_date': encodeQueryParameter(_serializers, clearingDate, const FullType(int)),
        r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (interchangeFeesAmount != null) r'interchange_fees_amount': encodeQueryParameter(_serializers, interchangeFeesAmount, const FullType(int)),
        r'net_total_amount': encodeQueryParameter(_serializers, netTotalAmount, const FullType(int)),
        if (network != null) r'network': encodeQueryParameter(_serializers, network, const FullType(String)),
        if (networkSettlementIdentifier != null) r'network_settlement_identifier': encodeQueryParameter(_serializers, networkSettlementIdentifier, const FullType(String)),
        if (transactionAmount != null) r'transaction_amount': encodeQueryParameter(_serializers, transactionAmount, const FullType(int)),
        if (transactionCount != null) r'transaction_count': encodeQueryParameter(_serializers, transactionCount, const FullType(int)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingSettlement? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingSettlement),
      ) as IssuingSettlement;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingSettlement>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Complete a test-mode settlement
  /// &lt;p&gt;Allows the user to mark an Issuing settlement as complete.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [settlement] - The settlement token to mark as complete.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingSettlement] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingSettlement>> postTestHelpersIssuingSettlementsSettlementComplete({ 
    required String settlement,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/settlements/{settlement}/complete'.replaceAll('{' r'settlement' '}', encodeQueryParameter(_serializers, settlement, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingSettlement? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingSettlement),
      ) as IssuingSettlement;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingSettlement>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a test-mode force capture
  /// &lt;p&gt;Allows the user to capture an arbitrary amount, also known as a forced capture.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [amount] - The total amount to attempt to capture. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  /// * [card] - Card associated with this transaction.
  /// * [currency] - The currency of the capture. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [merchantData] 
  /// * [purchaseDetails] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingTransaction>> postTestHelpersIssuingTransactionsCreateForceCapture({ 
    required int amount,
    required String card,
    String? currency,
    BuiltList<String>? expand,
    MerchantDataSpecs? merchantData,
    PurchaseDetailsSpecs? purchaseDetails,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/transactions/create_force_capture';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        r'card': encodeQueryParameter(_serializers, card, const FullType(String)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (merchantData != null) r'merchant_data': encodeQueryParameter(_serializers, merchantData, const FullType(MerchantDataSpecs)),
        if (purchaseDetails != null) r'purchase_details': encodeQueryParameter(_serializers, purchaseDetails, const FullType(PurchaseDetailsSpecs)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingTransaction),
      ) as IssuingTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a test-mode unlinked refund
  /// &lt;p&gt;Allows the user to refund an arbitrary amount, also known as a unlinked refund.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [amount] - The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  /// * [card] - Card associated with this unlinked refund transaction.
  /// * [currency] - The currency of the unlinked refund. If not provided, defaults to the currency of the card. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [merchantData] 
  /// * [purchaseDetails] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingTransaction>> postTestHelpersIssuingTransactionsCreateUnlinkedRefund({ 
    required int amount,
    required String card,
    String? currency,
    BuiltList<String>? expand,
    MerchantDataSpecs? merchantData,
    PurchaseDetailsSpecs? purchaseDetails,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/transactions/create_unlinked_refund';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        r'card': encodeQueryParameter(_serializers, card, const FullType(String)),
        if (currency != null) r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (merchantData != null) r'merchant_data': encodeQueryParameter(_serializers, merchantData, const FullType(MerchantDataSpecs)),
        if (purchaseDetails != null) r'purchase_details': encodeQueryParameter(_serializers, purchaseDetails, const FullType(PurchaseDetailsSpecs)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingTransaction),
      ) as IssuingTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Refund a test-mode transaction
  /// &lt;p&gt;Refund a test-mode Transaction.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [transaction] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [refundAmount] - The total amount to attempt to refund. This amount is in the provided currency, or defaults to the cards currency, and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [IssuingTransaction] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<IssuingTransaction>> postTestHelpersIssuingTransactionsTransactionRefund({ 
    required String transaction,
    BuiltList<String>? expand,
    int? refundAmount,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/issuing/transactions/{transaction}/refund'.replaceAll('{' r'transaction' '}', encodeQueryParameter(_serializers, transaction, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (refundAmount != null) r'refund_amount': encodeQueryParameter(_serializers, refundAmount, const FullType(int)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    IssuingTransaction? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(IssuingTransaction),
      ) as IssuingTransaction;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<IssuingTransaction>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Expire a pending refund.
  /// &lt;p&gt;Expire a refund with a status of &lt;code&gt;requires_action&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [refund] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Refund] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Refund>> postTestHelpersRefundsRefundExpire({ 
    required String refund,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/refunds/{refund}/expire'.replaceAll('{' r'refund' '}', encodeQueryParameter(_serializers, refund, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Refund? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Refund),
      ) as Refund;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Refund>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Simulate presenting a payment method
  /// &lt;p&gt;Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [reader] 
  /// * [amountTip] - Simulated on-reader tip amount.
  /// * [cardPresent] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [interacPresent] 
  /// * [type] - Simulated payment type.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalReader] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalReader>> postTestHelpersTerminalReadersReaderPresentPaymentMethod({ 
    required String reader,
    int? amountTip,
    CardPresent? cardPresent,
    BuiltList<String>? expand,
    InteracPresent? interacPresent,
    String? type,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/terminal/readers/{reader}/present_payment_method'.replaceAll('{' r'reader' '}', encodeQueryParameter(_serializers, reader, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amountTip != null) r'amount_tip': encodeQueryParameter(_serializers, amountTip, const FullType(int)),
        if (cardPresent != null) r'card_present': encodeQueryParameter(_serializers, cardPresent, const FullType(CardPresent)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (interacPresent != null) r'interac_present': encodeQueryParameter(_serializers, interacPresent, const FullType(InteracPresent)),
        if (type != null) r'type': encodeQueryParameter(_serializers, type, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalReader? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalReader),
      ) as TerminalReader;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalReader>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Simulate a successful input collection
  /// &lt;p&gt;Use this endpoint to trigger a successful input collection on a simulated reader.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [reader] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [skipNonRequiredInputs] - This parameter defines the skip behavior for input collection.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalReader] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalReader>> postTestHelpersTerminalReadersReaderSucceedInputCollection({ 
    required String reader,
    BuiltList<String>? expand,
    String? skipNonRequiredInputs,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/terminal/readers/{reader}/succeed_input_collection'.replaceAll('{' r'reader' '}', encodeQueryParameter(_serializers, reader, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (skipNonRequiredInputs != null) r'skip_non_required_inputs': encodeQueryParameter(_serializers, skipNonRequiredInputs, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalReader? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalReader),
      ) as TerminalReader;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalReader>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Simulate an input collection timeout
  /// &lt;p&gt;Use this endpoint to complete an input collection with a timeout error on a simulated reader.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [reader] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TerminalReader] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TerminalReader>> postTestHelpersTerminalReadersReaderTimeoutInputCollection({ 
    required String reader,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/terminal/readers/{reader}/timeout_input_collection'.replaceAll('{' r'reader' '}', encodeQueryParameter(_serializers, reader, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TerminalReader? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TerminalReader),
      ) as TerminalReader;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TerminalReader>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a test clock
  /// &lt;p&gt;Creates a new test clock that can be attached to new customers and quotes.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [frozenTime] - The initial frozen time for this test clock.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [name] - The name for this test clock.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TestHelpersTestClock] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TestHelpersTestClock>> postTestHelpersTestClocks({ 
    required int frozenTime,
    BuiltList<String>? expand,
    String? name,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/test_clocks';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'frozen_time': encodeQueryParameter(_serializers, frozenTime, const FullType(int)),
        if (name != null) r'name': encodeQueryParameter(_serializers, name, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TestHelpersTestClock? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TestHelpersTestClock),
      ) as TestHelpersTestClock;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TestHelpersTestClock>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Advance a test clock
  /// &lt;p&gt;Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to &lt;code&gt;Ready&lt;/code&gt;.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [testClock] 
  /// * [frozenTime] - The time to advance the test clock. Must be after the test clock's current frozen time. Cannot be more than two intervals in the future from the shortest subscription in this test clock. If there are no subscriptions in this test clock, it cannot be more than two years in the future.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TestHelpersTestClock] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TestHelpersTestClock>> postTestHelpersTestClocksTestClockAdvance({ 
    required String testClock,
    required int frozenTime,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/test_clocks/{test_clock}/advance'.replaceAll('{' r'test_clock' '}', encodeQueryParameter(_serializers, testClock, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'frozen_time': encodeQueryParameter(_serializers, frozenTime, const FullType(int)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TestHelpersTestClock? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TestHelpersTestClock),
      ) as TestHelpersTestClock;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TestHelpersTestClock>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Test mode: Fail an InboundTransfer
  /// &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [failureDetails] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryInboundTransfer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryInboundTransfer>> postTestHelpersTreasuryInboundTransfersIdFail({ 
    required String id,
    BuiltList<String>? expand,
    FailureDetailsParam? failureDetails,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/treasury/inbound_transfers/{id}/fail'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (failureDetails != null) r'failure_details': encodeQueryParameter(_serializers, failureDetails, const FullType(FailureDetailsParam)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryInboundTransfer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryInboundTransfer),
      ) as TreasuryInboundTransfer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryInboundTransfer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Test mode: Return an InboundTransfer
  /// &lt;p&gt;Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the &lt;code&gt;succeeded&lt;/code&gt; state.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryInboundTransfer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryInboundTransfer>> postTestHelpersTreasuryInboundTransfersIdReturn({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/treasury/inbound_transfers/{id}/return'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryInboundTransfer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryInboundTransfer),
      ) as TreasuryInboundTransfer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryInboundTransfer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Test mode: Succeed an InboundTransfer
  /// &lt;p&gt;Transitions a test mode created InboundTransfer to the &lt;code&gt;succeeded&lt;/code&gt; status. The InboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryInboundTransfer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryInboundTransfer>> postTestHelpersTreasuryInboundTransfersIdSucceed({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/treasury/inbound_transfers/{id}/succeed'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryInboundTransfer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryInboundTransfer),
      ) as TreasuryInboundTransfer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryInboundTransfer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Test mode: Update an OutboundPayment
  /// &lt;p&gt;Updates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and cannot be in the &lt;code&gt;canceled&lt;/code&gt; or &lt;code&gt;failed&lt;/code&gt; states.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [trackingDetails] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryOutboundPayment] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryOutboundPayment>> postTestHelpersTreasuryOutboundPaymentsId({ 
    required String id,
    required TrackingDetailsParams trackingDetails,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/treasury/outbound_payments/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'tracking_details': encodeQueryParameter(_serializers, trackingDetails, const FullType(TrackingDetailsParams)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryOutboundPayment? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryOutboundPayment),
      ) as TreasuryOutboundPayment;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryOutboundPayment>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Test mode: Fail an OutboundPayment
  /// &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryOutboundPayment] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryOutboundPayment>> postTestHelpersTreasuryOutboundPaymentsIdFail({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/treasury/outbound_payments/{id}/fail'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryOutboundPayment? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryOutboundPayment),
      ) as TreasuryOutboundPayment;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryOutboundPayment>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Test mode: Post an OutboundPayment
  /// &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryOutboundPayment] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryOutboundPayment>> postTestHelpersTreasuryOutboundPaymentsIdPost({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/treasury/outbound_payments/{id}/post'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryOutboundPayment? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryOutboundPayment),
      ) as TreasuryOutboundPayment;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryOutboundPayment>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Test mode: Return an OutboundPayment
  /// &lt;p&gt;Transitions a test mode created OutboundPayment to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundPayment must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [returnedDetails] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryOutboundPayment] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryOutboundPayment>> postTestHelpersTreasuryOutboundPaymentsIdReturn({ 
    required String id,
    BuiltList<String>? expand,
    ReturnedDetailsParams? returnedDetails,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/treasury/outbound_payments/{id}/return'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (returnedDetails != null) r'returned_details': encodeQueryParameter(_serializers, returnedDetails, const FullType(ReturnedDetailsParams)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryOutboundPayment? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryOutboundPayment),
      ) as TreasuryOutboundPayment;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryOutboundPayment>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Test mode: Update an OutboundTransfer
  /// &lt;p&gt;Updates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and cannot be in the &lt;code&gt;canceled&lt;/code&gt; or &lt;code&gt;failed&lt;/code&gt; states.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [outboundTransfer] 
  /// * [trackingDetails] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryOutboundTransfer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryOutboundTransfer>> postTestHelpersTreasuryOutboundTransfersOutboundTransfer({ 
    required String outboundTransfer,
    required TrackingDetailsParams trackingDetails,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}'.replaceAll('{' r'outbound_transfer' '}', encodeQueryParameter(_serializers, outboundTransfer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'tracking_details': encodeQueryParameter(_serializers, trackingDetails, const FullType(TrackingDetailsParams)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryOutboundTransfer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryOutboundTransfer),
      ) as TreasuryOutboundTransfer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryOutboundTransfer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Test mode: Fail an OutboundTransfer
  /// &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;failed&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [outboundTransfer] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryOutboundTransfer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryOutboundTransfer>> postTestHelpersTreasuryOutboundTransfersOutboundTransferFail({ 
    required String outboundTransfer,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/fail'.replaceAll('{' r'outbound_transfer' '}', encodeQueryParameter(_serializers, outboundTransfer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryOutboundTransfer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryOutboundTransfer),
      ) as TreasuryOutboundTransfer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryOutboundTransfer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Test mode: Post an OutboundTransfer
  /// &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;posted&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [outboundTransfer] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryOutboundTransfer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryOutboundTransfer>> postTestHelpersTreasuryOutboundTransfersOutboundTransferPost({ 
    required String outboundTransfer,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/post'.replaceAll('{' r'outbound_transfer' '}', encodeQueryParameter(_serializers, outboundTransfer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryOutboundTransfer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryOutboundTransfer),
      ) as TreasuryOutboundTransfer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryOutboundTransfer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Test mode: Return an OutboundTransfer
  /// &lt;p&gt;Transitions a test mode created OutboundTransfer to the &lt;code&gt;returned&lt;/code&gt; status. The OutboundTransfer must already be in the &lt;code&gt;processing&lt;/code&gt; state.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [outboundTransfer] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [returnedDetails] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryOutboundTransfer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryOutboundTransfer>> postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn({ 
    required String outboundTransfer,
    BuiltList<String>? expand,
    ReturnedDetailsParams1? returnedDetails,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/return'.replaceAll('{' r'outbound_transfer' '}', encodeQueryParameter(_serializers, outboundTransfer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (returnedDetails != null) r'returned_details': encodeQueryParameter(_serializers, returnedDetails, const FullType(ReturnedDetailsParams1)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryOutboundTransfer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryOutboundTransfer),
      ) as TreasuryOutboundTransfer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryOutboundTransfer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Test mode: Create a ReceivedCredit
  /// &lt;p&gt;Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [amount] - Amount (in cents) to be transferred.
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [financialAccount] - The FinancialAccount to send funds to.
  /// * [network] - Specifies the network rails to be used. If not set, will default to the PaymentMethod's preferred network. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [initiatingPaymentMethodDetails] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryReceivedCredit] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryReceivedCredit>> postTestHelpersTreasuryReceivedCredits({ 
    required int amount,
    required String currency,
    required String financialAccount,
    required String network,
    String? description,
    BuiltList<String>? expand,
    SourceParams? initiatingPaymentMethodDetails,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/treasury/received_credits';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'financial_account': encodeQueryParameter(_serializers, financialAccount, const FullType(String)),
        if (initiatingPaymentMethodDetails != null) r'initiating_payment_method_details': encodeQueryParameter(_serializers, initiatingPaymentMethodDetails, const FullType(SourceParams)),
        r'network': encodeQueryParameter(_serializers, network, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryReceivedCredit? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryReceivedCredit),
      ) as TreasuryReceivedCredit;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryReceivedCredit>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Test mode: Create a ReceivedDebit
  /// &lt;p&gt;Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [amount] - Amount (in cents) to be transferred.
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [financialAccount] - The FinancialAccount to pull funds from.
  /// * [network] - Specifies the network rails to be used. If not set, will default to the PaymentMethod's preferred network. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [initiatingPaymentMethodDetails] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryReceivedDebit] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryReceivedDebit>> postTestHelpersTreasuryReceivedDebits({ 
    required int amount,
    required String currency,
    required String financialAccount,
    required String network,
    String? description,
    BuiltList<String>? expand,
    SourceParams? initiatingPaymentMethodDetails,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/test_helpers/treasury/received_debits';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'financial_account': encodeQueryParameter(_serializers, financialAccount, const FullType(String)),
        if (initiatingPaymentMethodDetails != null) r'initiating_payment_method_details': encodeQueryParameter(_serializers, initiatingPaymentMethodDetails, const FullType(SourceParams)),
        r'network': encodeQueryParameter(_serializers, network, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryReceivedDebit? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryReceivedDebit),
      ) as TreasuryReceivedDebit;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryReceivedDebit>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a CVC update token
  /// &lt;p&gt;Creates a single-use token that represents a bank account’s details. You can use this token with any v1 API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a &lt;a href&#x3D;\&quot;#accounts\&quot;&gt;connected account&lt;/a&gt; where &lt;a href&#x3D;\&quot;/api/accounts/object#account_object-controller-requirement_collection\&quot;&gt;controller.requirement_collection&lt;/a&gt; is &lt;code&gt;application&lt;/code&gt;, which includes Custom accounts.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [account] 
  /// * [bankAccount] 
  /// * [card] 
  /// * [customer] - Create a token for the customer, which is owned by the application's account. You can only use this with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). Learn more about [cloning saved payment methods](https://stripe.com/docs/connect/cloning-saved-payment-methods).
  /// * [cvcUpdate] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [person] 
  /// * [pii] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Token] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Token>> postTokens({ 
    ConnectJsAccountTokenSpecs? account,
    TokenCreateBankAccount? bankAccount,
    PostTokensRequestCard? card,
    String? customer,
    CvcParams? cvcUpdate,
    BuiltList<String>? expand,
    PersonTokenSpecs? person,
    PiiTokenSpecs? pii,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/tokens';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (account != null) r'account': encodeQueryParameter(_serializers, account, const FullType(ConnectJsAccountTokenSpecs)),
        if (bankAccount != null) r'bank_account': encodeQueryParameter(_serializers, bankAccount, const FullType(TokenCreateBankAccount)),
        if (card != null) r'card': encodeQueryParameter(_serializers, card, const FullType(PostTokensRequestCard)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (cvcUpdate != null) r'cvc_update': encodeQueryParameter(_serializers, cvcUpdate, const FullType(CvcParams)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (person != null) r'person': encodeQueryParameter(_serializers, person, const FullType(PersonTokenSpecs)),
        if (pii != null) r'pii': encodeQueryParameter(_serializers, pii, const FullType(PiiTokenSpecs)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Token? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Token),
      ) as Token;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Token>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a top-up
  /// &lt;p&gt;Top up the balance of an account&lt;/p&gt;
  ///
  /// Parameters:
  /// * [amount] - A positive integer representing how much to transfer.
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [source_] - The ID of a source to transfer funds from. For most users, this should be left unspecified which will use the bank account that was set up in the dashboard for the specified currency. In test mode, this can be a test bank token (see [Testing Top-ups](https://stripe.com/docs/connect/testing#testing-top-ups)).
  /// * [statementDescriptor] - Extra information about a top-up for the source's bank statement. Limited to 15 ASCII characters.
  /// * [transferGroup] - A string that identifies this top-up as part of a group.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Topup] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Topup>> postTopups({ 
    required int amount,
    required String currency,
    String? description,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    String? source_,
    String? statementDescriptor,
    String? transferGroup,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/topups';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (source_ != null) r'source': encodeQueryParameter(_serializers, source_, const FullType(String)),
        if (statementDescriptor != null) r'statement_descriptor': encodeQueryParameter(_serializers, statementDescriptor, const FullType(String)),
        if (transferGroup != null) r'transfer_group': encodeQueryParameter(_serializers, transferGroup, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Topup? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Topup),
      ) as Topup;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Topup>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a top-up
  /// &lt;p&gt;Updates the metadata of a top-up. Other top-up details are not editable by design.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [topup] 
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Topup] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Topup>> postTopupsTopup({ 
    required String topup,
    String? description,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/topups/{topup}'.replaceAll('{' r'topup' '}', encodeQueryParameter(_serializers, topup, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Topup? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Topup),
      ) as Topup;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Topup>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Cancel a top-up
  /// &lt;p&gt;Cancels a top-up. Only pending top-ups can be canceled.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [topup] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Topup] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Topup>> postTopupsTopupCancel({ 
    required String topup,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/topups/{topup}/cancel'.replaceAll('{' r'topup' '}', encodeQueryParameter(_serializers, topup, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Topup? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Topup),
      ) as Topup;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Topup>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a transfer
  /// &lt;p&gt;To send funds from your Stripe account to a connected account, you create a new transfer object. Your &lt;a href&#x3D;\&quot;#balance\&quot;&gt;Stripe balance&lt;/a&gt; must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [currency] - Three-letter [ISO code for currency](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. Must be a [supported currency](https://docs.stripe.com/currencies).
  /// * [destination] - The ID of a connected Stripe account. <a href=\\\"/docs/connect/separate-charges-and-transfers\\\">See the Connect documentation</a> for details.
  /// * [amount] - A positive integer in cents (or local equivalent) representing how much to transfer.
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [sourceTransaction] - You can use this parameter to transfer funds from a charge before they are added to your available balance. A pending balance will transfer immediately but the funds will not become available until the original charge becomes available. [See the Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-availability) for details.
  /// * [sourceType] - The source balance to use for this transfer. One of `bank_account`, `card`, or `fpx`. For most users, this will default to `card`.
  /// * [transferGroup] - A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Transfer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Transfer>> postTransfers({ 
    required String currency,
    required String destination,
    int? amount,
    String? description,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    String? sourceTransaction,
    String? sourceType,
    String? transferGroup,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/transfers';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        r'destination': encodeQueryParameter(_serializers, destination, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (sourceTransaction != null) r'source_transaction': encodeQueryParameter(_serializers, sourceTransaction, const FullType(String)),
        if (sourceType != null) r'source_type': encodeQueryParameter(_serializers, sourceType, const FullType(String)),
        if (transferGroup != null) r'transfer_group': encodeQueryParameter(_serializers, transferGroup, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Transfer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Transfer),
      ) as Transfer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Transfer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a transfer reversal
  /// &lt;p&gt;When you create a new reversal, you must specify a transfer to create it on.&lt;/p&gt;  &lt;p&gt;When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.&lt;/p&gt;  &lt;p&gt;Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [amount] - A positive integer in cents (or local equivalent) representing how much of this transfer to reverse. Can only reverse up to the unreversed amount remaining of the transfer. Partial transfer reversals are only allowed for transfers to Stripe Accounts. Defaults to the entire transfer amount.
  /// * [description] - An arbitrary string which you can attach to a reversal object. This will be unset if you POST an empty value.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [refundApplicationFee] - Boolean indicating whether the application fee should be refunded when reversing this transfer. If a full transfer reversal is given, the full application fee will be refunded. Otherwise, the application fee will be refunded with an amount proportional to the amount of the transfer reversed.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TransferReversal] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TransferReversal>> postTransfersIdReversals({ 
    required String id,
    int? amount,
    String? description,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    bool? refundApplicationFee,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/transfers/{id}/reversals'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (amount != null) r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (refundApplicationFee != null) r'refund_application_fee': encodeQueryParameter(_serializers, refundApplicationFee, const FullType(bool)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TransferReversal? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TransferReversal),
      ) as TransferReversal;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TransferReversal>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a transfer
  /// &lt;p&gt;Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request accepts only metadata as an argument.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [transfer] 
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [Transfer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<Transfer>> postTransfersTransfer({ 
    required String transfer,
    String? description,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/transfers/{transfer}'.replaceAll('{' r'transfer' '}', encodeQueryParameter(_serializers, transfer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    Transfer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(Transfer),
      ) as Transfer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<Transfer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a reversal
  /// &lt;p&gt;Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.&lt;/p&gt;  &lt;p&gt;This request only accepts metadata and description as arguments.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [transfer] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TransferReversal] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TransferReversal>> postTransfersTransferReversalsId({ 
    required String id,
    required String transfer,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/transfers/{transfer}/reversals/{id}'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString()).replaceAll('{' r'transfer' '}', encodeQueryParameter(_serializers, transfer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TransferReversal? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TransferReversal),
      ) as TransferReversal;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TransferReversal>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a CreditReversal
  /// &lt;p&gt;Reverses a ReceivedCredit and creates a CreditReversal object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [receivedCredit] - The ReceivedCredit to reverse.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryCreditReversal] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryCreditReversal>> postTreasuryCreditReversals({ 
    required String receivedCredit,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/credit_reversals';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        r'received_credit': encodeQueryParameter(_serializers, receivedCredit, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryCreditReversal? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryCreditReversal),
      ) as TreasuryCreditReversal;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryCreditReversal>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a DebitReversal
  /// &lt;p&gt;Reverses a ReceivedDebit and creates a DebitReversal object.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [receivedDebit] - The ReceivedDebit to reverse.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryDebitReversal] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryDebitReversal>> postTreasuryDebitReversals({ 
    required String receivedDebit,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/debit_reversals';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        r'received_debit': encodeQueryParameter(_serializers, receivedDebit, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryDebitReversal? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryDebitReversal),
      ) as TreasuryDebitReversal;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryDebitReversal>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a FinancialAccount
  /// &lt;p&gt;Creates a new FinancialAccount. Each connected account can have up to three FinancialAccounts by default.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [supportedCurrencies] - The currencies the FinancialAccount can hold a balance in.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [features] 
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [nickname] 
  /// * [platformRestrictions] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryFinancialAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryFinancialAccount>> postTreasuryFinancialAccounts({ 
    required BuiltList<String> supportedCurrencies,
    BuiltList<String>? expand,
    FeatureAccess? features,
    BuiltMap<String, String>? metadata,
    PostTreasuryFinancialAccountsRequestNickname? nickname,
    PlatformRestrictions? platformRestrictions,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/financial_accounts';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (features != null) r'features': encodeQueryParameter(_serializers, features, const FullType(FeatureAccess)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (nickname != null) r'nickname': encodeQueryParameter(_serializers, nickname, const FullType(PostTreasuryFinancialAccountsRequestNickname)),
        if (platformRestrictions != null) r'platform_restrictions': encodeQueryParameter(_serializers, platformRestrictions, const FullType(PlatformRestrictions)),
        r'supported_currencies': encodeCollectionQueryParameter<String>(_serializers, supportedCurrencies, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryFinancialAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryFinancialAccount),
      ) as TreasuryFinancialAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryFinancialAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a FinancialAccount
  /// &lt;p&gt;Updates the details of a FinancialAccount.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [financialAccount] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [features] 
  /// * [forwardingSettings] 
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [nickname] 
  /// * [platformRestrictions] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryFinancialAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryFinancialAccount>> postTreasuryFinancialAccountsFinancialAccount({ 
    required String financialAccount,
    BuiltList<String>? expand,
    FeatureAccess1? features,
    ForwardingSettings? forwardingSettings,
    BuiltMap<String, String>? metadata,
    PostTreasuryFinancialAccountsRequestNickname? nickname,
    PlatformRestrictions? platformRestrictions,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/financial_accounts/{financial_account}'.replaceAll('{' r'financial_account' '}', encodeQueryParameter(_serializers, financialAccount, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (features != null) r'features': encodeQueryParameter(_serializers, features, const FullType(FeatureAccess1)),
        if (forwardingSettings != null) r'forwarding_settings': encodeQueryParameter(_serializers, forwardingSettings, const FullType(ForwardingSettings)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (nickname != null) r'nickname': encodeQueryParameter(_serializers, nickname, const FullType(PostTreasuryFinancialAccountsRequestNickname)),
        if (platformRestrictions != null) r'platform_restrictions': encodeQueryParameter(_serializers, platformRestrictions, const FullType(PlatformRestrictions)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryFinancialAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryFinancialAccount),
      ) as TreasuryFinancialAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryFinancialAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Close a FinancialAccount
  /// &lt;p&gt;Closes a FinancialAccount. A FinancialAccount can only be closed if it has a zero balance, has no pending InboundTransfers, and has canceled all attached Issuing cards.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [financialAccount] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [forwardingSettings] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryFinancialAccount] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryFinancialAccount>> postTreasuryFinancialAccountsFinancialAccountClose({ 
    required String financialAccount,
    BuiltList<String>? expand,
    ForwardingSettings? forwardingSettings,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/financial_accounts/{financial_account}/close'.replaceAll('{' r'financial_account' '}', encodeQueryParameter(_serializers, financialAccount, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (forwardingSettings != null) r'forwarding_settings': encodeQueryParameter(_serializers, forwardingSettings, const FullType(ForwardingSettings)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryFinancialAccount? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryFinancialAccount),
      ) as TreasuryFinancialAccount;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryFinancialAccount>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update FinancialAccount Features
  /// &lt;p&gt;Updates the Features associated with a FinancialAccount.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [financialAccount] 
  /// * [cardIssuing] 
  /// * [depositInsurance] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [financialAddresses] 
  /// * [inboundTransfers] 
  /// * [intraStripeFlows] 
  /// * [outboundPayments] 
  /// * [outboundTransfers] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryFinancialAccountFeatures] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryFinancialAccountFeatures>> postTreasuryFinancialAccountsFinancialAccountFeatures({ 
    required String financialAccount,
    Access1? cardIssuing,
    Access2? depositInsurance,
    BuiltList<String>? expand,
    FinancialAddresses1? financialAddresses,
    InboundTransfers2? inboundTransfers,
    Access3? intraStripeFlows,
    OutboundPayments1? outboundPayments,
    OutboundTransfers1? outboundTransfers,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/financial_accounts/{financial_account}/features'.replaceAll('{' r'financial_account' '}', encodeQueryParameter(_serializers, financialAccount, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (cardIssuing != null) r'card_issuing': encodeQueryParameter(_serializers, cardIssuing, const FullType(Access1)),
        if (depositInsurance != null) r'deposit_insurance': encodeQueryParameter(_serializers, depositInsurance, const FullType(Access2)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (financialAddresses != null) r'financial_addresses': encodeQueryParameter(_serializers, financialAddresses, const FullType(FinancialAddresses1)),
        if (inboundTransfers != null) r'inbound_transfers': encodeQueryParameter(_serializers, inboundTransfers, const FullType(InboundTransfers2)),
        if (intraStripeFlows != null) r'intra_stripe_flows': encodeQueryParameter(_serializers, intraStripeFlows, const FullType(Access3)),
        if (outboundPayments != null) r'outbound_payments': encodeQueryParameter(_serializers, outboundPayments, const FullType(OutboundPayments1)),
        if (outboundTransfers != null) r'outbound_transfers': encodeQueryParameter(_serializers, outboundTransfers, const FullType(OutboundTransfers1)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryFinancialAccountFeatures? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryFinancialAccountFeatures),
      ) as TreasuryFinancialAccountFeatures;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryFinancialAccountFeatures>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create an InboundTransfer
  /// &lt;p&gt;Creates an InboundTransfer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [amount] - Amount (in cents) to be transferred.
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [financialAccount] - The FinancialAccount to send funds to.
  /// * [originPaymentMethod] - The origin payment method to be debited for the InboundTransfer.
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [statementDescriptor] - The complete description that appears on your customers' statements. Maximum 10 characters.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryInboundTransfer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryInboundTransfer>> postTreasuryInboundTransfers({ 
    required int amount,
    required String currency,
    required String financialAccount,
    required String originPaymentMethod,
    String? description,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    String? statementDescriptor,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/inbound_transfers';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'financial_account': encodeQueryParameter(_serializers, financialAccount, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        r'origin_payment_method': encodeQueryParameter(_serializers, originPaymentMethod, const FullType(String)),
        if (statementDescriptor != null) r'statement_descriptor': encodeQueryParameter(_serializers, statementDescriptor, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryInboundTransfer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryInboundTransfer),
      ) as TreasuryInboundTransfer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryInboundTransfer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Cancel an InboundTransfer
  /// &lt;p&gt;Cancels an InboundTransfer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [inboundTransfer] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryInboundTransfer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryInboundTransfer>> postTreasuryInboundTransfersInboundTransferCancel({ 
    required String inboundTransfer,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/inbound_transfers/{inbound_transfer}/cancel'.replaceAll('{' r'inbound_transfer' '}', encodeQueryParameter(_serializers, inboundTransfer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryInboundTransfer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryInboundTransfer),
      ) as TreasuryInboundTransfer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryInboundTransfer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create an OutboundPayment
  /// &lt;p&gt;Creates an OutboundPayment.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [amount] - Amount (in cents) to be transferred.
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [financialAccount] - The FinancialAccount to pull funds from.
  /// * [customer] - ID of the customer to whom the OutboundPayment is sent. Must match the Customer attached to the `destination_payment_method` passed in.
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
  /// * [destinationPaymentMethod] - The PaymentMethod to use as the payment instrument for the OutboundPayment. Exclusive with `destination_payment_method_data`.
  /// * [destinationPaymentMethodData] 
  /// * [destinationPaymentMethodOptions] 
  /// * [endUserDetails] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [statementDescriptor] - The description that appears on the receiving end for this OutboundPayment (for example, bank statement for external bank transfer). Maximum 10 characters for `ach` payments, 140 characters for `us_domestic_wire` payments, or 500 characters for `stripe` network transfers. The default value is \\\"payment\\\".
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryOutboundPayment] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryOutboundPayment>> postTreasuryOutboundPayments({ 
    required int amount,
    required String currency,
    required String financialAccount,
    String? customer,
    String? description,
    String? destinationPaymentMethod,
    PaymentMethodData? destinationPaymentMethodData,
    PaymentMethodOptions2? destinationPaymentMethodOptions,
    EndUserDetailsParams? endUserDetails,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    String? statementDescriptor,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/outbound_payments';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (customer != null) r'customer': encodeQueryParameter(_serializers, customer, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (destinationPaymentMethod != null) r'destination_payment_method': encodeQueryParameter(_serializers, destinationPaymentMethod, const FullType(String)),
        if (destinationPaymentMethodData != null) r'destination_payment_method_data': encodeQueryParameter(_serializers, destinationPaymentMethodData, const FullType(PaymentMethodData)),
        if (destinationPaymentMethodOptions != null) r'destination_payment_method_options': encodeQueryParameter(_serializers, destinationPaymentMethodOptions, const FullType(PaymentMethodOptions2)),
        if (endUserDetails != null) r'end_user_details': encodeQueryParameter(_serializers, endUserDetails, const FullType(EndUserDetailsParams)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'financial_account': encodeQueryParameter(_serializers, financialAccount, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (statementDescriptor != null) r'statement_descriptor': encodeQueryParameter(_serializers, statementDescriptor, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryOutboundPayment? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryOutboundPayment),
      ) as TreasuryOutboundPayment;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryOutboundPayment>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Cancel an OutboundPayment
  /// &lt;p&gt;Cancel an OutboundPayment.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [id] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryOutboundPayment] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryOutboundPayment>> postTreasuryOutboundPaymentsIdCancel({ 
    required String id,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/outbound_payments/{id}/cancel'.replaceAll('{' r'id' '}', encodeQueryParameter(_serializers, id, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryOutboundPayment? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryOutboundPayment),
      ) as TreasuryOutboundPayment;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryOutboundPayment>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create an OutboundTransfer
  /// &lt;p&gt;Creates an OutboundTransfer.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [amount] - Amount (in cents) to be transferred.
  /// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  /// * [financialAccount] - The FinancialAccount to pull funds from.
  /// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
  /// * [destinationPaymentMethod] - The PaymentMethod to use as the payment instrument for the OutboundTransfer.
  /// * [destinationPaymentMethodData] 
  /// * [destinationPaymentMethodOptions] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
  /// * [statementDescriptor] - Statement descriptor to be shown on the receiving end of an OutboundTransfer. Maximum 10 characters for `ach` transfers or 140 characters for `us_domestic_wire` transfers. The default value is \\\"transfer\\\".
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryOutboundTransfer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryOutboundTransfer>> postTreasuryOutboundTransfers({ 
    required int amount,
    required String currency,
    required String financialAccount,
    String? description,
    String? destinationPaymentMethod,
    PaymentMethodData1? destinationPaymentMethodData,
    PaymentMethodOptions3? destinationPaymentMethodOptions,
    BuiltList<String>? expand,
    BuiltMap<String, String>? metadata,
    String? statementDescriptor,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/outbound_transfers';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        r'amount': encodeQueryParameter(_serializers, amount, const FullType(int)),
        r'currency': encodeQueryParameter(_serializers, currency, const FullType(String)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(String)),
        if (destinationPaymentMethod != null) r'destination_payment_method': encodeQueryParameter(_serializers, destinationPaymentMethod, const FullType(String)),
        if (destinationPaymentMethodData != null) r'destination_payment_method_data': encodeQueryParameter(_serializers, destinationPaymentMethodData, const FullType(PaymentMethodData1)),
        if (destinationPaymentMethodOptions != null) r'destination_payment_method_options': encodeQueryParameter(_serializers, destinationPaymentMethodOptions, const FullType(PaymentMethodOptions3)),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        r'financial_account': encodeQueryParameter(_serializers, financialAccount, const FullType(String)),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(BuiltMap, [FullType(String), FullType(BuiltMap)]), format: ListFormat.csv,),
        if (statementDescriptor != null) r'statement_descriptor': encodeQueryParameter(_serializers, statementDescriptor, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryOutboundTransfer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryOutboundTransfer),
      ) as TreasuryOutboundTransfer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryOutboundTransfer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Cancel an OutboundTransfer
  /// &lt;p&gt;An OutboundTransfer can be canceled if the funds have not yet been paid out.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [outboundTransfer] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [TreasuryOutboundTransfer] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<TreasuryOutboundTransfer>> postTreasuryOutboundTransfersOutboundTransferCancel({ 
    required String outboundTransfer,
    BuiltList<String>? expand,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/treasury/outbound_transfers/{outbound_transfer}/cancel'.replaceAll('{' r'outbound_transfer' '}', encodeQueryParameter(_serializers, outboundTransfer, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    TreasuryOutboundTransfer? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(TreasuryOutboundTransfer),
      ) as TreasuryOutboundTransfer;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<TreasuryOutboundTransfer>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Create a webhook endpoint
  /// &lt;p&gt;A webhook endpoint must have a &lt;code&gt;url&lt;/code&gt; and a list of &lt;code&gt;enabled_events&lt;/code&gt;. You may optionally specify the Boolean &lt;code&gt;connect&lt;/code&gt; parameter. If set to true, then a Connect webhook endpoint that notifies the specified &lt;code&gt;url&lt;/code&gt; about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified &lt;code&gt;url&lt;/code&gt; only about events from your account is created. You can also create webhook endpoints in the &lt;a href&#x3D;\&quot;https://dashboard.stripe.com/account/webhooks\&quot;&gt;webhooks settings&lt;/a&gt; section of the Dashboard.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [enabledEvents] - The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection.
  /// * [url] - The URL of the webhook endpoint.
  /// * [apiVersion] - Events sent to this endpoint will be generated with this Stripe Version instead of your account's default Stripe Version.
  /// * [connect] - Whether this endpoint should receive events from connected accounts (`true`), or from your account (`false`). Defaults to `false`.
  /// * [description] 
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [WebhookEndpoint] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<WebhookEndpoint>> postWebhookEndpoints({ 
    required BuiltList<String> enabledEvents,
    required String url,
    String? apiVersion,
    bool? connect,
    PostWebhookEndpointsRequestDescription? description,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/webhook_endpoints';
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (apiVersion != null) r'api_version': encodeQueryParameter(_serializers, apiVersion, const FullType(String)),
        if (connect != null) r'connect': encodeQueryParameter(_serializers, connect, const FullType(bool)),
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(PostWebhookEndpointsRequestDescription)),
        r'enabled_events': encodeCollectionQueryParameter<String>(_serializers, enabledEvents, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        r'url': encodeQueryParameter(_serializers, url, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    WebhookEndpoint? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(WebhookEndpoint),
      ) as WebhookEndpoint;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<WebhookEndpoint>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

  /// Update a webhook endpoint
  /// &lt;p&gt;Updates the webhook endpoint. You may edit the &lt;code&gt;url&lt;/code&gt;, the list of &lt;code&gt;enabled_events&lt;/code&gt;, and the status of your endpoint.&lt;/p&gt;
  ///
  /// Parameters:
  /// * [webhookEndpoint] 
  /// * [description] 
  /// * [disabled] - Disable the webhook endpoint if set to true.
  /// * [enabledEvents] - The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection.
  /// * [expand] - Specifies which fields in the response should be expanded.
  /// * [metadata] 
  /// * [url] - The URL of the webhook endpoint.
  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
  /// * [headers] - Can be used to add additional headers to the request
  /// * [extras] - Can be used to add flags to the request
  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
  ///
  /// Returns a [Future] containing a [Response] with a [WebhookEndpoint] as data
  /// Throws [DioException] if API call or serialization fails
  Future<Response<WebhookEndpoint>> postWebhookEndpointsWebhookEndpoint({ 
    required String webhookEndpoint,
    PostWebhookEndpointsRequestDescription? description,
    bool? disabled,
    BuiltList<String>? enabledEvents,
    BuiltList<String>? expand,
    PostAccountsRequestMetadata? metadata,
    String? url,
    CancelToken? cancelToken,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? extra,
    ValidateStatus? validateStatus,
    ProgressCallback? onSendProgress,
    ProgressCallback? onReceiveProgress,
  }) async {
    final _path = r'/v1/webhook_endpoints/{webhook_endpoint}'.replaceAll('{' r'webhook_endpoint' '}', encodeQueryParameter(_serializers, webhookEndpoint, const FullType(String)).toString());
    final _options = Options(
      method: r'POST',
      headers: <String, dynamic>{
        ...?headers,
      },
      extra: <String, dynamic>{
        'secure': <Map<String, String>>[
          {
            'type': 'http',
            'scheme': 'basic',
            'name': 'basicAuth',
          },{
            'type': 'http',
            'scheme': 'bearer',
            'name': 'bearerAuth',
          },
        ],
        ...?extra,
      },
      contentType: 'application/x-www-form-urlencoded',
      validateStatus: validateStatus,
    );

    dynamic _bodyData;

    try {
      _bodyData = <String, dynamic>{
        if (description != null) r'description': encodeQueryParameter(_serializers, description, const FullType(PostWebhookEndpointsRequestDescription)),
        if (disabled != null) r'disabled': encodeQueryParameter(_serializers, disabled, const FullType(bool)),
        if (enabledEvents != null) r'enabled_events': encodeCollectionQueryParameter<String>(_serializers, enabledEvents, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (expand != null) r'expand': encodeCollectionQueryParameter<String>(_serializers, expand, const FullType(BuiltList, [FullType(String)]), format: ListFormat.csv,),
        if (metadata != null) r'metadata': encodeQueryParameter(_serializers, metadata, const FullType(PostAccountsRequestMetadata)),
        if (url != null) r'url': encodeQueryParameter(_serializers, url, const FullType(String)),
      };

    } catch(error, stackTrace) {
      throw DioException(
         requestOptions: _options.compose(
          _dio.options,
          _path,
        ),
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    final _response = await _dio.request<Object>(
      _path,
      data: _bodyData,
      options: _options,
      cancelToken: cancelToken,
      onSendProgress: onSendProgress,
      onReceiveProgress: onReceiveProgress,
    );

    WebhookEndpoint? _responseData;

    try {
      final rawResponse = _response.data;
      _responseData = rawResponse == null ? null : _serializers.deserialize(
        rawResponse,
        specifiedType: const FullType(WebhookEndpoint),
      ) as WebhookEndpoint;

    } catch (error, stackTrace) {
      throw DioException(
        requestOptions: _response.requestOptions,
        response: _response,
        type: DioExceptionType.unknown,
        error: error,
        stackTrace: stackTrace,
      );
    }

    return Response<WebhookEndpoint>(
      data: _responseData,
      headers: _response.headers,
      isRedirect: _response.isRedirect,
      requestOptions: _response.requestOptions,
      redirects: _response.redirects,
      statusCode: _response.statusCode,
      statusMessage: _response.statusMessage,
      extra: _response.extra,
    );
  }

}
