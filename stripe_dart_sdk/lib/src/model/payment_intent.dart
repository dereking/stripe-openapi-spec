//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:stripe_dart_sdk/src/model/payment_intent_amount_details.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_processing.dart';
import 'package:stripe_dart_sdk/src/model/api_errors.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_application.dart';
import 'package:stripe_dart_sdk/src/model/transfer_data.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_payment_method_options.dart';
import 'package:stripe_dart_sdk/src/model/payment_flows_automatic_payment_methods_payment_intent.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_customer.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_latest_charge.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_on_behalf_of.dart';
import 'package:built_collection/built_collection.dart';
import 'package:stripe_dart_sdk/src/model/shipping.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_next_action.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_review.dart';
import 'package:stripe_dart_sdk/src/model/payment_flows_payment_intent_presentment_details.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_payment_method.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_config_biz_payment_method_configuration_details.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part 'payment_intent.g.dart';

/// A PaymentIntent guides you through the process of collecting a payment from your customer. We recommend that you create exactly one PaymentIntent for each order or customer session in your system. You can reference the PaymentIntent later to see the history of payment attempts for a particular session.  A PaymentIntent transitions through [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses) throughout its lifetime as it interfaces with Stripe.js to perform authentication flows and ultimately creates at most one successful charge.  Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)
///
/// Properties:
/// * [amount] - Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
/// * [amountCapturable] - Amount that can be captured from this PaymentIntent.
/// * [amountDetails] 
/// * [amountReceived] - Amount that this PaymentIntent collects.
/// * [application] 
/// * [applicationFeeAmount] - The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total amount captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
/// * [automaticPaymentMethods] 
/// * [canceledAt] - Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
/// * [cancellationReason] - Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
/// * [captureMethod] - Controls when the funds will be captured from the customer's account.
/// * [clientSecret] - The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.   The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.  Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.
/// * [confirmationMethod] - Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
/// * [created] - Time at which the object was created. Measured in seconds since the Unix epoch.
/// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
/// * [customer] 
/// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
/// * [id] - Unique identifier for the object.
/// * [lastPaymentError] 
/// * [latestCharge] 
/// * [livemode] - Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
/// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Learn more about [storing information in metadata](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).
/// * [nextAction] 
/// * [object] - String representing the object's type. Objects of the same type share the same value.
/// * [onBehalfOf] 
/// * [paymentMethod] 
/// * [paymentMethodConfigurationDetails] 
/// * [paymentMethodOptions] 
/// * [paymentMethodTypes] - The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. A comprehensive list of valid payment method types can be found [here](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).
/// * [presentmentDetails] 
/// * [processing] 
/// * [receiptEmail] - Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
/// * [review] 
/// * [setupFutureUsage] - Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
/// * [shipping] 
/// * [statementDescriptor] - Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
/// * [statementDescriptorSuffix] - Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
/// * [status] - Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
/// * [transferData] 
/// * [transferGroup] - A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers).
@BuiltValue()
abstract class PaymentIntent implements Built<PaymentIntent, PaymentIntentBuilder> {
  /// Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
  @BuiltValueField(wireName: r'amount')
  int? get amount;

  /// Amount that can be captured from this PaymentIntent.
  @BuiltValueField(wireName: r'amount_capturable')
  int? get amountCapturable;

  @BuiltValueField(wireName: r'amount_details')
  PaymentIntentAmountDetails? get amountDetails;

  /// Amount that this PaymentIntent collects.
  @BuiltValueField(wireName: r'amount_received')
  int? get amountReceived;

  @BuiltValueField(wireName: r'application')
  PaymentIntentApplication? get application;

  /// The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total amount captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  @BuiltValueField(wireName: r'application_fee_amount')
  int? get applicationFeeAmount;

  @BuiltValueField(wireName: r'automatic_payment_methods')
  PaymentFlowsAutomaticPaymentMethodsPaymentIntent? get automaticPaymentMethods;

  /// Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
  @BuiltValueField(wireName: r'canceled_at')
  int? get canceledAt;

  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueField(wireName: r'cancellation_reason')
  PaymentIntentCancellationReasonEnum? get cancellationReason;
  // enum cancellationReasonEnum {  abandoned,  automatic,  duplicate,  expired,  failed_invoice,  fraudulent,  requested_by_customer,  void_invoice,  };

  /// Controls when the funds will be captured from the customer's account.
  @BuiltValueField(wireName: r'capture_method')
  PaymentIntentCaptureMethodEnum? get captureMethod;
  // enum captureMethodEnum {  automatic,  automatic_async,  manual,  };

  /// The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.   The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.  Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.
  @BuiltValueField(wireName: r'client_secret')
  String? get clientSecret;

  /// Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
  @BuiltValueField(wireName: r'confirmation_method')
  PaymentIntentConfirmationMethodEnum? get confirmationMethod;
  // enum confirmationMethodEnum {  automatic,  manual,  };

  /// Time at which the object was created. Measured in seconds since the Unix epoch.
  @BuiltValueField(wireName: r'created')
  int get created;

  /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  @BuiltValueField(wireName: r'currency')
  String? get currency;

  @BuiltValueField(wireName: r'customer')
  PaymentIntentCustomer? get customer;

  /// An arbitrary string attached to the object. Often useful for displaying to users.
  @BuiltValueField(wireName: r'description')
  String? get description;

  /// Unique identifier for the object.
  @BuiltValueField(wireName: r'id')
  String get id;

  @BuiltValueField(wireName: r'last_payment_error')
  ApiErrors? get lastPaymentError;

  @BuiltValueField(wireName: r'latest_charge')
  PaymentIntentLatestCharge? get latestCharge;

  /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
  @BuiltValueField(wireName: r'livemode')
  bool get livemode;

  /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Learn more about [storing information in metadata](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).
  @BuiltValueField(wireName: r'metadata')
  BuiltMap<String, String>? get metadata;

  @BuiltValueField(wireName: r'next_action')
  PaymentIntentNextAction? get nextAction;

  /// String representing the object's type. Objects of the same type share the same value.
  @BuiltValueField(wireName: r'object')
  PaymentIntentObjectEnum get object;
  // enum objectEnum {  payment_intent,  };

  @BuiltValueField(wireName: r'on_behalf_of')
  PaymentIntentOnBehalfOf? get onBehalfOf;

  @BuiltValueField(wireName: r'payment_method')
  PaymentIntentPaymentMethod? get paymentMethod;

  @BuiltValueField(wireName: r'payment_method_configuration_details')
  PaymentMethodConfigBizPaymentMethodConfigurationDetails? get paymentMethodConfigurationDetails;

  @BuiltValueField(wireName: r'payment_method_options')
  PaymentIntentPaymentMethodOptions? get paymentMethodOptions;

  /// The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. A comprehensive list of valid payment method types can be found [here](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).
  @BuiltValueField(wireName: r'payment_method_types')
  BuiltList<String>? get paymentMethodTypes;

  @BuiltValueField(wireName: r'presentment_details')
  PaymentFlowsPaymentIntentPresentmentDetails? get presentmentDetails;

  @BuiltValueField(wireName: r'processing')
  PaymentIntentProcessing? get processing;

  /// Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
  @BuiltValueField(wireName: r'receipt_email')
  String? get receiptEmail;

  @BuiltValueField(wireName: r'review')
  PaymentIntentReview? get review;

  /// Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  @BuiltValueField(wireName: r'setup_future_usage')
  PaymentIntentSetupFutureUsageEnum? get setupFutureUsage;
  // enum setupFutureUsageEnum {  off_session,  on_session,  };

  @BuiltValueField(wireName: r'shipping')
  Shipping? get shipping;

  /// Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
  @BuiltValueField(wireName: r'statement_descriptor')
  String? get statementDescriptor;

  /// Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
  @BuiltValueField(wireName: r'statement_descriptor_suffix')
  String? get statementDescriptorSuffix;

  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueField(wireName: r'status')
  PaymentIntentStatusEnum get status;
  // enum statusEnum {  canceled,  processing,  requires_action,  requires_capture,  requires_confirmation,  requires_payment_method,  succeeded,  };

  @BuiltValueField(wireName: r'transfer_data')
  TransferData? get transferData;

  /// A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers).
  @BuiltValueField(wireName: r'transfer_group')
  String? get transferGroup;

  PaymentIntent._();

  factory PaymentIntent([void updates(PaymentIntentBuilder b)]) = _$PaymentIntent;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(PaymentIntentBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<PaymentIntent> get serializer => _$PaymentIntentSerializer();
}

class _$PaymentIntentSerializer implements PrimitiveSerializer<PaymentIntent> {
  @override
  final Iterable<Type> types = const [PaymentIntent, _$PaymentIntent];

  @override
  final String wireName = r'PaymentIntent';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    PaymentIntent object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
    if (object.amount != null) {
      yield r'amount';
      yield serializers.serialize(
        object.amount,
        specifiedType: const FullType(int),
      );
    }
    if (object.amountCapturable != null) {
      yield r'amount_capturable';
      yield serializers.serialize(
        object.amountCapturable,
        specifiedType: const FullType(int),
      );
    }
    if (object.amountDetails != null) {
      yield r'amount_details';
      yield serializers.serialize(
        object.amountDetails,
        specifiedType: const FullType(PaymentIntentAmountDetails),
      );
    }
    if (object.amountReceived != null) {
      yield r'amount_received';
      yield serializers.serialize(
        object.amountReceived,
        specifiedType: const FullType(int),
      );
    }
    if (object.application != null) {
      yield r'application';
      yield serializers.serialize(
        object.application,
        specifiedType: const FullType.nullable(PaymentIntentApplication),
      );
    }
    if (object.applicationFeeAmount != null) {
      yield r'application_fee_amount';
      yield serializers.serialize(
        object.applicationFeeAmount,
        specifiedType: const FullType.nullable(int),
      );
    }
    if (object.automaticPaymentMethods != null) {
      yield r'automatic_payment_methods';
      yield serializers.serialize(
        object.automaticPaymentMethods,
        specifiedType: const FullType.nullable(PaymentFlowsAutomaticPaymentMethodsPaymentIntent),
      );
    }
    if (object.canceledAt != null) {
      yield r'canceled_at';
      yield serializers.serialize(
        object.canceledAt,
        specifiedType: const FullType.nullable(int),
      );
    }
    if (object.cancellationReason != null) {
      yield r'cancellation_reason';
      yield serializers.serialize(
        object.cancellationReason,
        specifiedType: const FullType.nullable(PaymentIntentCancellationReasonEnum),
      );
    }
    if (object.captureMethod != null) {
      yield r'capture_method';
      yield serializers.serialize(
        object.captureMethod,
        specifiedType: const FullType(PaymentIntentCaptureMethodEnum),
      );
    }
    if (object.clientSecret != null) {
      yield r'client_secret';
      yield serializers.serialize(
        object.clientSecret,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.confirmationMethod != null) {
      yield r'confirmation_method';
      yield serializers.serialize(
        object.confirmationMethod,
        specifiedType: const FullType(PaymentIntentConfirmationMethodEnum),
      );
    }
    yield r'created';
    yield serializers.serialize(
      object.created,
      specifiedType: const FullType(int),
    );
    if (object.currency != null) {
      yield r'currency';
      yield serializers.serialize(
        object.currency,
        specifiedType: const FullType(String),
      );
    }
    if (object.customer != null) {
      yield r'customer';
      yield serializers.serialize(
        object.customer,
        specifiedType: const FullType.nullable(PaymentIntentCustomer),
      );
    }
    if (object.description != null) {
      yield r'description';
      yield serializers.serialize(
        object.description,
        specifiedType: const FullType.nullable(String),
      );
    }
    yield r'id';
    yield serializers.serialize(
      object.id,
      specifiedType: const FullType(String),
    );
    if (object.lastPaymentError != null) {
      yield r'last_payment_error';
      yield serializers.serialize(
        object.lastPaymentError,
        specifiedType: const FullType.nullable(ApiErrors),
      );
    }
    if (object.latestCharge != null) {
      yield r'latest_charge';
      yield serializers.serialize(
        object.latestCharge,
        specifiedType: const FullType.nullable(PaymentIntentLatestCharge),
      );
    }
    yield r'livemode';
    yield serializers.serialize(
      object.livemode,
      specifiedType: const FullType(bool),
    );
    if (object.metadata != null) {
      yield r'metadata';
      yield serializers.serialize(
        object.metadata,
        specifiedType: const FullType(BuiltMap, [FullType(String), FullType(String)]),
      );
    }
    if (object.nextAction != null) {
      yield r'next_action';
      yield serializers.serialize(
        object.nextAction,
        specifiedType: const FullType.nullable(PaymentIntentNextAction),
      );
    }
    yield r'object';
    yield serializers.serialize(
      object.object,
      specifiedType: const FullType(PaymentIntentObjectEnum),
    );
    if (object.onBehalfOf != null) {
      yield r'on_behalf_of';
      yield serializers.serialize(
        object.onBehalfOf,
        specifiedType: const FullType.nullable(PaymentIntentOnBehalfOf),
      );
    }
    if (object.paymentMethod != null) {
      yield r'payment_method';
      yield serializers.serialize(
        object.paymentMethod,
        specifiedType: const FullType.nullable(PaymentIntentPaymentMethod),
      );
    }
    if (object.paymentMethodConfigurationDetails != null) {
      yield r'payment_method_configuration_details';
      yield serializers.serialize(
        object.paymentMethodConfigurationDetails,
        specifiedType: const FullType.nullable(PaymentMethodConfigBizPaymentMethodConfigurationDetails),
      );
    }
    if (object.paymentMethodOptions != null) {
      yield r'payment_method_options';
      yield serializers.serialize(
        object.paymentMethodOptions,
        specifiedType: const FullType.nullable(PaymentIntentPaymentMethodOptions),
      );
    }
    if (object.paymentMethodTypes != null) {
      yield r'payment_method_types';
      yield serializers.serialize(
        object.paymentMethodTypes,
        specifiedType: const FullType(BuiltList, [FullType(String)]),
      );
    }
    if (object.presentmentDetails != null) {
      yield r'presentment_details';
      yield serializers.serialize(
        object.presentmentDetails,
        specifiedType: const FullType(PaymentFlowsPaymentIntentPresentmentDetails),
      );
    }
    if (object.processing != null) {
      yield r'processing';
      yield serializers.serialize(
        object.processing,
        specifiedType: const FullType.nullable(PaymentIntentProcessing),
      );
    }
    if (object.receiptEmail != null) {
      yield r'receipt_email';
      yield serializers.serialize(
        object.receiptEmail,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.review != null) {
      yield r'review';
      yield serializers.serialize(
        object.review,
        specifiedType: const FullType.nullable(PaymentIntentReview),
      );
    }
    if (object.setupFutureUsage != null) {
      yield r'setup_future_usage';
      yield serializers.serialize(
        object.setupFutureUsage,
        specifiedType: const FullType.nullable(PaymentIntentSetupFutureUsageEnum),
      );
    }
    if (object.shipping != null) {
      yield r'shipping';
      yield serializers.serialize(
        object.shipping,
        specifiedType: const FullType.nullable(Shipping),
      );
    }
    if (object.statementDescriptor != null) {
      yield r'statement_descriptor';
      yield serializers.serialize(
        object.statementDescriptor,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.statementDescriptorSuffix != null) {
      yield r'statement_descriptor_suffix';
      yield serializers.serialize(
        object.statementDescriptorSuffix,
        specifiedType: const FullType.nullable(String),
      );
    }
    yield r'status';
    yield serializers.serialize(
      object.status,
      specifiedType: const FullType(PaymentIntentStatusEnum),
    );
    if (object.transferData != null) {
      yield r'transfer_data';
      yield serializers.serialize(
        object.transferData,
        specifiedType: const FullType.nullable(TransferData),
      );
    }
    if (object.transferGroup != null) {
      yield r'transfer_group';
      yield serializers.serialize(
        object.transferGroup,
        specifiedType: const FullType.nullable(String),
      );
    }
  }

  @override
  Object serialize(
    Serializers serializers,
    PaymentIntent object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    return _serializeProperties(serializers, object, specifiedType: specifiedType).toList();
  }

  void _deserializeProperties(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
    required List<Object?> serializedList,
    required PaymentIntentBuilder result,
    required List<Object?> unhandled,
  }) {
    for (var i = 0; i < serializedList.length; i += 2) {
      final key = serializedList[i] as String;
      final value = serializedList[i + 1];
      switch (key) {
        case r'amount':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.amount = valueDes;
          break;
        case r'amount_capturable':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.amountCapturable = valueDes;
          break;
        case r'amount_details':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(PaymentIntentAmountDetails),
          ) as PaymentIntentAmountDetails;
          result.amountDetails.replace(valueDes);
          break;
        case r'amount_received':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.amountReceived = valueDes;
          break;
        case r'application':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(PaymentIntentApplication),
          ) as PaymentIntentApplication?;
          if (valueDes == null) continue;
          result.application.replace(valueDes);
          break;
        case r'application_fee_amount':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(int),
          ) as int?;
          if (valueDes == null) continue;
          result.applicationFeeAmount = valueDes;
          break;
        case r'automatic_payment_methods':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(PaymentFlowsAutomaticPaymentMethodsPaymentIntent),
          ) as PaymentFlowsAutomaticPaymentMethodsPaymentIntent?;
          if (valueDes == null) continue;
          result.automaticPaymentMethods.replace(valueDes);
          break;
        case r'canceled_at':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(int),
          ) as int?;
          if (valueDes == null) continue;
          result.canceledAt = valueDes;
          break;
        case r'cancellation_reason':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(PaymentIntentCancellationReasonEnum),
          ) as PaymentIntentCancellationReasonEnum?;
          if (valueDes == null) continue;
          result.cancellationReason = valueDes;
          break;
        case r'capture_method':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(PaymentIntentCaptureMethodEnum),
          ) as PaymentIntentCaptureMethodEnum;
          result.captureMethod = valueDes;
          break;
        case r'client_secret':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.clientSecret = valueDes;
          break;
        case r'confirmation_method':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(PaymentIntentConfirmationMethodEnum),
          ) as PaymentIntentConfirmationMethodEnum;
          result.confirmationMethod = valueDes;
          break;
        case r'created':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.created = valueDes;
          break;
        case r'currency':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.currency = valueDes;
          break;
        case r'customer':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(PaymentIntentCustomer),
          ) as PaymentIntentCustomer?;
          if (valueDes == null) continue;
          result.customer.replace(valueDes);
          break;
        case r'description':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.description = valueDes;
          break;
        case r'id':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.id = valueDes;
          break;
        case r'last_payment_error':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(ApiErrors),
          ) as ApiErrors?;
          if (valueDes == null) continue;
          result.lastPaymentError.replace(valueDes);
          break;
        case r'latest_charge':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(PaymentIntentLatestCharge),
          ) as PaymentIntentLatestCharge?;
          if (valueDes == null) continue;
          result.latestCharge.replace(valueDes);
          break;
        case r'livemode':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(bool),
          ) as bool;
          result.livemode = valueDes;
          break;
        case r'metadata':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(BuiltMap, [FullType(String), FullType(String)]),
          ) as BuiltMap<String, String>;
          result.metadata.replace(valueDes);
          break;
        case r'next_action':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(PaymentIntentNextAction),
          ) as PaymentIntentNextAction?;
          if (valueDes == null) continue;
          result.nextAction.replace(valueDes);
          break;
        case r'object':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(PaymentIntentObjectEnum),
          ) as PaymentIntentObjectEnum;
          result.object = valueDes;
          break;
        case r'on_behalf_of':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(PaymentIntentOnBehalfOf),
          ) as PaymentIntentOnBehalfOf?;
          if (valueDes == null) continue;
          result.onBehalfOf.replace(valueDes);
          break;
        case r'payment_method':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(PaymentIntentPaymentMethod),
          ) as PaymentIntentPaymentMethod?;
          if (valueDes == null) continue;
          result.paymentMethod.replace(valueDes);
          break;
        case r'payment_method_configuration_details':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(PaymentMethodConfigBizPaymentMethodConfigurationDetails),
          ) as PaymentMethodConfigBizPaymentMethodConfigurationDetails?;
          if (valueDes == null) continue;
          result.paymentMethodConfigurationDetails.replace(valueDes);
          break;
        case r'payment_method_options':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(PaymentIntentPaymentMethodOptions),
          ) as PaymentIntentPaymentMethodOptions?;
          if (valueDes == null) continue;
          result.paymentMethodOptions.replace(valueDes);
          break;
        case r'payment_method_types':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(BuiltList, [FullType(String)]),
          ) as BuiltList<String>;
          result.paymentMethodTypes.replace(valueDes);
          break;
        case r'presentment_details':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(PaymentFlowsPaymentIntentPresentmentDetails),
          ) as PaymentFlowsPaymentIntentPresentmentDetails;
          result.presentmentDetails.replace(valueDes);
          break;
        case r'processing':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(PaymentIntentProcessing),
          ) as PaymentIntentProcessing?;
          if (valueDes == null) continue;
          result.processing.replace(valueDes);
          break;
        case r'receipt_email':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.receiptEmail = valueDes;
          break;
        case r'review':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(PaymentIntentReview),
          ) as PaymentIntentReview?;
          if (valueDes == null) continue;
          result.review.replace(valueDes);
          break;
        case r'setup_future_usage':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(PaymentIntentSetupFutureUsageEnum),
          ) as PaymentIntentSetupFutureUsageEnum?;
          if (valueDes == null) continue;
          result.setupFutureUsage = valueDes;
          break;
        case r'shipping':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(Shipping),
          ) as Shipping?;
          if (valueDes == null) continue;
          result.shipping.replace(valueDes);
          break;
        case r'statement_descriptor':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.statementDescriptor = valueDes;
          break;
        case r'statement_descriptor_suffix':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.statementDescriptorSuffix = valueDes;
          break;
        case r'status':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(PaymentIntentStatusEnum),
          ) as PaymentIntentStatusEnum;
          result.status = valueDes;
          break;
        case r'transfer_data':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(TransferData),
          ) as TransferData?;
          if (valueDes == null) continue;
          result.transferData.replace(valueDes);
          break;
        case r'transfer_group':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.transferGroup = valueDes;
          break;
        default:
          unhandled.add(key);
          unhandled.add(value);
          break;
      }
    }
  }

  @override
  PaymentIntent deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = PaymentIntentBuilder();
    final serializedList = (serialized as Iterable<Object?>).toList();
    final unhandled = <Object?>[];
    _deserializeProperties(
      serializers,
      serialized,
      specifiedType: specifiedType,
      serializedList: serializedList,
      unhandled: unhandled,
      result: result,
    );
    return result.build();
  }
}

class PaymentIntentCancellationReasonEnum extends EnumClass {

  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'abandoned')
  static const PaymentIntentCancellationReasonEnum abandoned = _$paymentIntentCancellationReasonEnum_abandoned;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'automatic')
  static const PaymentIntentCancellationReasonEnum automatic = _$paymentIntentCancellationReasonEnum_automatic;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'duplicate')
  static const PaymentIntentCancellationReasonEnum duplicate = _$paymentIntentCancellationReasonEnum_duplicate;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'expired')
  static const PaymentIntentCancellationReasonEnum expired = _$paymentIntentCancellationReasonEnum_expired;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'failed_invoice')
  static const PaymentIntentCancellationReasonEnum failedInvoice = _$paymentIntentCancellationReasonEnum_failedInvoice;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'fraudulent')
  static const PaymentIntentCancellationReasonEnum fraudulent = _$paymentIntentCancellationReasonEnum_fraudulent;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'requested_by_customer')
  static const PaymentIntentCancellationReasonEnum requestedByCustomer = _$paymentIntentCancellationReasonEnum_requestedByCustomer;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'void_invoice')
  static const PaymentIntentCancellationReasonEnum voidInvoice = _$paymentIntentCancellationReasonEnum_voidInvoice;

  static Serializer<PaymentIntentCancellationReasonEnum> get serializer => _$paymentIntentCancellationReasonEnumSerializer;

  const PaymentIntentCancellationReasonEnum._(String name): super(name);

  static BuiltSet<PaymentIntentCancellationReasonEnum> get values => _$paymentIntentCancellationReasonEnumValues;
  static PaymentIntentCancellationReasonEnum valueOf(String name) => _$paymentIntentCancellationReasonEnumValueOf(name);
}

class PaymentIntentCaptureMethodEnum extends EnumClass {

  /// Controls when the funds will be captured from the customer's account.
  @BuiltValueEnumConst(wireName: r'automatic')
  static const PaymentIntentCaptureMethodEnum automatic = _$paymentIntentCaptureMethodEnum_automatic;
  /// Controls when the funds will be captured from the customer's account.
  @BuiltValueEnumConst(wireName: r'automatic_async')
  static const PaymentIntentCaptureMethodEnum automaticAsync = _$paymentIntentCaptureMethodEnum_automaticAsync;
  /// Controls when the funds will be captured from the customer's account.
  @BuiltValueEnumConst(wireName: r'manual')
  static const PaymentIntentCaptureMethodEnum manual = _$paymentIntentCaptureMethodEnum_manual;

  static Serializer<PaymentIntentCaptureMethodEnum> get serializer => _$paymentIntentCaptureMethodEnumSerializer;

  const PaymentIntentCaptureMethodEnum._(String name): super(name);

  static BuiltSet<PaymentIntentCaptureMethodEnum> get values => _$paymentIntentCaptureMethodEnumValues;
  static PaymentIntentCaptureMethodEnum valueOf(String name) => _$paymentIntentCaptureMethodEnumValueOf(name);
}

class PaymentIntentConfirmationMethodEnum extends EnumClass {

  /// Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
  @BuiltValueEnumConst(wireName: r'automatic')
  static const PaymentIntentConfirmationMethodEnum automatic = _$paymentIntentConfirmationMethodEnum_automatic;
  /// Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
  @BuiltValueEnumConst(wireName: r'manual')
  static const PaymentIntentConfirmationMethodEnum manual = _$paymentIntentConfirmationMethodEnum_manual;

  static Serializer<PaymentIntentConfirmationMethodEnum> get serializer => _$paymentIntentConfirmationMethodEnumSerializer;

  const PaymentIntentConfirmationMethodEnum._(String name): super(name);

  static BuiltSet<PaymentIntentConfirmationMethodEnum> get values => _$paymentIntentConfirmationMethodEnumValues;
  static PaymentIntentConfirmationMethodEnum valueOf(String name) => _$paymentIntentConfirmationMethodEnumValueOf(name);
}

class PaymentIntentObjectEnum extends EnumClass {

  /// String representing the object's type. Objects of the same type share the same value.
  @BuiltValueEnumConst(wireName: r'payment_intent')
  static const PaymentIntentObjectEnum paymentIntent = _$paymentIntentObjectEnum_paymentIntent;

  static Serializer<PaymentIntentObjectEnum> get serializer => _$paymentIntentObjectEnumSerializer;

  const PaymentIntentObjectEnum._(String name): super(name);

  static BuiltSet<PaymentIntentObjectEnum> get values => _$paymentIntentObjectEnumValues;
  static PaymentIntentObjectEnum valueOf(String name) => _$paymentIntentObjectEnumValueOf(name);
}

class PaymentIntentSetupFutureUsageEnum extends EnumClass {

  /// Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  @BuiltValueEnumConst(wireName: r'off_session')
  static const PaymentIntentSetupFutureUsageEnum offSession = _$paymentIntentSetupFutureUsageEnum_offSession;
  /// Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  @BuiltValueEnumConst(wireName: r'on_session')
  static const PaymentIntentSetupFutureUsageEnum onSession = _$paymentIntentSetupFutureUsageEnum_onSession;

  static Serializer<PaymentIntentSetupFutureUsageEnum> get serializer => _$paymentIntentSetupFutureUsageEnumSerializer;

  const PaymentIntentSetupFutureUsageEnum._(String name): super(name);

  static BuiltSet<PaymentIntentSetupFutureUsageEnum> get values => _$paymentIntentSetupFutureUsageEnumValues;
  static PaymentIntentSetupFutureUsageEnum valueOf(String name) => _$paymentIntentSetupFutureUsageEnumValueOf(name);
}

class PaymentIntentStatusEnum extends EnumClass {

  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'canceled')
  static const PaymentIntentStatusEnum canceled = _$paymentIntentStatusEnum_canceled;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'processing')
  static const PaymentIntentStatusEnum processing = _$paymentIntentStatusEnum_processing;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'requires_action')
  static const PaymentIntentStatusEnum requiresAction = _$paymentIntentStatusEnum_requiresAction;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'requires_capture')
  static const PaymentIntentStatusEnum requiresCapture = _$paymentIntentStatusEnum_requiresCapture;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'requires_confirmation')
  static const PaymentIntentStatusEnum requiresConfirmation = _$paymentIntentStatusEnum_requiresConfirmation;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'requires_payment_method')
  static const PaymentIntentStatusEnum requiresPaymentMethod = _$paymentIntentStatusEnum_requiresPaymentMethod;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'succeeded')
  static const PaymentIntentStatusEnum succeeded = _$paymentIntentStatusEnum_succeeded;

  static Serializer<PaymentIntentStatusEnum> get serializer => _$paymentIntentStatusEnumSerializer;

  const PaymentIntentStatusEnum._(String name): super(name);

  static BuiltSet<PaymentIntentStatusEnum> get values => _$paymentIntentStatusEnumValues;
  static PaymentIntentStatusEnum valueOf(String name) => _$paymentIntentStatusEnumValueOf(name);
}

