//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:stripe_dart_sdk/src/model/payment_intent_amount_details.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_processing.dart';
import 'package:stripe_dart_sdk/src/model/api_errors.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_application.dart';
import 'package:stripe_dart_sdk/src/model/transfer_data.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_payment_method_options.dart';
import 'package:stripe_dart_sdk/src/model/payment_flows_automatic_payment_methods_payment_intent.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_customer.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_latest_charge.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_on_behalf_of.dart';
import 'package:built_collection/built_collection.dart';
import 'package:stripe_dart_sdk/src/model/shipping.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_next_action.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_review.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent.dart';
import 'package:stripe_dart_sdk/src/model/payment_flows_payment_intent_presentment_details.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_payment_method.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_config_biz_payment_method_configuration_details.dart';
import 'dart:core';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';
import 'package:one_of/any_of.dart';

part 'dispute_payment_intent.g.dart';

/// ID of the PaymentIntent that's disputed.
///
/// Properties:
/// * [amount] - Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
/// * [amountCapturable] - Amount that can be captured from this PaymentIntent.
/// * [amountDetails] 
/// * [amountReceived] - Amount that this PaymentIntent collects.
/// * [application] 
/// * [applicationFeeAmount] - The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total amount captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
/// * [automaticPaymentMethods] 
/// * [canceledAt] - Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
/// * [cancellationReason] - Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
/// * [captureMethod] - Controls when the funds will be captured from the customer's account.
/// * [clientSecret] - The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.   The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.  Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.
/// * [confirmationMethod] - Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
/// * [created] - Time at which the object was created. Measured in seconds since the Unix epoch.
/// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
/// * [customer] 
/// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
/// * [id] - Unique identifier for the object.
/// * [lastPaymentError] 
/// * [latestCharge] 
/// * [livemode] - Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
/// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Learn more about [storing information in metadata](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).
/// * [nextAction] 
/// * [object] - String representing the object's type. Objects of the same type share the same value.
/// * [onBehalfOf] 
/// * [paymentMethod] 
/// * [paymentMethodConfigurationDetails] 
/// * [paymentMethodOptions] 
/// * [paymentMethodTypes] - The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. A comprehensive list of valid payment method types can be found [here](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).
/// * [presentmentDetails] 
/// * [processing] 
/// * [receiptEmail] - Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
/// * [review] 
/// * [setupFutureUsage] - Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
/// * [shipping] 
/// * [statementDescriptor] - Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
/// * [statementDescriptorSuffix] - Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
/// * [status] - Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
/// * [transferData] 
/// * [transferGroup] - A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers).
@BuiltValue()
abstract class DisputePaymentIntent implements Built<DisputePaymentIntent, DisputePaymentIntentBuilder> {
  /// Any Of [PaymentIntent], [String]
  AnyOf get anyOf;

  DisputePaymentIntent._();

  factory DisputePaymentIntent([void updates(DisputePaymentIntentBuilder b)]) = _$DisputePaymentIntent;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(DisputePaymentIntentBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<DisputePaymentIntent> get serializer => _$DisputePaymentIntentSerializer();
}

class _$DisputePaymentIntentSerializer implements PrimitiveSerializer<DisputePaymentIntent> {
  @override
  final Iterable<Type> types = const [DisputePaymentIntent, _$DisputePaymentIntent];

  @override
  final String wireName = r'DisputePaymentIntent';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    DisputePaymentIntent object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
  }

  @override
  Object serialize(
    Serializers serializers,
    DisputePaymentIntent object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final anyOf = object.anyOf;
    return serializers.serialize(anyOf, specifiedType: FullType(AnyOf, anyOf.valueTypes.map((type) => FullType(type)).toList()))!;
  }

  @override
  DisputePaymentIntent deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = DisputePaymentIntentBuilder();
    Object? anyOfDataSrc;
    final targetType = const FullType(AnyOf, [FullType(String), FullType(PaymentIntent), ]);
    anyOfDataSrc = serialized;
    result.anyOf = serializers.deserialize(anyOfDataSrc, specifiedType: targetType) as AnyOf;
    return result.build();
  }
}

class DisputePaymentIntentCancellationReasonEnum extends EnumClass {

  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'abandoned')
  static const DisputePaymentIntentCancellationReasonEnum abandoned = _$disputePaymentIntentCancellationReasonEnum_abandoned;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'automatic')
  static const DisputePaymentIntentCancellationReasonEnum automatic = _$disputePaymentIntentCancellationReasonEnum_automatic;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'duplicate')
  static const DisputePaymentIntentCancellationReasonEnum duplicate = _$disputePaymentIntentCancellationReasonEnum_duplicate;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'expired')
  static const DisputePaymentIntentCancellationReasonEnum expired = _$disputePaymentIntentCancellationReasonEnum_expired;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'failed_invoice')
  static const DisputePaymentIntentCancellationReasonEnum failedInvoice = _$disputePaymentIntentCancellationReasonEnum_failedInvoice;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'fraudulent')
  static const DisputePaymentIntentCancellationReasonEnum fraudulent = _$disputePaymentIntentCancellationReasonEnum_fraudulent;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'requested_by_customer')
  static const DisputePaymentIntentCancellationReasonEnum requestedByCustomer = _$disputePaymentIntentCancellationReasonEnum_requestedByCustomer;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'void_invoice')
  static const DisputePaymentIntentCancellationReasonEnum voidInvoice = _$disputePaymentIntentCancellationReasonEnum_voidInvoice;

  static Serializer<DisputePaymentIntentCancellationReasonEnum> get serializer => _$disputePaymentIntentCancellationReasonEnumSerializer;

  const DisputePaymentIntentCancellationReasonEnum._(String name): super(name);

  static BuiltSet<DisputePaymentIntentCancellationReasonEnum> get values => _$disputePaymentIntentCancellationReasonEnumValues;
  static DisputePaymentIntentCancellationReasonEnum valueOf(String name) => _$disputePaymentIntentCancellationReasonEnumValueOf(name);
}

class DisputePaymentIntentCaptureMethodEnum extends EnumClass {

  /// Controls when the funds will be captured from the customer's account.
  @BuiltValueEnumConst(wireName: r'automatic')
  static const DisputePaymentIntentCaptureMethodEnum automatic = _$disputePaymentIntentCaptureMethodEnum_automatic;
  /// Controls when the funds will be captured from the customer's account.
  @BuiltValueEnumConst(wireName: r'automatic_async')
  static const DisputePaymentIntentCaptureMethodEnum automaticAsync = _$disputePaymentIntentCaptureMethodEnum_automaticAsync;
  /// Controls when the funds will be captured from the customer's account.
  @BuiltValueEnumConst(wireName: r'manual')
  static const DisputePaymentIntentCaptureMethodEnum manual = _$disputePaymentIntentCaptureMethodEnum_manual;

  static Serializer<DisputePaymentIntentCaptureMethodEnum> get serializer => _$disputePaymentIntentCaptureMethodEnumSerializer;

  const DisputePaymentIntentCaptureMethodEnum._(String name): super(name);

  static BuiltSet<DisputePaymentIntentCaptureMethodEnum> get values => _$disputePaymentIntentCaptureMethodEnumValues;
  static DisputePaymentIntentCaptureMethodEnum valueOf(String name) => _$disputePaymentIntentCaptureMethodEnumValueOf(name);
}

class DisputePaymentIntentConfirmationMethodEnum extends EnumClass {

  /// Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
  @BuiltValueEnumConst(wireName: r'automatic')
  static const DisputePaymentIntentConfirmationMethodEnum automatic = _$disputePaymentIntentConfirmationMethodEnum_automatic;
  /// Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
  @BuiltValueEnumConst(wireName: r'manual')
  static const DisputePaymentIntentConfirmationMethodEnum manual = _$disputePaymentIntentConfirmationMethodEnum_manual;

  static Serializer<DisputePaymentIntentConfirmationMethodEnum> get serializer => _$disputePaymentIntentConfirmationMethodEnumSerializer;

  const DisputePaymentIntentConfirmationMethodEnum._(String name): super(name);

  static BuiltSet<DisputePaymentIntentConfirmationMethodEnum> get values => _$disputePaymentIntentConfirmationMethodEnumValues;
  static DisputePaymentIntentConfirmationMethodEnum valueOf(String name) => _$disputePaymentIntentConfirmationMethodEnumValueOf(name);
}

class DisputePaymentIntentObjectEnum extends EnumClass {

  /// String representing the object's type. Objects of the same type share the same value.
  @BuiltValueEnumConst(wireName: r'payment_intent')
  static const DisputePaymentIntentObjectEnum paymentIntent = _$disputePaymentIntentObjectEnum_paymentIntent;

  static Serializer<DisputePaymentIntentObjectEnum> get serializer => _$disputePaymentIntentObjectEnumSerializer;

  const DisputePaymentIntentObjectEnum._(String name): super(name);

  static BuiltSet<DisputePaymentIntentObjectEnum> get values => _$disputePaymentIntentObjectEnumValues;
  static DisputePaymentIntentObjectEnum valueOf(String name) => _$disputePaymentIntentObjectEnumValueOf(name);
}

class DisputePaymentIntentSetupFutureUsageEnum extends EnumClass {

  /// Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  @BuiltValueEnumConst(wireName: r'off_session')
  static const DisputePaymentIntentSetupFutureUsageEnum offSession = _$disputePaymentIntentSetupFutureUsageEnum_offSession;
  /// Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  @BuiltValueEnumConst(wireName: r'on_session')
  static const DisputePaymentIntentSetupFutureUsageEnum onSession = _$disputePaymentIntentSetupFutureUsageEnum_onSession;

  static Serializer<DisputePaymentIntentSetupFutureUsageEnum> get serializer => _$disputePaymentIntentSetupFutureUsageEnumSerializer;

  const DisputePaymentIntentSetupFutureUsageEnum._(String name): super(name);

  static BuiltSet<DisputePaymentIntentSetupFutureUsageEnum> get values => _$disputePaymentIntentSetupFutureUsageEnumValues;
  static DisputePaymentIntentSetupFutureUsageEnum valueOf(String name) => _$disputePaymentIntentSetupFutureUsageEnumValueOf(name);
}

class DisputePaymentIntentStatusEnum extends EnumClass {

  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'canceled')
  static const DisputePaymentIntentStatusEnum canceled = _$disputePaymentIntentStatusEnum_canceled;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'processing')
  static const DisputePaymentIntentStatusEnum processing = _$disputePaymentIntentStatusEnum_processing;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'requires_action')
  static const DisputePaymentIntentStatusEnum requiresAction = _$disputePaymentIntentStatusEnum_requiresAction;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'requires_capture')
  static const DisputePaymentIntentStatusEnum requiresCapture = _$disputePaymentIntentStatusEnum_requiresCapture;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'requires_confirmation')
  static const DisputePaymentIntentStatusEnum requiresConfirmation = _$disputePaymentIntentStatusEnum_requiresConfirmation;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'requires_payment_method')
  static const DisputePaymentIntentStatusEnum requiresPaymentMethod = _$disputePaymentIntentStatusEnum_requiresPaymentMethod;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'succeeded')
  static const DisputePaymentIntentStatusEnum succeeded = _$disputePaymentIntentStatusEnum_succeeded;

  static Serializer<DisputePaymentIntentStatusEnum> get serializer => _$disputePaymentIntentStatusEnumSerializer;

  const DisputePaymentIntentStatusEnum._(String name): super(name);

  static BuiltSet<DisputePaymentIntentStatusEnum> get values => _$disputePaymentIntentStatusEnumValues;
  static DisputePaymentIntentStatusEnum valueOf(String name) => _$disputePaymentIntentStatusEnumValueOf(name);
}

