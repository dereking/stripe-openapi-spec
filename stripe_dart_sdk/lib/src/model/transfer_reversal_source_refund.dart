//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:stripe_dart_sdk/src/model/refund_payment_intent.dart';
import 'package:stripe_dart_sdk/src/model/fee_refund_balance_transaction.dart';
import 'package:stripe_dart_sdk/src/model/refund.dart';
import 'package:stripe_dart_sdk/src/model/refund_charge.dart';
import 'package:built_collection/built_collection.dart';
import 'package:stripe_dart_sdk/src/model/refund_failure_balance_transaction.dart';
import 'package:stripe_dart_sdk/src/model/refund_destination_details.dart';
import 'package:stripe_dart_sdk/src/model/refund_next_action.dart';
import 'package:stripe_dart_sdk/src/model/refund_transfer_reversal.dart';
import 'package:stripe_dart_sdk/src/model/payment_flows_payment_intent_presentment_details.dart';
import 'package:stripe_dart_sdk/src/model/refund_source_transfer_reversal.dart';
import 'dart:core';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';
import 'package:one_of/any_of.dart';

part 'transfer_reversal_source_refund.g.dart';

/// ID of the refund responsible for the transfer reversal.
///
/// Properties:
/// * [amount] - Amount, in cents (or local equivalent).
/// * [balanceTransaction] 
/// * [charge] 
/// * [created] - Time at which the object was created. Measured in seconds since the Unix epoch.
/// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
/// * [description] - An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only).
/// * [destinationDetails] 
/// * [failureBalanceTransaction] 
/// * [failureReason] - Provides the reason for the refund failure. Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`.
/// * [id] - Unique identifier for the object.
/// * [instructionsEmail] - For payment methods without native refund support (for example, Konbini, PromptPay), provide an email address for the customer to receive refund instructions.
/// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
/// * [nextAction] 
/// * [object] - String representing the object's type. Objects of the same type share the same value.
/// * [paymentIntent] 
/// * [pendingReason] - Provides the reason for why the refund is pending. Possible values are: `processing`, `insufficient_funds`, or `charge_pending`.
/// * [presentmentDetails] 
/// * [reason] - Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
/// * [receiptNumber] - This is the transaction number that appears on email receipts sent for this refund.
/// * [sourceTransferReversal] 
/// * [status] - Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://stripe.com/docs/refunds#failed-refunds).
/// * [transferReversal] 
@BuiltValue()
abstract class TransferReversalSourceRefund implements Built<TransferReversalSourceRefund, TransferReversalSourceRefundBuilder> {
  /// Any Of [Refund], [String]
  AnyOf get anyOf;

  TransferReversalSourceRefund._();

  factory TransferReversalSourceRefund([void updates(TransferReversalSourceRefundBuilder b)]) = _$TransferReversalSourceRefund;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(TransferReversalSourceRefundBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<TransferReversalSourceRefund> get serializer => _$TransferReversalSourceRefundSerializer();
}

class _$TransferReversalSourceRefundSerializer implements PrimitiveSerializer<TransferReversalSourceRefund> {
  @override
  final Iterable<Type> types = const [TransferReversalSourceRefund, _$TransferReversalSourceRefund];

  @override
  final String wireName = r'TransferReversalSourceRefund';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    TransferReversalSourceRefund object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
  }

  @override
  Object serialize(
    Serializers serializers,
    TransferReversalSourceRefund object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final anyOf = object.anyOf;
    return serializers.serialize(anyOf, specifiedType: FullType(AnyOf, anyOf.valueTypes.map((type) => FullType(type)).toList()))!;
  }

  @override
  TransferReversalSourceRefund deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = TransferReversalSourceRefundBuilder();
    Object? anyOfDataSrc;
    final targetType = const FullType(AnyOf, [FullType(String), FullType(Refund), ]);
    anyOfDataSrc = serialized;
    result.anyOf = serializers.deserialize(anyOfDataSrc, specifiedType: targetType) as AnyOf;
    return result.build();
  }
}

class TransferReversalSourceRefundObjectEnum extends EnumClass {

  /// String representing the object's type. Objects of the same type share the same value.
  @BuiltValueEnumConst(wireName: r'refund')
  static const TransferReversalSourceRefundObjectEnum refund = _$transferReversalSourceRefundObjectEnum_refund;

  static Serializer<TransferReversalSourceRefundObjectEnum> get serializer => _$transferReversalSourceRefundObjectEnumSerializer;

  const TransferReversalSourceRefundObjectEnum._(String name): super(name);

  static BuiltSet<TransferReversalSourceRefundObjectEnum> get values => _$transferReversalSourceRefundObjectEnumValues;
  static TransferReversalSourceRefundObjectEnum valueOf(String name) => _$transferReversalSourceRefundObjectEnumValueOf(name);
}

class TransferReversalSourceRefundPendingReasonEnum extends EnumClass {

  /// Provides the reason for why the refund is pending. Possible values are: `processing`, `insufficient_funds`, or `charge_pending`.
  @BuiltValueEnumConst(wireName: r'charge_pending')
  static const TransferReversalSourceRefundPendingReasonEnum chargePending = _$transferReversalSourceRefundPendingReasonEnum_chargePending;
  /// Provides the reason for why the refund is pending. Possible values are: `processing`, `insufficient_funds`, or `charge_pending`.
  @BuiltValueEnumConst(wireName: r'insufficient_funds')
  static const TransferReversalSourceRefundPendingReasonEnum insufficientFunds = _$transferReversalSourceRefundPendingReasonEnum_insufficientFunds;
  /// Provides the reason for why the refund is pending. Possible values are: `processing`, `insufficient_funds`, or `charge_pending`.
  @BuiltValueEnumConst(wireName: r'processing')
  static const TransferReversalSourceRefundPendingReasonEnum processing = _$transferReversalSourceRefundPendingReasonEnum_processing;

  static Serializer<TransferReversalSourceRefundPendingReasonEnum> get serializer => _$transferReversalSourceRefundPendingReasonEnumSerializer;

  const TransferReversalSourceRefundPendingReasonEnum._(String name): super(name);

  static BuiltSet<TransferReversalSourceRefundPendingReasonEnum> get values => _$transferReversalSourceRefundPendingReasonEnumValues;
  static TransferReversalSourceRefundPendingReasonEnum valueOf(String name) => _$transferReversalSourceRefundPendingReasonEnumValueOf(name);
}

class TransferReversalSourceRefundReasonEnum extends EnumClass {

  /// Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
  @BuiltValueEnumConst(wireName: r'duplicate')
  static const TransferReversalSourceRefundReasonEnum duplicate = _$transferReversalSourceRefundReasonEnum_duplicate;
  /// Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
  @BuiltValueEnumConst(wireName: r'expired_uncaptured_charge')
  static const TransferReversalSourceRefundReasonEnum expiredUncapturedCharge = _$transferReversalSourceRefundReasonEnum_expiredUncapturedCharge;
  /// Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
  @BuiltValueEnumConst(wireName: r'fraudulent')
  static const TransferReversalSourceRefundReasonEnum fraudulent = _$transferReversalSourceRefundReasonEnum_fraudulent;
  /// Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
  @BuiltValueEnumConst(wireName: r'requested_by_customer')
  static const TransferReversalSourceRefundReasonEnum requestedByCustomer = _$transferReversalSourceRefundReasonEnum_requestedByCustomer;

  static Serializer<TransferReversalSourceRefundReasonEnum> get serializer => _$transferReversalSourceRefundReasonEnumSerializer;

  const TransferReversalSourceRefundReasonEnum._(String name): super(name);

  static BuiltSet<TransferReversalSourceRefundReasonEnum> get values => _$transferReversalSourceRefundReasonEnumValues;
  static TransferReversalSourceRefundReasonEnum valueOf(String name) => _$transferReversalSourceRefundReasonEnumValueOf(name);
}

