//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:stripe_dart_sdk/src/model/refund_payment_intent.dart';
import 'package:stripe_dart_sdk/src/model/fee_refund_balance_transaction.dart';
import 'package:stripe_dart_sdk/src/model/refund_charge.dart';
import 'package:built_collection/built_collection.dart';
import 'package:stripe_dart_sdk/src/model/refund_failure_balance_transaction.dart';
import 'package:stripe_dart_sdk/src/model/refund_destination_details.dart';
import 'package:stripe_dart_sdk/src/model/refund_next_action.dart';
import 'package:stripe_dart_sdk/src/model/refund_transfer_reversal.dart';
import 'package:stripe_dart_sdk/src/model/payment_flows_payment_intent_presentment_details.dart';
import 'package:stripe_dart_sdk/src/model/refund_source_transfer_reversal.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part 'refund.g.dart';

/// Refund objects allow you to refund a previously created charge that isn't refunded yet. Funds are refunded to the credit or debit card that's initially charged.  Related guide: [Refunds](https://stripe.com/docs/refunds)
///
/// Properties:
/// * [amount] - Amount, in cents (or local equivalent).
/// * [balanceTransaction] 
/// * [charge] 
/// * [created] - Time at which the object was created. Measured in seconds since the Unix epoch.
/// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
/// * [description] - An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only).
/// * [destinationDetails] 
/// * [failureBalanceTransaction] 
/// * [failureReason] - Provides the reason for the refund failure. Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`.
/// * [id] - Unique identifier for the object.
/// * [instructionsEmail] - For payment methods without native refund support (for example, Konbini, PromptPay), provide an email address for the customer to receive refund instructions.
/// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
/// * [nextAction] 
/// * [object] - String representing the object's type. Objects of the same type share the same value.
/// * [paymentIntent] 
/// * [pendingReason] - Provides the reason for why the refund is pending. Possible values are: `processing`, `insufficient_funds`, or `charge_pending`.
/// * [presentmentDetails] 
/// * [reason] - Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
/// * [receiptNumber] - This is the transaction number that appears on email receipts sent for this refund.
/// * [sourceTransferReversal] 
/// * [status] - Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://stripe.com/docs/refunds#failed-refunds).
/// * [transferReversal] 
@BuiltValue()
abstract class Refund implements Built<Refund, RefundBuilder> {
  /// Amount, in cents (or local equivalent).
  @BuiltValueField(wireName: r'amount')
  int get amount;

  @BuiltValueField(wireName: r'balance_transaction')
  FeeRefundBalanceTransaction? get balanceTransaction;

  @BuiltValueField(wireName: r'charge')
  RefundCharge? get charge;

  /// Time at which the object was created. Measured in seconds since the Unix epoch.
  @BuiltValueField(wireName: r'created')
  int get created;

  /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
  @BuiltValueField(wireName: r'currency')
  String get currency;

  /// An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only).
  @BuiltValueField(wireName: r'description')
  String? get description;

  @BuiltValueField(wireName: r'destination_details')
  RefundDestinationDetails? get destinationDetails;

  @BuiltValueField(wireName: r'failure_balance_transaction')
  RefundFailureBalanceTransaction? get failureBalanceTransaction;

  /// Provides the reason for the refund failure. Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`.
  @BuiltValueField(wireName: r'failure_reason')
  String? get failureReason;

  /// Unique identifier for the object.
  @BuiltValueField(wireName: r'id')
  String get id;

  /// For payment methods without native refund support (for example, Konbini, PromptPay), provide an email address for the customer to receive refund instructions.
  @BuiltValueField(wireName: r'instructions_email')
  String? get instructionsEmail;

  /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  @BuiltValueField(wireName: r'metadata')
  BuiltMap<String, String>? get metadata;

  @BuiltValueField(wireName: r'next_action')
  RefundNextAction? get nextAction;

  /// String representing the object's type. Objects of the same type share the same value.
  @BuiltValueField(wireName: r'object')
  RefundObjectEnum get object;
  // enum objectEnum {  refund,  };

  @BuiltValueField(wireName: r'payment_intent')
  RefundPaymentIntent? get paymentIntent;

  /// Provides the reason for why the refund is pending. Possible values are: `processing`, `insufficient_funds`, or `charge_pending`.
  @BuiltValueField(wireName: r'pending_reason')
  RefundPendingReasonEnum? get pendingReason;
  // enum pendingReasonEnum {  charge_pending,  insufficient_funds,  processing,  };

  @BuiltValueField(wireName: r'presentment_details')
  PaymentFlowsPaymentIntentPresentmentDetails? get presentmentDetails;

  /// Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
  @BuiltValueField(wireName: r'reason')
  RefundReasonEnum? get reason;
  // enum reasonEnum {  duplicate,  expired_uncaptured_charge,  fraudulent,  requested_by_customer,  };

  /// This is the transaction number that appears on email receipts sent for this refund.
  @BuiltValueField(wireName: r'receipt_number')
  String? get receiptNumber;

  @BuiltValueField(wireName: r'source_transfer_reversal')
  RefundSourceTransferReversal? get sourceTransferReversal;

  /// Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://stripe.com/docs/refunds#failed-refunds).
  @BuiltValueField(wireName: r'status')
  String? get status;

  @BuiltValueField(wireName: r'transfer_reversal')
  RefundTransferReversal? get transferReversal;

  Refund._();

  factory Refund([void updates(RefundBuilder b)]) = _$Refund;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(RefundBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<Refund> get serializer => _$RefundSerializer();
}

class _$RefundSerializer implements PrimitiveSerializer<Refund> {
  @override
  final Iterable<Type> types = const [Refund, _$Refund];

  @override
  final String wireName = r'Refund';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    Refund object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
    yield r'amount';
    yield serializers.serialize(
      object.amount,
      specifiedType: const FullType(int),
    );
    if (object.balanceTransaction != null) {
      yield r'balance_transaction';
      yield serializers.serialize(
        object.balanceTransaction,
        specifiedType: const FullType.nullable(FeeRefundBalanceTransaction),
      );
    }
    if (object.charge != null) {
      yield r'charge';
      yield serializers.serialize(
        object.charge,
        specifiedType: const FullType.nullable(RefundCharge),
      );
    }
    yield r'created';
    yield serializers.serialize(
      object.created,
      specifiedType: const FullType(int),
    );
    yield r'currency';
    yield serializers.serialize(
      object.currency,
      specifiedType: const FullType(String),
    );
    if (object.description != null) {
      yield r'description';
      yield serializers.serialize(
        object.description,
        specifiedType: const FullType(String),
      );
    }
    if (object.destinationDetails != null) {
      yield r'destination_details';
      yield serializers.serialize(
        object.destinationDetails,
        specifiedType: const FullType(RefundDestinationDetails),
      );
    }
    if (object.failureBalanceTransaction != null) {
      yield r'failure_balance_transaction';
      yield serializers.serialize(
        object.failureBalanceTransaction,
        specifiedType: const FullType(RefundFailureBalanceTransaction),
      );
    }
    if (object.failureReason != null) {
      yield r'failure_reason';
      yield serializers.serialize(
        object.failureReason,
        specifiedType: const FullType(String),
      );
    }
    yield r'id';
    yield serializers.serialize(
      object.id,
      specifiedType: const FullType(String),
    );
    if (object.instructionsEmail != null) {
      yield r'instructions_email';
      yield serializers.serialize(
        object.instructionsEmail,
        specifiedType: const FullType(String),
      );
    }
    if (object.metadata != null) {
      yield r'metadata';
      yield serializers.serialize(
        object.metadata,
        specifiedType: const FullType.nullable(BuiltMap, [FullType(String), FullType(String)]),
      );
    }
    if (object.nextAction != null) {
      yield r'next_action';
      yield serializers.serialize(
        object.nextAction,
        specifiedType: const FullType(RefundNextAction),
      );
    }
    yield r'object';
    yield serializers.serialize(
      object.object,
      specifiedType: const FullType(RefundObjectEnum),
    );
    if (object.paymentIntent != null) {
      yield r'payment_intent';
      yield serializers.serialize(
        object.paymentIntent,
        specifiedType: const FullType.nullable(RefundPaymentIntent),
      );
    }
    if (object.pendingReason != null) {
      yield r'pending_reason';
      yield serializers.serialize(
        object.pendingReason,
        specifiedType: const FullType(RefundPendingReasonEnum),
      );
    }
    if (object.presentmentDetails != null) {
      yield r'presentment_details';
      yield serializers.serialize(
        object.presentmentDetails,
        specifiedType: const FullType(PaymentFlowsPaymentIntentPresentmentDetails),
      );
    }
    if (object.reason != null) {
      yield r'reason';
      yield serializers.serialize(
        object.reason,
        specifiedType: const FullType.nullable(RefundReasonEnum),
      );
    }
    if (object.receiptNumber != null) {
      yield r'receipt_number';
      yield serializers.serialize(
        object.receiptNumber,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.sourceTransferReversal != null) {
      yield r'source_transfer_reversal';
      yield serializers.serialize(
        object.sourceTransferReversal,
        specifiedType: const FullType.nullable(RefundSourceTransferReversal),
      );
    }
    if (object.status != null) {
      yield r'status';
      yield serializers.serialize(
        object.status,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.transferReversal != null) {
      yield r'transfer_reversal';
      yield serializers.serialize(
        object.transferReversal,
        specifiedType: const FullType.nullable(RefundTransferReversal),
      );
    }
  }

  @override
  Object serialize(
    Serializers serializers,
    Refund object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    return _serializeProperties(serializers, object, specifiedType: specifiedType).toList();
  }

  void _deserializeProperties(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
    required List<Object?> serializedList,
    required RefundBuilder result,
    required List<Object?> unhandled,
  }) {
    for (var i = 0; i < serializedList.length; i += 2) {
      final key = serializedList[i] as String;
      final value = serializedList[i + 1];
      switch (key) {
        case r'amount':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.amount = valueDes;
          break;
        case r'balance_transaction':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(FeeRefundBalanceTransaction),
          ) as FeeRefundBalanceTransaction?;
          if (valueDes == null) continue;
          result.balanceTransaction.replace(valueDes);
          break;
        case r'charge':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(RefundCharge),
          ) as RefundCharge?;
          if (valueDes == null) continue;
          result.charge.replace(valueDes);
          break;
        case r'created':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.created = valueDes;
          break;
        case r'currency':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.currency = valueDes;
          break;
        case r'description':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.description = valueDes;
          break;
        case r'destination_details':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(RefundDestinationDetails),
          ) as RefundDestinationDetails;
          result.destinationDetails.replace(valueDes);
          break;
        case r'failure_balance_transaction':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(RefundFailureBalanceTransaction),
          ) as RefundFailureBalanceTransaction;
          result.failureBalanceTransaction.replace(valueDes);
          break;
        case r'failure_reason':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.failureReason = valueDes;
          break;
        case r'id':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.id = valueDes;
          break;
        case r'instructions_email':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(String),
          ) as String;
          result.instructionsEmail = valueDes;
          break;
        case r'metadata':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltMap, [FullType(String), FullType(String)]),
          ) as BuiltMap<String, String>?;
          if (valueDes == null) continue;
          result.metadata.replace(valueDes);
          break;
        case r'next_action':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(RefundNextAction),
          ) as RefundNextAction;
          result.nextAction.replace(valueDes);
          break;
        case r'object':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(RefundObjectEnum),
          ) as RefundObjectEnum;
          result.object = valueDes;
          break;
        case r'payment_intent':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(RefundPaymentIntent),
          ) as RefundPaymentIntent?;
          if (valueDes == null) continue;
          result.paymentIntent.replace(valueDes);
          break;
        case r'pending_reason':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(RefundPendingReasonEnum),
          ) as RefundPendingReasonEnum;
          result.pendingReason = valueDes;
          break;
        case r'presentment_details':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(PaymentFlowsPaymentIntentPresentmentDetails),
          ) as PaymentFlowsPaymentIntentPresentmentDetails;
          result.presentmentDetails.replace(valueDes);
          break;
        case r'reason':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(RefundReasonEnum),
          ) as RefundReasonEnum?;
          if (valueDes == null) continue;
          result.reason = valueDes;
          break;
        case r'receipt_number':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.receiptNumber = valueDes;
          break;
        case r'source_transfer_reversal':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(RefundSourceTransferReversal),
          ) as RefundSourceTransferReversal?;
          if (valueDes == null) continue;
          result.sourceTransferReversal.replace(valueDes);
          break;
        case r'status':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.status = valueDes;
          break;
        case r'transfer_reversal':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(RefundTransferReversal),
          ) as RefundTransferReversal?;
          if (valueDes == null) continue;
          result.transferReversal.replace(valueDes);
          break;
        default:
          unhandled.add(key);
          unhandled.add(value);
          break;
      }
    }
  }

  @override
  Refund deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = RefundBuilder();
    final serializedList = (serialized as Iterable<Object?>).toList();
    final unhandled = <Object?>[];
    _deserializeProperties(
      serializers,
      serialized,
      specifiedType: specifiedType,
      serializedList: serializedList,
      unhandled: unhandled,
      result: result,
    );
    return result.build();
  }
}

class RefundObjectEnum extends EnumClass {

  /// String representing the object's type. Objects of the same type share the same value.
  @BuiltValueEnumConst(wireName: r'refund')
  static const RefundObjectEnum refund = _$refundObjectEnum_refund;

  static Serializer<RefundObjectEnum> get serializer => _$refundObjectEnumSerializer;

  const RefundObjectEnum._(String name): super(name);

  static BuiltSet<RefundObjectEnum> get values => _$refundObjectEnumValues;
  static RefundObjectEnum valueOf(String name) => _$refundObjectEnumValueOf(name);
}

class RefundPendingReasonEnum extends EnumClass {

  /// Provides the reason for why the refund is pending. Possible values are: `processing`, `insufficient_funds`, or `charge_pending`.
  @BuiltValueEnumConst(wireName: r'charge_pending')
  static const RefundPendingReasonEnum chargePending = _$refundPendingReasonEnum_chargePending;
  /// Provides the reason for why the refund is pending. Possible values are: `processing`, `insufficient_funds`, or `charge_pending`.
  @BuiltValueEnumConst(wireName: r'insufficient_funds')
  static const RefundPendingReasonEnum insufficientFunds = _$refundPendingReasonEnum_insufficientFunds;
  /// Provides the reason for why the refund is pending. Possible values are: `processing`, `insufficient_funds`, or `charge_pending`.
  @BuiltValueEnumConst(wireName: r'processing')
  static const RefundPendingReasonEnum processing = _$refundPendingReasonEnum_processing;

  static Serializer<RefundPendingReasonEnum> get serializer => _$refundPendingReasonEnumSerializer;

  const RefundPendingReasonEnum._(String name): super(name);

  static BuiltSet<RefundPendingReasonEnum> get values => _$refundPendingReasonEnumValues;
  static RefundPendingReasonEnum valueOf(String name) => _$refundPendingReasonEnumValueOf(name);
}

class RefundReasonEnum extends EnumClass {

  /// Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
  @BuiltValueEnumConst(wireName: r'duplicate')
  static const RefundReasonEnum duplicate = _$refundReasonEnum_duplicate;
  /// Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
  @BuiltValueEnumConst(wireName: r'expired_uncaptured_charge')
  static const RefundReasonEnum expiredUncapturedCharge = _$refundReasonEnum_expiredUncapturedCharge;
  /// Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
  @BuiltValueEnumConst(wireName: r'fraudulent')
  static const RefundReasonEnum fraudulent = _$refundReasonEnum_fraudulent;
  /// Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
  @BuiltValueEnumConst(wireName: r'requested_by_customer')
  static const RefundReasonEnum requestedByCustomer = _$refundReasonEnum_requestedByCustomer;

  static Serializer<RefundReasonEnum> get serializer => _$refundReasonEnumSerializer;

  const RefundReasonEnum._(String name): super(name);

  static BuiltSet<RefundReasonEnum> get values => _$refundReasonEnumValues;
  static RefundReasonEnum valueOf(String name) => _$refundReasonEnumValueOf(name);
}

