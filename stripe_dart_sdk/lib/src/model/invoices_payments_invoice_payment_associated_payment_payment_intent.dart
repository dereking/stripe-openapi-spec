//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:stripe_dart_sdk/src/model/payment_intent_amount_details.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_processing.dart';
import 'package:stripe_dart_sdk/src/model/api_errors.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_application.dart';
import 'package:stripe_dart_sdk/src/model/transfer_data.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_payment_method_options.dart';
import 'package:stripe_dart_sdk/src/model/payment_flows_automatic_payment_methods_payment_intent.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_customer.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_latest_charge.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_on_behalf_of.dart';
import 'package:built_collection/built_collection.dart';
import 'package:stripe_dart_sdk/src/model/shipping.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_next_action.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_review.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent.dart';
import 'package:stripe_dart_sdk/src/model/payment_flows_payment_intent_presentment_details.dart';
import 'package:stripe_dart_sdk/src/model/payment_intent_payment_method.dart';
import 'package:stripe_dart_sdk/src/model/payment_method_config_biz_payment_method_configuration_details.dart';
import 'dart:core';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';
import 'package:one_of/any_of.dart';

part 'invoices_payments_invoice_payment_associated_payment_payment_intent.g.dart';

/// ID of the PaymentIntent associated with this payment when `type` is `payment_intent`. Note: This property is only populated for invoices finalized on or after March 15th, 2019.
///
/// Properties:
/// * [amount] - Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
/// * [amountCapturable] - Amount that can be captured from this PaymentIntent.
/// * [amountDetails] 
/// * [amountReceived] - Amount that this PaymentIntent collects.
/// * [application] 
/// * [applicationFeeAmount] - The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total amount captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
/// * [automaticPaymentMethods] 
/// * [canceledAt] - Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
/// * [cancellationReason] - Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
/// * [captureMethod] - Controls when the funds will be captured from the customer's account.
/// * [clientSecret] - The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.   The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.  Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.
/// * [confirmationMethod] - Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
/// * [created] - Time at which the object was created. Measured in seconds since the Unix epoch.
/// * [currency] - Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
/// * [customer] 
/// * [description] - An arbitrary string attached to the object. Often useful for displaying to users.
/// * [id] - Unique identifier for the object.
/// * [lastPaymentError] 
/// * [latestCharge] 
/// * [livemode] - Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
/// * [metadata] - Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Learn more about [storing information in metadata](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).
/// * [nextAction] 
/// * [object] - String representing the object's type. Objects of the same type share the same value.
/// * [onBehalfOf] 
/// * [paymentMethod] 
/// * [paymentMethodConfigurationDetails] 
/// * [paymentMethodOptions] 
/// * [paymentMethodTypes] - The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. A comprehensive list of valid payment method types can be found [here](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).
/// * [presentmentDetails] 
/// * [processing] 
/// * [receiptEmail] - Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
/// * [review] 
/// * [setupFutureUsage] - Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
/// * [shipping] 
/// * [statementDescriptor] - Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
/// * [statementDescriptorSuffix] - Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
/// * [status] - Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
/// * [transferData] 
/// * [transferGroup] - A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers).
@BuiltValue()
abstract class InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntent implements Built<InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntent, InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentBuilder> {
  /// Any Of [PaymentIntent], [String]
  AnyOf get anyOf;

  InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntent._();

  factory InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntent([void updates(InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentBuilder b)]) = _$InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntent;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntent> get serializer => _$InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentSerializer();
}

class _$InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentSerializer implements PrimitiveSerializer<InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntent> {
  @override
  final Iterable<Type> types = const [InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntent, _$InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntent];

  @override
  final String wireName = r'InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntent';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntent object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
  }

  @override
  Object serialize(
    Serializers serializers,
    InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntent object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final anyOf = object.anyOf;
    return serializers.serialize(anyOf, specifiedType: FullType(AnyOf, anyOf.valueTypes.map((type) => FullType(type)).toList()))!;
  }

  @override
  InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntent deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentBuilder();
    Object? anyOfDataSrc;
    final targetType = const FullType(AnyOf, [FullType(String), FullType(PaymentIntent), ]);
    anyOfDataSrc = serialized;
    result.anyOf = serializers.deserialize(anyOfDataSrc, specifiedType: targetType) as AnyOf;
    return result.build();
  }
}

class InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum extends EnumClass {

  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'abandoned')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum abandoned = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum_abandoned;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'automatic')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum automatic = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum_automatic;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'duplicate')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum duplicate = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum_duplicate;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'expired')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum expired = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum_expired;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'failed_invoice')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum failedInvoice = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum_failedInvoice;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'fraudulent')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum fraudulent = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum_fraudulent;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'requested_by_customer')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum requestedByCustomer = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum_requestedByCustomer;
  /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
  @BuiltValueEnumConst(wireName: r'void_invoice')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum voidInvoice = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum_voidInvoice;

  static Serializer<InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum> get serializer => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnumSerializer;

  const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum._(String name): super(name);

  static BuiltSet<InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum> get values => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnumValues;
  static InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnum valueOf(String name) => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCancellationReasonEnumValueOf(name);
}

class InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCaptureMethodEnum extends EnumClass {

  /// Controls when the funds will be captured from the customer's account.
  @BuiltValueEnumConst(wireName: r'automatic')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCaptureMethodEnum automatic = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCaptureMethodEnum_automatic;
  /// Controls when the funds will be captured from the customer's account.
  @BuiltValueEnumConst(wireName: r'automatic_async')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCaptureMethodEnum automaticAsync = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCaptureMethodEnum_automaticAsync;
  /// Controls when the funds will be captured from the customer's account.
  @BuiltValueEnumConst(wireName: r'manual')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCaptureMethodEnum manual = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCaptureMethodEnum_manual;

  static Serializer<InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCaptureMethodEnum> get serializer => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCaptureMethodEnumSerializer;

  const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCaptureMethodEnum._(String name): super(name);

  static BuiltSet<InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCaptureMethodEnum> get values => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCaptureMethodEnumValues;
  static InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCaptureMethodEnum valueOf(String name) => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentCaptureMethodEnumValueOf(name);
}

class InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentConfirmationMethodEnum extends EnumClass {

  /// Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
  @BuiltValueEnumConst(wireName: r'automatic')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentConfirmationMethodEnum automatic = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentConfirmationMethodEnum_automatic;
  /// Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
  @BuiltValueEnumConst(wireName: r'manual')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentConfirmationMethodEnum manual = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentConfirmationMethodEnum_manual;

  static Serializer<InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentConfirmationMethodEnum> get serializer => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentConfirmationMethodEnumSerializer;

  const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentConfirmationMethodEnum._(String name): super(name);

  static BuiltSet<InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentConfirmationMethodEnum> get values => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentConfirmationMethodEnumValues;
  static InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentConfirmationMethodEnum valueOf(String name) => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentConfirmationMethodEnumValueOf(name);
}

class InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentObjectEnum extends EnumClass {

  /// String representing the object's type. Objects of the same type share the same value.
  @BuiltValueEnumConst(wireName: r'payment_intent')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentObjectEnum paymentIntent = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentObjectEnum_paymentIntent;

  static Serializer<InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentObjectEnum> get serializer => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentObjectEnumSerializer;

  const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentObjectEnum._(String name): super(name);

  static BuiltSet<InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentObjectEnum> get values => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentObjectEnumValues;
  static InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentObjectEnum valueOf(String name) => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentObjectEnumValueOf(name);
}

class InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentSetupFutureUsageEnum extends EnumClass {

  /// Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  @BuiltValueEnumConst(wireName: r'off_session')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentSetupFutureUsageEnum offSession = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentSetupFutureUsageEnum_offSession;
  /// Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
  @BuiltValueEnumConst(wireName: r'on_session')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentSetupFutureUsageEnum onSession = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentSetupFutureUsageEnum_onSession;

  static Serializer<InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentSetupFutureUsageEnum> get serializer => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentSetupFutureUsageEnumSerializer;

  const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentSetupFutureUsageEnum._(String name): super(name);

  static BuiltSet<InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentSetupFutureUsageEnum> get values => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentSetupFutureUsageEnumValues;
  static InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentSetupFutureUsageEnum valueOf(String name) => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentSetupFutureUsageEnumValueOf(name);
}

class InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum extends EnumClass {

  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'canceled')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum canceled = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum_canceled;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'processing')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum processing = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum_processing;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'requires_action')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum requiresAction = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum_requiresAction;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'requires_capture')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum requiresCapture = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum_requiresCapture;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'requires_confirmation')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum requiresConfirmation = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum_requiresConfirmation;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'requires_payment_method')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum requiresPaymentMethod = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum_requiresPaymentMethod;
  /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
  @BuiltValueEnumConst(wireName: r'succeeded')
  static const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum succeeded = _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum_succeeded;

  static Serializer<InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum> get serializer => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnumSerializer;

  const InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum._(String name): super(name);

  static BuiltSet<InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum> get values => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnumValues;
  static InvoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnum valueOf(String name) => _$invoicesPaymentsInvoicePaymentAssociatedPaymentPaymentIntentStatusEnumValueOf(name);
}

