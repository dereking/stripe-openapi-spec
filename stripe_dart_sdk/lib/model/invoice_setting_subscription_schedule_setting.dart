//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.18

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class InvoiceSettingSubscriptionScheduleSetting {
  /// Returns a new [InvoiceSettingSubscriptionScheduleSetting] instance.
  InvoiceSettingSubscriptionScheduleSetting({
    this.accountTaxIds = const [],
    this.daysUntilDue,
    required this.issuer,
  });

  /// The account tax IDs associated with the subscription schedule. Will be set on invoices generated by the subscription schedule.
  List<InvoiceAccountTaxIdsInner>? accountTaxIds;

  /// Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
  int? daysUntilDue;

  ConnectAccountReference issuer;

  @override
  bool operator ==(Object other) => identical(this, other) || other is InvoiceSettingSubscriptionScheduleSetting &&
    _deepEquality.equals(other.accountTaxIds, accountTaxIds) &&
    other.daysUntilDue == daysUntilDue &&
    other.issuer == issuer;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (accountTaxIds == null ? 0 : accountTaxIds!.hashCode) +
    (daysUntilDue == null ? 0 : daysUntilDue!.hashCode) +
    (issuer.hashCode);

  @override
  String toString() => 'InvoiceSettingSubscriptionScheduleSetting[accountTaxIds=$accountTaxIds, daysUntilDue=$daysUntilDue, issuer=$issuer]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (this.accountTaxIds != null) {
      json[r'account_tax_ids'] = this.accountTaxIds;
    } else {
      json[r'account_tax_ids'] = null;
    }
    if (this.daysUntilDue != null) {
      json[r'days_until_due'] = this.daysUntilDue;
    } else {
      json[r'days_until_due'] = null;
    }
      json[r'issuer'] = this.issuer;
    return json;
  }

  /// Returns a new [InvoiceSettingSubscriptionScheduleSetting] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static InvoiceSettingSubscriptionScheduleSetting? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "InvoiceSettingSubscriptionScheduleSetting[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "InvoiceSettingSubscriptionScheduleSetting[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return InvoiceSettingSubscriptionScheduleSetting(
        accountTaxIds: InvoiceAccountTaxIdsInner.listFromJson(json[r'account_tax_ids']),
        daysUntilDue: mapValueOfType<int>(json, r'days_until_due'),
        issuer: ConnectAccountReference.fromJson(json[r'issuer'])!,
      );
    }
    return null;
  }

  static List<InvoiceSettingSubscriptionScheduleSetting> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <InvoiceSettingSubscriptionScheduleSetting>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = InvoiceSettingSubscriptionScheduleSetting.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, InvoiceSettingSubscriptionScheduleSetting> mapFromJson(dynamic json) {
    final map = <String, InvoiceSettingSubscriptionScheduleSetting>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = InvoiceSettingSubscriptionScheduleSetting.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of InvoiceSettingSubscriptionScheduleSetting-objects as value to a dart map
  static Map<String, List<InvoiceSettingSubscriptionScheduleSetting>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<InvoiceSettingSubscriptionScheduleSetting>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = InvoiceSettingSubscriptionScheduleSetting.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
    'issuer',
  };
}

