import 'package:test/test.dart';
import 'package:stripe_dart_sdk/stripe_dart_sdk.dart';

// tests for CheckoutSessionSubscription
void main() {
  final instance = CheckoutSessionSubscriptionBuilder();
  // TODO add properties to the builder and call build()

  group(CheckoutSessionSubscription, () {
    // SubscriptionApplication application
    test('to test the property `application`', () async {
      // TODO
    });

    // A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account.
    // num applicationFeePercent
    test('to test the property `applicationFeePercent`', () async {
      // TODO
    });

    // SubscriptionAutomaticTax automaticTax
    test('to test the property `automaticTax`', () async {
      // TODO
    });

    // The reference point that aligns future [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle) dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals. The timestamp is in UTC format.
    // int billingCycleAnchor
    test('to test the property `billingCycleAnchor`', () async {
      // TODO
    });

    // SubscriptionsResourceBillingCycleAnchorConfig billingCycleAnchorConfig
    test('to test the property `billingCycleAnchorConfig`', () async {
      // TODO
    });

    // SubscriptionsResourceBillingMode billingMode
    test('to test the property `billingMode`', () async {
      // TODO
    });

    // SubscriptionBillingThresholds billingThresholds
    test('to test the property `billingThresholds`', () async {
      // TODO
    });

    // A date in the future at which the subscription will automatically get canceled
    // int cancelAt
    test('to test the property `cancelAt`', () async {
      // TODO
    });

    // Whether this subscription will (if `status=active`) or did (if `status=canceled`) cancel at the end of the current billing period.
    // bool cancelAtPeriodEnd
    test('to test the property `cancelAtPeriodEnd`', () async {
      // TODO
    });

    // If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
    // int canceledAt
    test('to test the property `canceledAt`', () async {
      // TODO
    });

    // CancellationDetails cancellationDetails
    test('to test the property `cancellationDetails`', () async {
      // TODO
    });

    // Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
    // String collectionMethod
    test('to test the property `collectionMethod`', () async {
      // TODO
    });

    // Time at which the object was created. Measured in seconds since the Unix epoch.
    // int created
    test('to test the property `created`', () async {
      // TODO
    });

    // Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    // String currency
    test('to test the property `currency`', () async {
      // TODO
    });

    // SubscriptionCustomer customer
    test('to test the property `customer`', () async {
      // TODO
    });

    // Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
    // int daysUntilDue
    test('to test the property `daysUntilDue`', () async {
      // TODO
    });

    // SubscriptionDefaultPaymentMethod defaultPaymentMethod
    test('to test the property `defaultPaymentMethod`', () async {
      // TODO
    });

    // SubscriptionDefaultSource defaultSource
    test('to test the property `defaultSource`', () async {
      // TODO
    });

    // The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.
    // BuiltList<TaxRate> defaultTaxRates
    test('to test the property `defaultTaxRates`', () async {
      // TODO
    });

    // The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
    // String description
    test('to test the property `description`', () async {
      // TODO
    });

    // The discounts applied to the subscription. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount.
    // BuiltList<InvoiceitemDiscountsInner> discounts
    test('to test the property `discounts`', () async {
      // TODO
    });

    // If the subscription has ended, the date the subscription ended.
    // int endedAt
    test('to test the property `endedAt`', () async {
      // TODO
    });

    // Unique identifier for the object.
    // String id
    test('to test the property `id`', () async {
      // TODO
    });

    // SubscriptionsResourceSubscriptionInvoiceSettings invoiceSettings
    test('to test the property `invoiceSettings`', () async {
      // TODO
    });

    // SubscriptionItemList items
    test('to test the property `items`', () async {
      // TODO
    });

    // SubscriptionLatestInvoice latestInvoice
    test('to test the property `latestInvoice`', () async {
      // TODO
    });

    // Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    // bool livemode
    test('to test the property `livemode`', () async {
      // TODO
    });

    // Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    // BuiltMap<String, String> metadata
    test('to test the property `metadata`', () async {
      // TODO
    });

    // Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
    // int nextPendingInvoiceItemInvoice
    test('to test the property `nextPendingInvoiceItemInvoice`', () async {
      // TODO
    });

    // String representing the object's type. Objects of the same type share the same value.
    // String object
    test('to test the property `object`', () async {
      // TODO
    });

    // SubscriptionOnBehalfOf onBehalfOf
    test('to test the property `onBehalfOf`', () async {
      // TODO
    });

    // SubscriptionsResourcePauseCollection pauseCollection
    test('to test the property `pauseCollection`', () async {
      // TODO
    });

    // SubscriptionsResourcePaymentSettings paymentSettings
    test('to test the property `paymentSettings`', () async {
      // TODO
    });

    // SubscriptionPendingInvoiceItemInterval pendingInvoiceItemInterval
    test('to test the property `pendingInvoiceItemInterval`', () async {
      // TODO
    });

    // SubscriptionPendingSetupIntent pendingSetupIntent
    test('to test the property `pendingSetupIntent`', () async {
      // TODO
    });

    // SubscriptionsResourcePendingUpdate pendingUpdate
    test('to test the property `pendingUpdate`', () async {
      // TODO
    });

    // SubscriptionSchedule1 schedule
    test('to test the property `schedule`', () async {
      // TODO
    });

    // Date when the subscription was first created. The date might differ from the `created` date due to backdating.
    // int startDate
    test('to test the property `startDate`', () async {
      // TODO
    });

    // Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, `unpaid`, or `paused`.   For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this status can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` status. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal status, the open invoice will be voided and no further invoices will be generated.   A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.   A subscription can only enter a `paused` status [when a trial ends without a payment method](https://stripe.com/docs/billing/subscriptions/trials#create-free-trials-without-payment). A `paused` subscription doesn't generate invoices and can be resumed after your customer adds their payment method. The `paused` status is different from [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment), which still generates invoices and leaves the subscription's status unchanged.   If subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is required but cannot be paid (due to failed payment or awaiting additional user actions). Once Stripe has exhausted all payment retry attempts, the subscription will become `canceled` or `unpaid` (depending on your subscriptions settings).   If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
    // String status
    test('to test the property `status`', () async {
      // TODO
    });

    // SubscriptionTestClock testClock
    test('to test the property `testClock`', () async {
      // TODO
    });

    // SubscriptionTransferData transferData
    test('to test the property `transferData`', () async {
      // TODO
    });

    // If the subscription has a trial, the end of that trial.
    // int trialEnd
    test('to test the property `trialEnd`', () async {
      // TODO
    });

    // SubscriptionsTrialsResourceTrialSettings trialSettings
    test('to test the property `trialSettings`', () async {
      // TODO
    });

    // If the subscription has a trial, the beginning of that trial.
    // int trialStart
    test('to test the property `trialStart`', () async {
      // TODO
    });

  });
}
