//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.18

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

import 'package:openapi/api.dart';
import 'package:test/test.dart';

// tests for TerminalReaderReaderResourceRefundPaymentActionPaymentIntent
void main() {
  // final instance = TerminalReaderReaderResourceRefundPaymentActionPaymentIntent();

  group('test TerminalReaderReaderResourceRefundPaymentActionPaymentIntent', () {
    // Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    // int amount
    test('to test the property `amount`', () async {
      // TODO
    });

    // Amount that can be captured from this PaymentIntent.
    // int amountCapturable
    test('to test the property `amountCapturable`', () async {
      // TODO
    });

    // PaymentIntentAmountDetails amountDetails
    test('to test the property `amountDetails`', () async {
      // TODO
    });

    // Amount that this PaymentIntent collects.
    // int amountReceived
    test('to test the property `amountReceived`', () async {
      // TODO
    });

    // PaymentIntentApplication application
    test('to test the property `application`', () async {
      // TODO
    });

    // The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total amount captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    // int applicationFeeAmount
    test('to test the property `applicationFeeAmount`', () async {
      // TODO
    });

    // PaymentFlowsAutomaticPaymentMethodsPaymentIntent automaticPaymentMethods
    test('to test the property `automaticPaymentMethods`', () async {
      // TODO
    });

    // Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
    // int canceledAt
    test('to test the property `canceledAt`', () async {
      // TODO
    });

    // Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
    // String cancellationReason
    test('to test the property `cancellationReason`', () async {
      // TODO
    });

    // Controls when the funds will be captured from the customer's account.
    // String captureMethod
    test('to test the property `captureMethod`', () async {
      // TODO
    });

    // The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.   The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.  Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.
    // String clientSecret
    test('to test the property `clientSecret`', () async {
      // TODO
    });

    // Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
    // String confirmationMethod
    test('to test the property `confirmationMethod`', () async {
      // TODO
    });

    // Time at which the object was created. Measured in seconds since the Unix epoch.
    // int created
    test('to test the property `created`', () async {
      // TODO
    });

    // Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    // String currency
    test('to test the property `currency`', () async {
      // TODO
    });

    // PaymentIntentCustomer customer
    test('to test the property `customer`', () async {
      // TODO
    });

    // An arbitrary string attached to the object. Often useful for displaying to users.
    // String description
    test('to test the property `description`', () async {
      // TODO
    });

    // Unique identifier for the object.
    // String id
    test('to test the property `id`', () async {
      // TODO
    });

    // ApiErrors lastPaymentError
    test('to test the property `lastPaymentError`', () async {
      // TODO
    });

    // PaymentIntentLatestCharge latestCharge
    test('to test the property `latestCharge`', () async {
      // TODO
    });

    // Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    // bool livemode
    test('to test the property `livemode`', () async {
      // TODO
    });

    // Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Learn more about [storing information in metadata](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).
    // Map<String, String> metadata (default value: const {})
    test('to test the property `metadata`', () async {
      // TODO
    });

    // PaymentIntentNextAction nextAction
    test('to test the property `nextAction`', () async {
      // TODO
    });

    // String representing the object's type. Objects of the same type share the same value.
    // String object
    test('to test the property `object`', () async {
      // TODO
    });

    // PaymentIntentOnBehalfOf onBehalfOf
    test('to test the property `onBehalfOf`', () async {
      // TODO
    });

    // PaymentIntentPaymentMethod paymentMethod
    test('to test the property `paymentMethod`', () async {
      // TODO
    });

    // PaymentMethodConfigBizPaymentMethodConfigurationDetails paymentMethodConfigurationDetails
    test('to test the property `paymentMethodConfigurationDetails`', () async {
      // TODO
    });

    // PaymentIntentPaymentMethodOptions paymentMethodOptions
    test('to test the property `paymentMethodOptions`', () async {
      // TODO
    });

    // The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. A comprehensive list of valid payment method types can be found [here](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).
    // List<String> paymentMethodTypes (default value: const [])
    test('to test the property `paymentMethodTypes`', () async {
      // TODO
    });

    // PaymentFlowsPaymentIntentPresentmentDetails presentmentDetails
    test('to test the property `presentmentDetails`', () async {
      // TODO
    });

    // PaymentIntentProcessing processing
    test('to test the property `processing`', () async {
      // TODO
    });

    // Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
    // String receiptEmail
    test('to test the property `receiptEmail`', () async {
      // TODO
    });

    // PaymentIntentReview review
    test('to test the property `review`', () async {
      // TODO
    });

    // Indicates that you intend to make future payments with this PaymentIntent's payment method.  If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.  If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.  When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
    // String setupFutureUsage
    test('to test the property `setupFutureUsage`', () async {
      // TODO
    });

    // Shipping shipping
    test('to test the property `shipping`', () async {
      // TODO
    });

    // Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).  Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
    // String statementDescriptor
    test('to test the property `statementDescriptor`', () async {
      // TODO
    });

    // Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
    // String statementDescriptorSuffix
    test('to test the property `statementDescriptorSuffix`', () async {
      // TODO
    });

    // Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
    // String status
    test('to test the property `status`', () async {
      // TODO
    });

    // TransferData transferData
    test('to test the property `transferData`', () async {
      // TODO
    });

    // A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers).
    // String transferGroup
    test('to test the property `transferGroup`', () async {
      // TODO
    });


  });

}
